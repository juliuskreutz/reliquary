// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `WinterCampActivityDetailInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:WinterCampActivityDetailInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct WinterCampActivityDetailInfo {
    // message fields
    // @@protoc_insertion_point(field:WinterCampActivityDetailInfo.battle_info)
    pub battle_info: ::protobuf::MessageField<super::WinterCampStageInfo::WinterCampStageInfo>,
    // @@protoc_insertion_point(field:WinterCampActivityDetailInfo.race_info_list)
    pub race_info_list: ::std::vec::Vec<super::WinterCampRaceStageInfo::WinterCampRaceStageInfo>,
    // @@protoc_insertion_point(field:WinterCampActivityDetailInfo.explore_info)
    pub explore_info: ::protobuf::MessageField<super::WinterCampStageInfo::WinterCampStageInfo>,
    // @@protoc_insertion_point(field:WinterCampActivityDetailInfo.used_item_list)
    pub used_item_list: ::std::vec::Vec<super::ItemParam::ItemParam>,
    // @@protoc_insertion_point(field:WinterCampActivityDetailInfo.is_content_closed)
    pub is_content_closed: bool,
    // @@protoc_insertion_point(field:WinterCampActivityDetailInfo.FHECIOABEBK)
    pub FHECIOABEBK: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:WinterCampActivityDetailInfo.CKKODMFPEKP)
    pub CKKODMFPEKP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:WinterCampActivityDetailInfo.NJCEPGDFJGF)
    pub NJCEPGDFJGF: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:WinterCampActivityDetailInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WinterCampActivityDetailInfo {
    fn default() -> &'a WinterCampActivityDetailInfo {
        <WinterCampActivityDetailInfo as ::protobuf::Message>::default_instance()
    }
}

impl WinterCampActivityDetailInfo {
    pub fn new() -> WinterCampActivityDetailInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::WinterCampStageInfo::WinterCampStageInfo>(
            "battle_info",
            |m: &WinterCampActivityDetailInfo| { &m.battle_info },
            |m: &mut WinterCampActivityDetailInfo| { &mut m.battle_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "race_info_list",
            |m: &WinterCampActivityDetailInfo| { &m.race_info_list },
            |m: &mut WinterCampActivityDetailInfo| { &mut m.race_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::WinterCampStageInfo::WinterCampStageInfo>(
            "explore_info",
            |m: &WinterCampActivityDetailInfo| { &m.explore_info },
            |m: &mut WinterCampActivityDetailInfo| { &mut m.explore_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "used_item_list",
            |m: &WinterCampActivityDetailInfo| { &m.used_item_list },
            |m: &mut WinterCampActivityDetailInfo| { &mut m.used_item_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_content_closed",
            |m: &WinterCampActivityDetailInfo| { &m.is_content_closed },
            |m: &mut WinterCampActivityDetailInfo| { &mut m.is_content_closed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FHECIOABEBK",
            |m: &WinterCampActivityDetailInfo| { &m.FHECIOABEBK },
            |m: &mut WinterCampActivityDetailInfo| { &mut m.FHECIOABEBK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CKKODMFPEKP",
            |m: &WinterCampActivityDetailInfo| { &m.CKKODMFPEKP },
            |m: &mut WinterCampActivityDetailInfo| { &mut m.CKKODMFPEKP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NJCEPGDFJGF",
            |m: &WinterCampActivityDetailInfo| { &m.NJCEPGDFJGF },
            |m: &mut WinterCampActivityDetailInfo| { &mut m.NJCEPGDFJGF },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WinterCampActivityDetailInfo>(
            "WinterCampActivityDetailInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WinterCampActivityDetailInfo {
    const NAME: &'static str = "WinterCampActivityDetailInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.battle_info)?;
                },
                90 => {
                    self.race_info_list.push(is.read_message()?);
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.explore_info)?;
                },
                106 => {
                    self.used_item_list.push(is.read_message()?);
                },
                56 => {
                    self.is_content_closed = is.read_bool()?;
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.FHECIOABEBK)?;
                },
                48 => {
                    self.FHECIOABEBK.push(is.read_uint32()?);
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.CKKODMFPEKP)?;
                },
                32 => {
                    self.CKKODMFPEKP.push(is.read_uint32()?);
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.NJCEPGDFJGF)?;
                },
                24 => {
                    self.NJCEPGDFJGF.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.battle_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.race_info_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.explore_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.used_item_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.is_content_closed != false {
            my_size += 1 + 1;
        }
        for value in &self.FHECIOABEBK {
            my_size += ::protobuf::rt::uint32_size(6, *value);
        };
        for value in &self.CKKODMFPEKP {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        for value in &self.NJCEPGDFJGF {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.battle_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        for v in &self.race_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        if let Some(v) = self.explore_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        for v in &self.used_item_list {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        if self.is_content_closed != false {
            os.write_bool(7, self.is_content_closed)?;
        }
        for v in &self.FHECIOABEBK {
            os.write_uint32(6, *v)?;
        };
        for v in &self.CKKODMFPEKP {
            os.write_uint32(4, *v)?;
        };
        for v in &self.NJCEPGDFJGF {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WinterCampActivityDetailInfo {
        WinterCampActivityDetailInfo::new()
    }

    fn clear(&mut self) {
        self.battle_info.clear();
        self.race_info_list.clear();
        self.explore_info.clear();
        self.used_item_list.clear();
        self.is_content_closed = false;
        self.FHECIOABEBK.clear();
        self.CKKODMFPEKP.clear();
        self.NJCEPGDFJGF.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WinterCampActivityDetailInfo {
        static instance: WinterCampActivityDetailInfo = WinterCampActivityDetailInfo {
            battle_info: ::protobuf::MessageField::none(),
            race_info_list: ::std::vec::Vec::new(),
            explore_info: ::protobuf::MessageField::none(),
            used_item_list: ::std::vec::Vec::new(),
            is_content_closed: false,
            FHECIOABEBK: ::std::vec::Vec::new(),
            CKKODMFPEKP: ::std::vec::Vec::new(),
            NJCEPGDFJGF: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WinterCampActivityDetailInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WinterCampActivityDetailInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WinterCampActivityDetailInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WinterCampActivityDetailInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"WinterCampActivityDetailInfo.proto\x1a\x19WinterCampStageInfo.proto\
    \x1a\x1dWinterCampRaceStageInfo.proto\x1a\x0fItemParam.proto\"\x92\x03\n\
    \x1cWinterCampActivityDetailInfo\x125\n\x0bbattle_info\x18\n\x20\x01(\
    \x0b2\x14.WinterCampStageInfoR\nbattleInfo\x12>\n\x0erace_info_list\x18\
    \x0b\x20\x03(\x0b2\x18.WinterCampRaceStageInfoR\x0craceInfoList\x127\n\
    \x0cexplore_info\x18\x0c\x20\x01(\x0b2\x14.WinterCampStageInfoR\x0bexplo\
    reInfo\x120\n\x0eused_item_list\x18\r\x20\x03(\x0b2\n.ItemParamR\x0cused\
    ItemList\x12*\n\x11is_content_closed\x18\x07\x20\x01(\x08R\x0fisContentC\
    losed\x12\x20\n\x0bFHECIOABEBK\x18\x06\x20\x03(\rR\x0bFHECIOABEBK\x12\
    \x20\n\x0bCKKODMFPEKP\x18\x04\x20\x03(\rR\x0bCKKODMFPEKP\x12\x20\n\x0bNJ\
    CEPGDFJGF\x18\x03\x20\x03(\rR\x0bNJCEPGDFJGFB\x1b\n\x19emu.grasscutter.n\
    et.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::WinterCampStageInfo::file_descriptor().clone());
            deps.push(super::WinterCampRaceStageInfo::file_descriptor().clone());
            deps.push(super::ItemParam::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(WinterCampActivityDetailInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
