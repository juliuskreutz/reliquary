// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DungeonChallengeFinishNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:DungeonChallengeFinishNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DungeonChallengeFinishNotify {
    // message fields
    // @@protoc_insertion_point(field:DungeonChallengeFinishNotify.finish_type)
    pub finish_type: ::protobuf::EnumOrUnknown<super::ChallengeFinishType::ChallengeFinishType>,
    // @@protoc_insertion_point(field:DungeonChallengeFinishNotify.time_cost)
    pub time_cost: u32,
    // @@protoc_insertion_point(field:DungeonChallengeFinishNotify.strengthen_point_data_map)
    pub strengthen_point_data_map: ::std::collections::HashMap<u32, super::StrengthenPointData::StrengthenPointData>,
    // @@protoc_insertion_point(field:DungeonChallengeFinishNotify.challenge_index)
    pub challenge_index: u32,
    // @@protoc_insertion_point(field:DungeonChallengeFinishNotify.is_success)
    pub is_success: bool,
    // @@protoc_insertion_point(field:DungeonChallengeFinishNotify.challenge_record_type)
    pub challenge_record_type: u32,
    // @@protoc_insertion_point(field:DungeonChallengeFinishNotify.is_new_record)
    pub is_new_record: bool,
    // @@protoc_insertion_point(field:DungeonChallengeFinishNotify.current_value)
    pub current_value: u32,
    // message oneof groups
    pub detail: ::std::option::Option<dungeon_challenge_finish_notify::Detail>,
    // special fields
    // @@protoc_insertion_point(special_field:DungeonChallengeFinishNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DungeonChallengeFinishNotify {
    fn default() -> &'a DungeonChallengeFinishNotify {
        <DungeonChallengeFinishNotify as ::protobuf::Message>::default_instance()
    }
}

impl DungeonChallengeFinishNotify {
    pub fn new() -> DungeonChallengeFinishNotify {
        ::std::default::Default::default()
    }

    // .ChannelerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 1922;

    pub fn channeller_slab_loop_dungeon_result_info(&self) -> &super::ChannelerSlabLoopDungeonResultInfo::ChannelerSlabLoopDungeonResultInfo {
        match self.detail {
            ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::ChannellerSlabLoopDungeonResultInfo(ref v)) => v,
            _ => <super::ChannelerSlabLoopDungeonResultInfo::ChannelerSlabLoopDungeonResultInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_channeller_slab_loop_dungeon_result_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_channeller_slab_loop_dungeon_result_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::ChannellerSlabLoopDungeonResultInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_channeller_slab_loop_dungeon_result_info(&mut self, v: super::ChannelerSlabLoopDungeonResultInfo::ChannelerSlabLoopDungeonResultInfo) {
        self.detail = ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::ChannellerSlabLoopDungeonResultInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_channeller_slab_loop_dungeon_result_info(&mut self) -> &mut super::ChannelerSlabLoopDungeonResultInfo::ChannelerSlabLoopDungeonResultInfo {
        if let ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::ChannellerSlabLoopDungeonResultInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::ChannellerSlabLoopDungeonResultInfo(super::ChannelerSlabLoopDungeonResultInfo::ChannelerSlabLoopDungeonResultInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::ChannellerSlabLoopDungeonResultInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_channeller_slab_loop_dungeon_result_info(&mut self) -> super::ChannelerSlabLoopDungeonResultInfo::ChannelerSlabLoopDungeonResultInfo {
        if self.has_channeller_slab_loop_dungeon_result_info() {
            match self.detail.take() {
                ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::ChannellerSlabLoopDungeonResultInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ChannelerSlabLoopDungeonResultInfo::ChannelerSlabLoopDungeonResultInfo::new()
        }
    }

    // .EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 1859;

    pub fn effigy_challenge_dungeon_result_info(&self) -> &super::EffigyChallengeDungeonResultInfo::EffigyChallengeDungeonResultInfo {
        match self.detail {
            ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::EffigyChallengeDungeonResultInfo(ref v)) => v,
            _ => <super::EffigyChallengeDungeonResultInfo::EffigyChallengeDungeonResultInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_effigy_challenge_dungeon_result_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_effigy_challenge_dungeon_result_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::EffigyChallengeDungeonResultInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_effigy_challenge_dungeon_result_info(&mut self, v: super::EffigyChallengeDungeonResultInfo::EffigyChallengeDungeonResultInfo) {
        self.detail = ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::EffigyChallengeDungeonResultInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_effigy_challenge_dungeon_result_info(&mut self) -> &mut super::EffigyChallengeDungeonResultInfo::EffigyChallengeDungeonResultInfo {
        if let ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::EffigyChallengeDungeonResultInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::EffigyChallengeDungeonResultInfo(super::EffigyChallengeDungeonResultInfo::EffigyChallengeDungeonResultInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::EffigyChallengeDungeonResultInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_effigy_challenge_dungeon_result_info(&mut self) -> super::EffigyChallengeDungeonResultInfo::EffigyChallengeDungeonResultInfo {
        if self.has_effigy_challenge_dungeon_result_info() {
            match self.detail.take() {
                ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::EffigyChallengeDungeonResultInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EffigyChallengeDungeonResultInfo::EffigyChallengeDungeonResultInfo::new()
        }
    }

    // .PotionDungeonResultInfo potion_dungeon_result_info = 1677;

    pub fn potion_dungeon_result_info(&self) -> &super::PotionDungeonResultInfo::PotionDungeonResultInfo {
        match self.detail {
            ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::PotionDungeonResultInfo(ref v)) => v,
            _ => <super::PotionDungeonResultInfo::PotionDungeonResultInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_potion_dungeon_result_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_potion_dungeon_result_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::PotionDungeonResultInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_potion_dungeon_result_info(&mut self, v: super::PotionDungeonResultInfo::PotionDungeonResultInfo) {
        self.detail = ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::PotionDungeonResultInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_potion_dungeon_result_info(&mut self) -> &mut super::PotionDungeonResultInfo::PotionDungeonResultInfo {
        if let ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::PotionDungeonResultInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::PotionDungeonResultInfo(super::PotionDungeonResultInfo::PotionDungeonResultInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::PotionDungeonResultInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_potion_dungeon_result_info(&mut self) -> super::PotionDungeonResultInfo::PotionDungeonResultInfo {
        if self.has_potion_dungeon_result_info() {
            match self.detail.take() {
                ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::PotionDungeonResultInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PotionDungeonResultInfo::PotionDungeonResultInfo::new()
        }
    }

    // .CustomDungeonResultInfo custom_dungeon_result_info = 1349;

    pub fn custom_dungeon_result_info(&self) -> &super::CustomDungeonResultInfo::CustomDungeonResultInfo {
        match self.detail {
            ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::CustomDungeonResultInfo(ref v)) => v,
            _ => <super::CustomDungeonResultInfo::CustomDungeonResultInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_custom_dungeon_result_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_custom_dungeon_result_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::CustomDungeonResultInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom_dungeon_result_info(&mut self, v: super::CustomDungeonResultInfo::CustomDungeonResultInfo) {
        self.detail = ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::CustomDungeonResultInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom_dungeon_result_info(&mut self) -> &mut super::CustomDungeonResultInfo::CustomDungeonResultInfo {
        if let ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::CustomDungeonResultInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::CustomDungeonResultInfo(super::CustomDungeonResultInfo::CustomDungeonResultInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::CustomDungeonResultInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom_dungeon_result_info(&mut self) -> super::CustomDungeonResultInfo::CustomDungeonResultInfo {
        if self.has_custom_dungeon_result_info() {
            match self.detail.take() {
                ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::CustomDungeonResultInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CustomDungeonResultInfo::CustomDungeonResultInfo::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "finish_type",
            |m: &DungeonChallengeFinishNotify| { &m.finish_type },
            |m: &mut DungeonChallengeFinishNotify| { &mut m.finish_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_cost",
            |m: &DungeonChallengeFinishNotify| { &m.time_cost },
            |m: &mut DungeonChallengeFinishNotify| { &mut m.time_cost },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "strengthen_point_data_map",
            |m: &DungeonChallengeFinishNotify| { &m.strengthen_point_data_map },
            |m: &mut DungeonChallengeFinishNotify| { &mut m.strengthen_point_data_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "challenge_index",
            |m: &DungeonChallengeFinishNotify| { &m.challenge_index },
            |m: &mut DungeonChallengeFinishNotify| { &mut m.challenge_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_success",
            |m: &DungeonChallengeFinishNotify| { &m.is_success },
            |m: &mut DungeonChallengeFinishNotify| { &mut m.is_success },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "challenge_record_type",
            |m: &DungeonChallengeFinishNotify| { &m.challenge_record_type },
            |m: &mut DungeonChallengeFinishNotify| { &mut m.challenge_record_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_new_record",
            |m: &DungeonChallengeFinishNotify| { &m.is_new_record },
            |m: &mut DungeonChallengeFinishNotify| { &mut m.is_new_record },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_value",
            |m: &DungeonChallengeFinishNotify| { &m.current_value },
            |m: &mut DungeonChallengeFinishNotify| { &mut m.current_value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ChannelerSlabLoopDungeonResultInfo::ChannelerSlabLoopDungeonResultInfo>(
            "channeller_slab_loop_dungeon_result_info",
            DungeonChallengeFinishNotify::has_channeller_slab_loop_dungeon_result_info,
            DungeonChallengeFinishNotify::channeller_slab_loop_dungeon_result_info,
            DungeonChallengeFinishNotify::mut_channeller_slab_loop_dungeon_result_info,
            DungeonChallengeFinishNotify::set_channeller_slab_loop_dungeon_result_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EffigyChallengeDungeonResultInfo::EffigyChallengeDungeonResultInfo>(
            "effigy_challenge_dungeon_result_info",
            DungeonChallengeFinishNotify::has_effigy_challenge_dungeon_result_info,
            DungeonChallengeFinishNotify::effigy_challenge_dungeon_result_info,
            DungeonChallengeFinishNotify::mut_effigy_challenge_dungeon_result_info,
            DungeonChallengeFinishNotify::set_effigy_challenge_dungeon_result_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PotionDungeonResultInfo::PotionDungeonResultInfo>(
            "potion_dungeon_result_info",
            DungeonChallengeFinishNotify::has_potion_dungeon_result_info,
            DungeonChallengeFinishNotify::potion_dungeon_result_info,
            DungeonChallengeFinishNotify::mut_potion_dungeon_result_info,
            DungeonChallengeFinishNotify::set_potion_dungeon_result_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CustomDungeonResultInfo::CustomDungeonResultInfo>(
            "custom_dungeon_result_info",
            DungeonChallengeFinishNotify::has_custom_dungeon_result_info,
            DungeonChallengeFinishNotify::custom_dungeon_result_info,
            DungeonChallengeFinishNotify::mut_custom_dungeon_result_info,
            DungeonChallengeFinishNotify::set_custom_dungeon_result_info,
        ));
        oneofs.push(dungeon_challenge_finish_notify::Detail::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DungeonChallengeFinishNotify>(
            "DungeonChallengeFinishNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DungeonChallengeFinishNotify {
    const NAME: &'static str = "DungeonChallengeFinishNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.finish_type = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.time_cost = is.read_uint32()?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.strengthen_point_data_map.insert(key, value);
                },
                56 => {
                    self.challenge_index = is.read_uint32()?;
                },
                64 => {
                    self.is_success = is.read_bool()?;
                },
                72 => {
                    self.challenge_record_type = is.read_uint32()?;
                },
                104 => {
                    self.is_new_record = is.read_bool()?;
                },
                120 => {
                    self.current_value = is.read_uint32()?;
                },
                15378 => {
                    self.detail = ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::ChannellerSlabLoopDungeonResultInfo(is.read_message()?));
                },
                14874 => {
                    self.detail = ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::EffigyChallengeDungeonResultInfo(is.read_message()?));
                },
                13418 => {
                    self.detail = ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::PotionDungeonResultInfo(is.read_message()?));
                },
                10794 => {
                    self.detail = ::std::option::Option::Some(dungeon_challenge_finish_notify::Detail::CustomDungeonResultInfo(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.finish_type != ::protobuf::EnumOrUnknown::new(super::ChallengeFinishType::ChallengeFinishType::CHALLENGE_FINISH_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(2, self.finish_type.value());
        }
        if self.time_cost != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.time_cost);
        }
        for (k, v) in &self.strengthen_point_data_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.challenge_index != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.challenge_index);
        }
        if self.is_success != false {
            my_size += 1 + 1;
        }
        if self.challenge_record_type != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.challenge_record_type);
        }
        if self.is_new_record != false {
            my_size += 1 + 1;
        }
        if self.current_value != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.current_value);
        }
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &dungeon_challenge_finish_notify::Detail::ChannellerSlabLoopDungeonResultInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dungeon_challenge_finish_notify::Detail::EffigyChallengeDungeonResultInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dungeon_challenge_finish_notify::Detail::PotionDungeonResultInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dungeon_challenge_finish_notify::Detail::CustomDungeonResultInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.finish_type != ::protobuf::EnumOrUnknown::new(super::ChallengeFinishType::ChallengeFinishType::CHALLENGE_FINISH_TYPE_NONE) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.finish_type))?;
        }
        if self.time_cost != 0 {
            os.write_uint32(3, self.time_cost)?;
        }
        for (k, v) in &self.strengthen_point_data_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.challenge_index != 0 {
            os.write_uint32(7, self.challenge_index)?;
        }
        if self.is_success != false {
            os.write_bool(8, self.is_success)?;
        }
        if self.challenge_record_type != 0 {
            os.write_uint32(9, self.challenge_record_type)?;
        }
        if self.is_new_record != false {
            os.write_bool(13, self.is_new_record)?;
        }
        if self.current_value != 0 {
            os.write_uint32(15, self.current_value)?;
        }
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &dungeon_challenge_finish_notify::Detail::ChannellerSlabLoopDungeonResultInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1922, v, os)?;
                },
                &dungeon_challenge_finish_notify::Detail::EffigyChallengeDungeonResultInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1859, v, os)?;
                },
                &dungeon_challenge_finish_notify::Detail::PotionDungeonResultInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1677, v, os)?;
                },
                &dungeon_challenge_finish_notify::Detail::CustomDungeonResultInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1349, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DungeonChallengeFinishNotify {
        DungeonChallengeFinishNotify::new()
    }

    fn clear(&mut self) {
        self.finish_type = ::protobuf::EnumOrUnknown::new(super::ChallengeFinishType::ChallengeFinishType::CHALLENGE_FINISH_TYPE_NONE);
        self.time_cost = 0;
        self.strengthen_point_data_map.clear();
        self.challenge_index = 0;
        self.is_success = false;
        self.challenge_record_type = 0;
        self.is_new_record = false;
        self.current_value = 0;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DungeonChallengeFinishNotify {
        static instance: ::protobuf::rt::Lazy<DungeonChallengeFinishNotify> = ::protobuf::rt::Lazy::new();
        instance.get(DungeonChallengeFinishNotify::new)
    }
}

impl ::protobuf::MessageFull for DungeonChallengeFinishNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DungeonChallengeFinishNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DungeonChallengeFinishNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DungeonChallengeFinishNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DungeonChallengeFinishNotify`
pub mod dungeon_challenge_finish_notify {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:DungeonChallengeFinishNotify.detail)
    pub enum Detail {
        // @@protoc_insertion_point(oneof_field:DungeonChallengeFinishNotify.channeller_slab_loop_dungeon_result_info)
        ChannellerSlabLoopDungeonResultInfo(super::super::ChannelerSlabLoopDungeonResultInfo::ChannelerSlabLoopDungeonResultInfo),
        // @@protoc_insertion_point(oneof_field:DungeonChallengeFinishNotify.effigy_challenge_dungeon_result_info)
        EffigyChallengeDungeonResultInfo(super::super::EffigyChallengeDungeonResultInfo::EffigyChallengeDungeonResultInfo),
        // @@protoc_insertion_point(oneof_field:DungeonChallengeFinishNotify.potion_dungeon_result_info)
        PotionDungeonResultInfo(super::super::PotionDungeonResultInfo::PotionDungeonResultInfo),
        // @@protoc_insertion_point(oneof_field:DungeonChallengeFinishNotify.custom_dungeon_result_info)
        CustomDungeonResultInfo(super::super::CustomDungeonResultInfo::CustomDungeonResultInfo),
    }

    impl ::protobuf::Oneof for Detail {
    }

    impl ::protobuf::OneofFull for Detail {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DungeonChallengeFinishNotify as ::protobuf::MessageFull>::descriptor().oneof_by_name("detail").unwrap()).clone()
        }
    }

    impl Detail {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Detail>("detail")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"DungeonChallengeFinishNotify.proto\x1a\x19ChallengeFinishType.proto\
    \x1a(ChannelerSlabLoopDungeonResultInfo.proto\x1a\x1dCustomDungeonResult\
    Info.proto\x1a&EffigyChallengeDungeonResultInfo.proto\x1a\x1dPotionDunge\
    onResultInfo.proto\x1a\x19StrengthenPointData.proto\"\xc1\x07\n\x1cDunge\
    onChallengeFinishNotify\x125\n\x0bfinish_type\x18\x02\x20\x01(\x0e2\x14.\
    ChallengeFinishTypeR\nfinishType\x12\x1b\n\ttime_cost\x18\x03\x20\x01(\r\
    R\x08timeCost\x12t\n\x19strengthen_point_data_map\x18\x05\x20\x03(\x0b29\
    .DungeonChallengeFinishNotify.StrengthenPointDataMapEntryR\x16strengthen\
    PointDataMap\x12'\n\x0fchallenge_index\x18\x07\x20\x01(\rR\x0echallengeI\
    ndex\x12\x1d\n\nis_success\x18\x08\x20\x01(\x08R\tisSuccess\x122\n\x15ch\
    allenge_record_type\x18\t\x20\x01(\rR\x13challengeRecordType\x12\"\n\ris\
    _new_record\x18\r\x20\x01(\x08R\x0bisNewRecord\x12#\n\rcurrent_value\x18\
    \x0f\x20\x01(\rR\x0ccurrentValue\x12}\n(channeller_slab_loop_dungeon_res\
    ult_info\x18\x82\x0f\x20\x01(\x0b2#.ChannelerSlabLoopDungeonResultInfoH\
    \0R#channellerSlabLoopDungeonResultInfo\x12t\n$effigy_challenge_dungeon_\
    result_info\x18\xc3\x0e\x20\x01(\x0b2!.EffigyChallengeDungeonResultInfoH\
    \0R\x20effigyChallengeDungeonResultInfo\x12X\n\x1apotion_dungeon_result_\
    info\x18\x8d\r\x20\x01(\x0b2\x18.PotionDungeonResultInfoH\0R\x17potionDu\
    ngeonResultInfo\x12X\n\x1acustom_dungeon_result_info\x18\xc5\n\x20\x01(\
    \x0b2\x18.CustomDungeonResultInfoH\0R\x17customDungeonResultInfo\x1a_\n\
    \x1bStrengthenPointDataMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03\
    key\x12*\n\x05value\x18\x02\x20\x01(\x0b2\x14.StrengthenPointDataR\x05va\
    lue:\x028\x01B\x08\n\x06detailB\x1b\n\x19emu.grasscutter.net.protob\x06p\
    roto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::ChallengeFinishType::file_descriptor().clone());
            deps.push(super::ChannelerSlabLoopDungeonResultInfo::file_descriptor().clone());
            deps.push(super::CustomDungeonResultInfo::file_descriptor().clone());
            deps.push(super::EffigyChallengeDungeonResultInfo::file_descriptor().clone());
            deps.push(super::PotionDungeonResultInfo::file_descriptor().clone());
            deps.push(super::StrengthenPointData::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DungeonChallengeFinishNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
