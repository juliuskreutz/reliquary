// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ShopGoods.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ShopGoods)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ShopGoods {
    // message fields
    // @@protoc_insertion_point(field:ShopGoods.goods_item)
    pub goods_item: ::protobuf::MessageField<super::ItemParam::ItemParam>,
    // @@protoc_insertion_point(field:ShopGoods.end_time)
    pub end_time: u32,
    // @@protoc_insertion_point(field:ShopGoods.begin_time)
    pub begin_time: u32,
    // @@protoc_insertion_point(field:ShopGoods.cost_item_list)
    pub cost_item_list: ::std::vec::Vec<super::ItemParam::ItemParam>,
    // @@protoc_insertion_point(field:ShopGoods.goods_id)
    pub goods_id: u32,
    // @@protoc_insertion_point(field:ShopGoods.pre_goods_id_list)
    pub pre_goods_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ShopGoods.next_refresh_time)
    pub next_refresh_time: u32,
    // @@protoc_insertion_point(field:ShopGoods.bought_num)
    pub bought_num: u32,
    // @@protoc_insertion_point(field:ShopGoods.hcoin)
    pub hcoin: u32,
    // @@protoc_insertion_point(field:ShopGoods.buy_limit)
    pub buy_limit: u32,
    // @@protoc_insertion_point(field:ShopGoods.max_level)
    pub max_level: u32,
    // @@protoc_insertion_point(field:ShopGoods.min_level)
    pub min_level: u32,
    // @@protoc_insertion_point(field:ShopGoods.scoin)
    pub scoin: u32,
    // @@protoc_insertion_point(field:ShopGoods.mcoin)
    pub mcoin: u32,
    // @@protoc_insertion_point(field:ShopGoods.secondary_sheet_id)
    pub secondary_sheet_id: u32,
    // @@protoc_insertion_point(field:ShopGoods.single_limit)
    pub single_limit: u32,
    // @@protoc_insertion_point(field:ShopGoods.discount_id)
    pub discount_id: u32,
    // @@protoc_insertion_point(field:ShopGoods.discount_end_time)
    pub discount_end_time: u32,
    // @@protoc_insertion_point(field:ShopGoods.discount_begin_time)
    pub discount_begin_time: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ShopGoods.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ShopGoods {
    fn default() -> &'a ShopGoods {
        <ShopGoods as ::protobuf::Message>::default_instance()
    }
}

impl ShopGoods {
    pub fn new() -> ShopGoods {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(19);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemParam::ItemParam>(
            "goods_item",
            |m: &ShopGoods| { &m.goods_item },
            |m: &mut ShopGoods| { &mut m.goods_item },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_time",
            |m: &ShopGoods| { &m.end_time },
            |m: &mut ShopGoods| { &mut m.end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "begin_time",
            |m: &ShopGoods| { &m.begin_time },
            |m: &mut ShopGoods| { &mut m.begin_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "cost_item_list",
            |m: &ShopGoods| { &m.cost_item_list },
            |m: &mut ShopGoods| { &mut m.cost_item_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "goods_id",
            |m: &ShopGoods| { &m.goods_id },
            |m: &mut ShopGoods| { &mut m.goods_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pre_goods_id_list",
            |m: &ShopGoods| { &m.pre_goods_id_list },
            |m: &mut ShopGoods| { &mut m.pre_goods_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next_refresh_time",
            |m: &ShopGoods| { &m.next_refresh_time },
            |m: &mut ShopGoods| { &mut m.next_refresh_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bought_num",
            |m: &ShopGoods| { &m.bought_num },
            |m: &mut ShopGoods| { &mut m.bought_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hcoin",
            |m: &ShopGoods| { &m.hcoin },
            |m: &mut ShopGoods| { &mut m.hcoin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buy_limit",
            |m: &ShopGoods| { &m.buy_limit },
            |m: &mut ShopGoods| { &mut m.buy_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_level",
            |m: &ShopGoods| { &m.max_level },
            |m: &mut ShopGoods| { &mut m.max_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_level",
            |m: &ShopGoods| { &m.min_level },
            |m: &mut ShopGoods| { &mut m.min_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scoin",
            |m: &ShopGoods| { &m.scoin },
            |m: &mut ShopGoods| { &mut m.scoin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mcoin",
            |m: &ShopGoods| { &m.mcoin },
            |m: &mut ShopGoods| { &mut m.mcoin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "secondary_sheet_id",
            |m: &ShopGoods| { &m.secondary_sheet_id },
            |m: &mut ShopGoods| { &mut m.secondary_sheet_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "single_limit",
            |m: &ShopGoods| { &m.single_limit },
            |m: &mut ShopGoods| { &mut m.single_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "discount_id",
            |m: &ShopGoods| { &m.discount_id },
            |m: &mut ShopGoods| { &mut m.discount_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "discount_end_time",
            |m: &ShopGoods| { &m.discount_end_time },
            |m: &mut ShopGoods| { &mut m.discount_end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "discount_begin_time",
            |m: &ShopGoods| { &m.discount_begin_time },
            |m: &mut ShopGoods| { &mut m.discount_begin_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ShopGoods>(
            "ShopGoods",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ShopGoods {
    const NAME: &'static str = "ShopGoods";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.goods_item)?;
                },
                24 => {
                    self.end_time = is.read_uint32()?;
                },
                96 => {
                    self.begin_time = is.read_uint32()?;
                },
                82 => {
                    self.cost_item_list.push(is.read_message()?);
                },
                88 => {
                    self.goods_id = is.read_uint32()?;
                },
                122 => {
                    is.read_repeated_packed_uint32_into(&mut self.pre_goods_id_list)?;
                },
                120 => {
                    self.pre_goods_id_list.push(is.read_uint32()?);
                },
                112 => {
                    self.next_refresh_time = is.read_uint32()?;
                },
                16 => {
                    self.bought_num = is.read_uint32()?;
                },
                104 => {
                    self.hcoin = is.read_uint32()?;
                },
                8 => {
                    self.buy_limit = is.read_uint32()?;
                },
                40 => {
                    self.max_level = is.read_uint32()?;
                },
                32 => {
                    self.min_level = is.read_uint32()?;
                },
                72 => {
                    self.scoin = is.read_uint32()?;
                },
                1152 => {
                    self.mcoin = is.read_uint32()?;
                },
                5304 => {
                    self.secondary_sheet_id = is.read_uint32()?;
                },
                1064 => {
                    self.single_limit = is.read_uint32()?;
                },
                1200 => {
                    self.discount_id = is.read_uint32()?;
                },
                6568 => {
                    self.discount_end_time = is.read_uint32()?;
                },
                3280 => {
                    self.discount_begin_time = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.goods_item.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.end_time != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.end_time);
        }
        if self.begin_time != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.begin_time);
        }
        for value in &self.cost_item_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.goods_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.goods_id);
        }
        for value in &self.pre_goods_id_list {
            my_size += ::protobuf::rt::uint32_size(15, *value);
        };
        if self.next_refresh_time != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.next_refresh_time);
        }
        if self.bought_num != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.bought_num);
        }
        if self.hcoin != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.hcoin);
        }
        if self.buy_limit != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.buy_limit);
        }
        if self.max_level != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.max_level);
        }
        if self.min_level != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.min_level);
        }
        if self.scoin != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.scoin);
        }
        if self.mcoin != 0 {
            my_size += ::protobuf::rt::uint32_size(144, self.mcoin);
        }
        if self.secondary_sheet_id != 0 {
            my_size += ::protobuf::rt::uint32_size(663, self.secondary_sheet_id);
        }
        if self.single_limit != 0 {
            my_size += ::protobuf::rt::uint32_size(133, self.single_limit);
        }
        if self.discount_id != 0 {
            my_size += ::protobuf::rt::uint32_size(150, self.discount_id);
        }
        if self.discount_end_time != 0 {
            my_size += ::protobuf::rt::uint32_size(821, self.discount_end_time);
        }
        if self.discount_begin_time != 0 {
            my_size += ::protobuf::rt::uint32_size(410, self.discount_begin_time);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.goods_item.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.end_time != 0 {
            os.write_uint32(3, self.end_time)?;
        }
        if self.begin_time != 0 {
            os.write_uint32(12, self.begin_time)?;
        }
        for v in &self.cost_item_list {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        if self.goods_id != 0 {
            os.write_uint32(11, self.goods_id)?;
        }
        for v in &self.pre_goods_id_list {
            os.write_uint32(15, *v)?;
        };
        if self.next_refresh_time != 0 {
            os.write_uint32(14, self.next_refresh_time)?;
        }
        if self.bought_num != 0 {
            os.write_uint32(2, self.bought_num)?;
        }
        if self.hcoin != 0 {
            os.write_uint32(13, self.hcoin)?;
        }
        if self.buy_limit != 0 {
            os.write_uint32(1, self.buy_limit)?;
        }
        if self.max_level != 0 {
            os.write_uint32(5, self.max_level)?;
        }
        if self.min_level != 0 {
            os.write_uint32(4, self.min_level)?;
        }
        if self.scoin != 0 {
            os.write_uint32(9, self.scoin)?;
        }
        if self.mcoin != 0 {
            os.write_uint32(144, self.mcoin)?;
        }
        if self.secondary_sheet_id != 0 {
            os.write_uint32(663, self.secondary_sheet_id)?;
        }
        if self.single_limit != 0 {
            os.write_uint32(133, self.single_limit)?;
        }
        if self.discount_id != 0 {
            os.write_uint32(150, self.discount_id)?;
        }
        if self.discount_end_time != 0 {
            os.write_uint32(821, self.discount_end_time)?;
        }
        if self.discount_begin_time != 0 {
            os.write_uint32(410, self.discount_begin_time)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ShopGoods {
        ShopGoods::new()
    }

    fn clear(&mut self) {
        self.goods_item.clear();
        self.end_time = 0;
        self.begin_time = 0;
        self.cost_item_list.clear();
        self.goods_id = 0;
        self.pre_goods_id_list.clear();
        self.next_refresh_time = 0;
        self.bought_num = 0;
        self.hcoin = 0;
        self.buy_limit = 0;
        self.max_level = 0;
        self.min_level = 0;
        self.scoin = 0;
        self.mcoin = 0;
        self.secondary_sheet_id = 0;
        self.single_limit = 0;
        self.discount_id = 0;
        self.discount_end_time = 0;
        self.discount_begin_time = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ShopGoods {
        static instance: ShopGoods = ShopGoods {
            goods_item: ::protobuf::MessageField::none(),
            end_time: 0,
            begin_time: 0,
            cost_item_list: ::std::vec::Vec::new(),
            goods_id: 0,
            pre_goods_id_list: ::std::vec::Vec::new(),
            next_refresh_time: 0,
            bought_num: 0,
            hcoin: 0,
            buy_limit: 0,
            max_level: 0,
            min_level: 0,
            scoin: 0,
            mcoin: 0,
            secondary_sheet_id: 0,
            single_limit: 0,
            discount_id: 0,
            discount_end_time: 0,
            discount_begin_time: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ShopGoods {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ShopGoods").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ShopGoods {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShopGoods {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fShopGoods.proto\x1a\x0fItemParam.proto\"\xa0\x05\n\tShopGoods\x12)\
    \n\ngoods_item\x18\x06\x20\x01(\x0b2\n.ItemParamR\tgoodsItem\x12\x19\n\
    \x08end_time\x18\x03\x20\x01(\rR\x07endTime\x12\x1d\n\nbegin_time\x18\
    \x0c\x20\x01(\rR\tbeginTime\x120\n\x0ecost_item_list\x18\n\x20\x03(\x0b2\
    \n.ItemParamR\x0ccostItemList\x12\x19\n\x08goods_id\x18\x0b\x20\x01(\rR\
    \x07goodsId\x12)\n\x11pre_goods_id_list\x18\x0f\x20\x03(\rR\x0epreGoodsI\
    dList\x12*\n\x11next_refresh_time\x18\x0e\x20\x01(\rR\x0fnextRefreshTime\
    \x12\x1d\n\nbought_num\x18\x02\x20\x01(\rR\tboughtNum\x12\x14\n\x05hcoin\
    \x18\r\x20\x01(\rR\x05hcoin\x12\x1b\n\tbuy_limit\x18\x01\x20\x01(\rR\x08\
    buyLimit\x12\x1b\n\tmax_level\x18\x05\x20\x01(\rR\x08maxLevel\x12\x1b\n\
    \tmin_level\x18\x04\x20\x01(\rR\x08minLevel\x12\x14\n\x05scoin\x18\t\x20\
    \x01(\rR\x05scoin\x12\x15\n\x05mcoin\x18\x90\x01\x20\x01(\rR\x05mcoin\
    \x12-\n\x12secondary_sheet_id\x18\x97\x05\x20\x01(\rR\x10secondarySheetI\
    d\x12\"\n\x0csingle_limit\x18\x85\x01\x20\x01(\rR\x0bsingleLimit\x12\x20\
    \n\x0bdiscount_id\x18\x96\x01\x20\x01(\rR\ndiscountId\x12+\n\x11discount\
    _end_time\x18\xb5\x06\x20\x01(\rR\x0fdiscountEndTime\x12/\n\x13discount_\
    begin_time\x18\x9a\x03\x20\x01(\rR\x11discountBeginTimeB\x1b\n\x19emu.gr\
    asscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ItemParam::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ShopGoods::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
