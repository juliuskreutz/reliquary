// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MotionState.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:MotionState)
pub enum MotionState {
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_NONE)
    MOTION_STATE_NONE = 0,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_RESET)
    MOTION_STATE_RESET = 1,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_STANDBY)
    MOTION_STATE_STANDBY = 2,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_STANDBY_MOVE)
    MOTION_STATE_STANDBY_MOVE = 3,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_WALK)
    MOTION_STATE_WALK = 4,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_RUN)
    MOTION_STATE_RUN = 5,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DASH)
    MOTION_STATE_DASH = 6,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_CLIMB)
    MOTION_STATE_CLIMB = 7,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_CLIMB_JUMP)
    MOTION_STATE_CLIMB_JUMP = 8,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_STANDBY_TO_CLIMB)
    MOTION_STATE_STANDBY_TO_CLIMB = 9,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_FIGHT)
    MOTION_STATE_FIGHT = 10,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_JUMP)
    MOTION_STATE_JUMP = 11,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DROP)
    MOTION_STATE_DROP = 12,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_FLY)
    MOTION_STATE_FLY = 13,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_SWIM_MOVE)
    MOTION_STATE_SWIM_MOVE = 14,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_SWIM_IDLE)
    MOTION_STATE_SWIM_IDLE = 15,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_SWIM_DASH)
    MOTION_STATE_SWIM_DASH = 16,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_SWIM_JUMP)
    MOTION_STATE_SWIM_JUMP = 17,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_SLIP)
    MOTION_STATE_SLIP = 18,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_GO_UPSTAIRS)
    MOTION_STATE_GO_UPSTAIRS = 19,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_FALL_ON_GROUND)
    MOTION_STATE_FALL_ON_GROUND = 20,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_JUMP_UP_WALL_FOR_STANDBY)
    MOTION_STATE_JUMP_UP_WALL_FOR_STANDBY = 21,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_JUMP_OFF_WALL)
    MOTION_STATE_JUMP_OFF_WALL = 22,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_POWERED_FLY)
    MOTION_STATE_POWERED_FLY = 23,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_LADDER_IDLE)
    MOTION_STATE_LADDER_IDLE = 24,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_LADDER_MOVE)
    MOTION_STATE_LADDER_MOVE = 25,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_LADDER_SLIP)
    MOTION_STATE_LADDER_SLIP = 26,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_STANDBY_TO_LADDER)
    MOTION_STATE_STANDBY_TO_LADDER = 27,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_LADDER_TO_STANDBY)
    MOTION_STATE_LADDER_TO_STANDBY = 28,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DANGER_STANDBY)
    MOTION_STATE_DANGER_STANDBY = 29,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DANGER_STANDBY_MOVE)
    MOTION_STATE_DANGER_STANDBY_MOVE = 30,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DANGER_WALK)
    MOTION_STATE_DANGER_WALK = 31,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DANGER_RUN)
    MOTION_STATE_DANGER_RUN = 32,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DANGER_DASH)
    MOTION_STATE_DANGER_DASH = 33,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_CROUCH_IDLE)
    MOTION_STATE_CROUCH_IDLE = 34,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_CROUCH_MOVE)
    MOTION_STATE_CROUCH_MOVE = 35,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_CROUCH_ROLL)
    MOTION_STATE_CROUCH_ROLL = 36,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_NOTIFY)
    MOTION_STATE_NOTIFY = 37,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_LAND_SPEED)
    MOTION_STATE_LAND_SPEED = 38,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_MOVE_FAIL_ACK)
    MOTION_STATE_MOVE_FAIL_ACK = 39,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_WATERFALL)
    MOTION_STATE_WATERFALL = 40,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DASH_BEFORE_SHAKE)
    MOTION_STATE_DASH_BEFORE_SHAKE = 41,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_SIT_IDLE)
    MOTION_STATE_SIT_IDLE = 42,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_FORCE_SET_POS)
    MOTION_STATE_FORCE_SET_POS = 43,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_QUEST_FORCE_DRAG)
    MOTION_STATE_QUEST_FORCE_DRAG = 44,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_FOLLOW_ROUTE)
    MOTION_STATE_FOLLOW_ROUTE = 45,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_SKIFF_BOARDING)
    MOTION_STATE_SKIFF_BOARDING = 46,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_SKIFF_NORMAL)
    MOTION_STATE_SKIFF_NORMAL = 47,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_SKIFF_DASH)
    MOTION_STATE_SKIFF_DASH = 48,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_SKIFF_POWERED_DASH)
    MOTION_STATE_SKIFF_POWERED_DASH = 49,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DESTROY_VEHICLE)
    MOTION_STATE_DESTROY_VEHICLE = 50,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_FLY_IDLE)
    MOTION_STATE_FLY_IDLE = 51,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_FLY_SLOW)
    MOTION_STATE_FLY_SLOW = 52,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_FLY_FAST)
    MOTION_STATE_FLY_FAST = 53,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_AIM_MOVE)
    MOTION_STATE_AIM_MOVE = 54,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_AIR_COMPENSATION)
    MOTION_STATE_AIR_COMPENSATION = 55,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_SORUSH_NORMAL)
    MOTION_STATE_SORUSH_NORMAL = 56,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_ROLLER_COASTER)
    MOTION_STATE_ROLLER_COASTER = 57,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DIVE_IDLE)
    MOTION_STATE_DIVE_IDLE = 58,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DIVE_MOVE)
    MOTION_STATE_DIVE_MOVE = 59,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DIVE_DASH)
    MOTION_STATE_DIVE_DASH = 60,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DIVE_DOLPHINE)
    MOTION_STATE_DIVE_DOLPHINE = 61,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DEBUG)
    MOTION_STATE_DEBUG = 62,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_OCEAN_CURRENT)
    MOTION_STATE_OCEAN_CURRENT = 63,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DIVE_SWIM_MOVE)
    MOTION_STATE_DIVE_SWIM_MOVE = 64,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DIVE_SWIM_IDLE)
    MOTION_STATE_DIVE_SWIM_IDLE = 65,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_DIVE_SWIM_DASH)
    MOTION_STATE_DIVE_SWIM_DASH = 66,
    // @@protoc_insertion_point(enum_value:MotionState.MOTION_STATE_NUM)
    MOTION_STATE_NUM = 67,
}

impl ::protobuf::Enum for MotionState {
    const NAME: &'static str = "MotionState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MotionState> {
        match value {
            0 => ::std::option::Option::Some(MotionState::MOTION_STATE_NONE),
            1 => ::std::option::Option::Some(MotionState::MOTION_STATE_RESET),
            2 => ::std::option::Option::Some(MotionState::MOTION_STATE_STANDBY),
            3 => ::std::option::Option::Some(MotionState::MOTION_STATE_STANDBY_MOVE),
            4 => ::std::option::Option::Some(MotionState::MOTION_STATE_WALK),
            5 => ::std::option::Option::Some(MotionState::MOTION_STATE_RUN),
            6 => ::std::option::Option::Some(MotionState::MOTION_STATE_DASH),
            7 => ::std::option::Option::Some(MotionState::MOTION_STATE_CLIMB),
            8 => ::std::option::Option::Some(MotionState::MOTION_STATE_CLIMB_JUMP),
            9 => ::std::option::Option::Some(MotionState::MOTION_STATE_STANDBY_TO_CLIMB),
            10 => ::std::option::Option::Some(MotionState::MOTION_STATE_FIGHT),
            11 => ::std::option::Option::Some(MotionState::MOTION_STATE_JUMP),
            12 => ::std::option::Option::Some(MotionState::MOTION_STATE_DROP),
            13 => ::std::option::Option::Some(MotionState::MOTION_STATE_FLY),
            14 => ::std::option::Option::Some(MotionState::MOTION_STATE_SWIM_MOVE),
            15 => ::std::option::Option::Some(MotionState::MOTION_STATE_SWIM_IDLE),
            16 => ::std::option::Option::Some(MotionState::MOTION_STATE_SWIM_DASH),
            17 => ::std::option::Option::Some(MotionState::MOTION_STATE_SWIM_JUMP),
            18 => ::std::option::Option::Some(MotionState::MOTION_STATE_SLIP),
            19 => ::std::option::Option::Some(MotionState::MOTION_STATE_GO_UPSTAIRS),
            20 => ::std::option::Option::Some(MotionState::MOTION_STATE_FALL_ON_GROUND),
            21 => ::std::option::Option::Some(MotionState::MOTION_STATE_JUMP_UP_WALL_FOR_STANDBY),
            22 => ::std::option::Option::Some(MotionState::MOTION_STATE_JUMP_OFF_WALL),
            23 => ::std::option::Option::Some(MotionState::MOTION_STATE_POWERED_FLY),
            24 => ::std::option::Option::Some(MotionState::MOTION_STATE_LADDER_IDLE),
            25 => ::std::option::Option::Some(MotionState::MOTION_STATE_LADDER_MOVE),
            26 => ::std::option::Option::Some(MotionState::MOTION_STATE_LADDER_SLIP),
            27 => ::std::option::Option::Some(MotionState::MOTION_STATE_STANDBY_TO_LADDER),
            28 => ::std::option::Option::Some(MotionState::MOTION_STATE_LADDER_TO_STANDBY),
            29 => ::std::option::Option::Some(MotionState::MOTION_STATE_DANGER_STANDBY),
            30 => ::std::option::Option::Some(MotionState::MOTION_STATE_DANGER_STANDBY_MOVE),
            31 => ::std::option::Option::Some(MotionState::MOTION_STATE_DANGER_WALK),
            32 => ::std::option::Option::Some(MotionState::MOTION_STATE_DANGER_RUN),
            33 => ::std::option::Option::Some(MotionState::MOTION_STATE_DANGER_DASH),
            34 => ::std::option::Option::Some(MotionState::MOTION_STATE_CROUCH_IDLE),
            35 => ::std::option::Option::Some(MotionState::MOTION_STATE_CROUCH_MOVE),
            36 => ::std::option::Option::Some(MotionState::MOTION_STATE_CROUCH_ROLL),
            37 => ::std::option::Option::Some(MotionState::MOTION_STATE_NOTIFY),
            38 => ::std::option::Option::Some(MotionState::MOTION_STATE_LAND_SPEED),
            39 => ::std::option::Option::Some(MotionState::MOTION_STATE_MOVE_FAIL_ACK),
            40 => ::std::option::Option::Some(MotionState::MOTION_STATE_WATERFALL),
            41 => ::std::option::Option::Some(MotionState::MOTION_STATE_DASH_BEFORE_SHAKE),
            42 => ::std::option::Option::Some(MotionState::MOTION_STATE_SIT_IDLE),
            43 => ::std::option::Option::Some(MotionState::MOTION_STATE_FORCE_SET_POS),
            44 => ::std::option::Option::Some(MotionState::MOTION_STATE_QUEST_FORCE_DRAG),
            45 => ::std::option::Option::Some(MotionState::MOTION_STATE_FOLLOW_ROUTE),
            46 => ::std::option::Option::Some(MotionState::MOTION_STATE_SKIFF_BOARDING),
            47 => ::std::option::Option::Some(MotionState::MOTION_STATE_SKIFF_NORMAL),
            48 => ::std::option::Option::Some(MotionState::MOTION_STATE_SKIFF_DASH),
            49 => ::std::option::Option::Some(MotionState::MOTION_STATE_SKIFF_POWERED_DASH),
            50 => ::std::option::Option::Some(MotionState::MOTION_STATE_DESTROY_VEHICLE),
            51 => ::std::option::Option::Some(MotionState::MOTION_STATE_FLY_IDLE),
            52 => ::std::option::Option::Some(MotionState::MOTION_STATE_FLY_SLOW),
            53 => ::std::option::Option::Some(MotionState::MOTION_STATE_FLY_FAST),
            54 => ::std::option::Option::Some(MotionState::MOTION_STATE_AIM_MOVE),
            55 => ::std::option::Option::Some(MotionState::MOTION_STATE_AIR_COMPENSATION),
            56 => ::std::option::Option::Some(MotionState::MOTION_STATE_SORUSH_NORMAL),
            57 => ::std::option::Option::Some(MotionState::MOTION_STATE_ROLLER_COASTER),
            58 => ::std::option::Option::Some(MotionState::MOTION_STATE_DIVE_IDLE),
            59 => ::std::option::Option::Some(MotionState::MOTION_STATE_DIVE_MOVE),
            60 => ::std::option::Option::Some(MotionState::MOTION_STATE_DIVE_DASH),
            61 => ::std::option::Option::Some(MotionState::MOTION_STATE_DIVE_DOLPHINE),
            62 => ::std::option::Option::Some(MotionState::MOTION_STATE_DEBUG),
            63 => ::std::option::Option::Some(MotionState::MOTION_STATE_OCEAN_CURRENT),
            64 => ::std::option::Option::Some(MotionState::MOTION_STATE_DIVE_SWIM_MOVE),
            65 => ::std::option::Option::Some(MotionState::MOTION_STATE_DIVE_SWIM_IDLE),
            66 => ::std::option::Option::Some(MotionState::MOTION_STATE_DIVE_SWIM_DASH),
            67 => ::std::option::Option::Some(MotionState::MOTION_STATE_NUM),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<MotionState> {
        match str {
            "MOTION_STATE_NONE" => ::std::option::Option::Some(MotionState::MOTION_STATE_NONE),
            "MOTION_STATE_RESET" => ::std::option::Option::Some(MotionState::MOTION_STATE_RESET),
            "MOTION_STATE_STANDBY" => ::std::option::Option::Some(MotionState::MOTION_STATE_STANDBY),
            "MOTION_STATE_STANDBY_MOVE" => ::std::option::Option::Some(MotionState::MOTION_STATE_STANDBY_MOVE),
            "MOTION_STATE_WALK" => ::std::option::Option::Some(MotionState::MOTION_STATE_WALK),
            "MOTION_STATE_RUN" => ::std::option::Option::Some(MotionState::MOTION_STATE_RUN),
            "MOTION_STATE_DASH" => ::std::option::Option::Some(MotionState::MOTION_STATE_DASH),
            "MOTION_STATE_CLIMB" => ::std::option::Option::Some(MotionState::MOTION_STATE_CLIMB),
            "MOTION_STATE_CLIMB_JUMP" => ::std::option::Option::Some(MotionState::MOTION_STATE_CLIMB_JUMP),
            "MOTION_STATE_STANDBY_TO_CLIMB" => ::std::option::Option::Some(MotionState::MOTION_STATE_STANDBY_TO_CLIMB),
            "MOTION_STATE_FIGHT" => ::std::option::Option::Some(MotionState::MOTION_STATE_FIGHT),
            "MOTION_STATE_JUMP" => ::std::option::Option::Some(MotionState::MOTION_STATE_JUMP),
            "MOTION_STATE_DROP" => ::std::option::Option::Some(MotionState::MOTION_STATE_DROP),
            "MOTION_STATE_FLY" => ::std::option::Option::Some(MotionState::MOTION_STATE_FLY),
            "MOTION_STATE_SWIM_MOVE" => ::std::option::Option::Some(MotionState::MOTION_STATE_SWIM_MOVE),
            "MOTION_STATE_SWIM_IDLE" => ::std::option::Option::Some(MotionState::MOTION_STATE_SWIM_IDLE),
            "MOTION_STATE_SWIM_DASH" => ::std::option::Option::Some(MotionState::MOTION_STATE_SWIM_DASH),
            "MOTION_STATE_SWIM_JUMP" => ::std::option::Option::Some(MotionState::MOTION_STATE_SWIM_JUMP),
            "MOTION_STATE_SLIP" => ::std::option::Option::Some(MotionState::MOTION_STATE_SLIP),
            "MOTION_STATE_GO_UPSTAIRS" => ::std::option::Option::Some(MotionState::MOTION_STATE_GO_UPSTAIRS),
            "MOTION_STATE_FALL_ON_GROUND" => ::std::option::Option::Some(MotionState::MOTION_STATE_FALL_ON_GROUND),
            "MOTION_STATE_JUMP_UP_WALL_FOR_STANDBY" => ::std::option::Option::Some(MotionState::MOTION_STATE_JUMP_UP_WALL_FOR_STANDBY),
            "MOTION_STATE_JUMP_OFF_WALL" => ::std::option::Option::Some(MotionState::MOTION_STATE_JUMP_OFF_WALL),
            "MOTION_STATE_POWERED_FLY" => ::std::option::Option::Some(MotionState::MOTION_STATE_POWERED_FLY),
            "MOTION_STATE_LADDER_IDLE" => ::std::option::Option::Some(MotionState::MOTION_STATE_LADDER_IDLE),
            "MOTION_STATE_LADDER_MOVE" => ::std::option::Option::Some(MotionState::MOTION_STATE_LADDER_MOVE),
            "MOTION_STATE_LADDER_SLIP" => ::std::option::Option::Some(MotionState::MOTION_STATE_LADDER_SLIP),
            "MOTION_STATE_STANDBY_TO_LADDER" => ::std::option::Option::Some(MotionState::MOTION_STATE_STANDBY_TO_LADDER),
            "MOTION_STATE_LADDER_TO_STANDBY" => ::std::option::Option::Some(MotionState::MOTION_STATE_LADDER_TO_STANDBY),
            "MOTION_STATE_DANGER_STANDBY" => ::std::option::Option::Some(MotionState::MOTION_STATE_DANGER_STANDBY),
            "MOTION_STATE_DANGER_STANDBY_MOVE" => ::std::option::Option::Some(MotionState::MOTION_STATE_DANGER_STANDBY_MOVE),
            "MOTION_STATE_DANGER_WALK" => ::std::option::Option::Some(MotionState::MOTION_STATE_DANGER_WALK),
            "MOTION_STATE_DANGER_RUN" => ::std::option::Option::Some(MotionState::MOTION_STATE_DANGER_RUN),
            "MOTION_STATE_DANGER_DASH" => ::std::option::Option::Some(MotionState::MOTION_STATE_DANGER_DASH),
            "MOTION_STATE_CROUCH_IDLE" => ::std::option::Option::Some(MotionState::MOTION_STATE_CROUCH_IDLE),
            "MOTION_STATE_CROUCH_MOVE" => ::std::option::Option::Some(MotionState::MOTION_STATE_CROUCH_MOVE),
            "MOTION_STATE_CROUCH_ROLL" => ::std::option::Option::Some(MotionState::MOTION_STATE_CROUCH_ROLL),
            "MOTION_STATE_NOTIFY" => ::std::option::Option::Some(MotionState::MOTION_STATE_NOTIFY),
            "MOTION_STATE_LAND_SPEED" => ::std::option::Option::Some(MotionState::MOTION_STATE_LAND_SPEED),
            "MOTION_STATE_MOVE_FAIL_ACK" => ::std::option::Option::Some(MotionState::MOTION_STATE_MOVE_FAIL_ACK),
            "MOTION_STATE_WATERFALL" => ::std::option::Option::Some(MotionState::MOTION_STATE_WATERFALL),
            "MOTION_STATE_DASH_BEFORE_SHAKE" => ::std::option::Option::Some(MotionState::MOTION_STATE_DASH_BEFORE_SHAKE),
            "MOTION_STATE_SIT_IDLE" => ::std::option::Option::Some(MotionState::MOTION_STATE_SIT_IDLE),
            "MOTION_STATE_FORCE_SET_POS" => ::std::option::Option::Some(MotionState::MOTION_STATE_FORCE_SET_POS),
            "MOTION_STATE_QUEST_FORCE_DRAG" => ::std::option::Option::Some(MotionState::MOTION_STATE_QUEST_FORCE_DRAG),
            "MOTION_STATE_FOLLOW_ROUTE" => ::std::option::Option::Some(MotionState::MOTION_STATE_FOLLOW_ROUTE),
            "MOTION_STATE_SKIFF_BOARDING" => ::std::option::Option::Some(MotionState::MOTION_STATE_SKIFF_BOARDING),
            "MOTION_STATE_SKIFF_NORMAL" => ::std::option::Option::Some(MotionState::MOTION_STATE_SKIFF_NORMAL),
            "MOTION_STATE_SKIFF_DASH" => ::std::option::Option::Some(MotionState::MOTION_STATE_SKIFF_DASH),
            "MOTION_STATE_SKIFF_POWERED_DASH" => ::std::option::Option::Some(MotionState::MOTION_STATE_SKIFF_POWERED_DASH),
            "MOTION_STATE_DESTROY_VEHICLE" => ::std::option::Option::Some(MotionState::MOTION_STATE_DESTROY_VEHICLE),
            "MOTION_STATE_FLY_IDLE" => ::std::option::Option::Some(MotionState::MOTION_STATE_FLY_IDLE),
            "MOTION_STATE_FLY_SLOW" => ::std::option::Option::Some(MotionState::MOTION_STATE_FLY_SLOW),
            "MOTION_STATE_FLY_FAST" => ::std::option::Option::Some(MotionState::MOTION_STATE_FLY_FAST),
            "MOTION_STATE_AIM_MOVE" => ::std::option::Option::Some(MotionState::MOTION_STATE_AIM_MOVE),
            "MOTION_STATE_AIR_COMPENSATION" => ::std::option::Option::Some(MotionState::MOTION_STATE_AIR_COMPENSATION),
            "MOTION_STATE_SORUSH_NORMAL" => ::std::option::Option::Some(MotionState::MOTION_STATE_SORUSH_NORMAL),
            "MOTION_STATE_ROLLER_COASTER" => ::std::option::Option::Some(MotionState::MOTION_STATE_ROLLER_COASTER),
            "MOTION_STATE_DIVE_IDLE" => ::std::option::Option::Some(MotionState::MOTION_STATE_DIVE_IDLE),
            "MOTION_STATE_DIVE_MOVE" => ::std::option::Option::Some(MotionState::MOTION_STATE_DIVE_MOVE),
            "MOTION_STATE_DIVE_DASH" => ::std::option::Option::Some(MotionState::MOTION_STATE_DIVE_DASH),
            "MOTION_STATE_DIVE_DOLPHINE" => ::std::option::Option::Some(MotionState::MOTION_STATE_DIVE_DOLPHINE),
            "MOTION_STATE_DEBUG" => ::std::option::Option::Some(MotionState::MOTION_STATE_DEBUG),
            "MOTION_STATE_OCEAN_CURRENT" => ::std::option::Option::Some(MotionState::MOTION_STATE_OCEAN_CURRENT),
            "MOTION_STATE_DIVE_SWIM_MOVE" => ::std::option::Option::Some(MotionState::MOTION_STATE_DIVE_SWIM_MOVE),
            "MOTION_STATE_DIVE_SWIM_IDLE" => ::std::option::Option::Some(MotionState::MOTION_STATE_DIVE_SWIM_IDLE),
            "MOTION_STATE_DIVE_SWIM_DASH" => ::std::option::Option::Some(MotionState::MOTION_STATE_DIVE_SWIM_DASH),
            "MOTION_STATE_NUM" => ::std::option::Option::Some(MotionState::MOTION_STATE_NUM),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MotionState] = &[
        MotionState::MOTION_STATE_NONE,
        MotionState::MOTION_STATE_RESET,
        MotionState::MOTION_STATE_STANDBY,
        MotionState::MOTION_STATE_STANDBY_MOVE,
        MotionState::MOTION_STATE_WALK,
        MotionState::MOTION_STATE_RUN,
        MotionState::MOTION_STATE_DASH,
        MotionState::MOTION_STATE_CLIMB,
        MotionState::MOTION_STATE_CLIMB_JUMP,
        MotionState::MOTION_STATE_STANDBY_TO_CLIMB,
        MotionState::MOTION_STATE_FIGHT,
        MotionState::MOTION_STATE_JUMP,
        MotionState::MOTION_STATE_DROP,
        MotionState::MOTION_STATE_FLY,
        MotionState::MOTION_STATE_SWIM_MOVE,
        MotionState::MOTION_STATE_SWIM_IDLE,
        MotionState::MOTION_STATE_SWIM_DASH,
        MotionState::MOTION_STATE_SWIM_JUMP,
        MotionState::MOTION_STATE_SLIP,
        MotionState::MOTION_STATE_GO_UPSTAIRS,
        MotionState::MOTION_STATE_FALL_ON_GROUND,
        MotionState::MOTION_STATE_JUMP_UP_WALL_FOR_STANDBY,
        MotionState::MOTION_STATE_JUMP_OFF_WALL,
        MotionState::MOTION_STATE_POWERED_FLY,
        MotionState::MOTION_STATE_LADDER_IDLE,
        MotionState::MOTION_STATE_LADDER_MOVE,
        MotionState::MOTION_STATE_LADDER_SLIP,
        MotionState::MOTION_STATE_STANDBY_TO_LADDER,
        MotionState::MOTION_STATE_LADDER_TO_STANDBY,
        MotionState::MOTION_STATE_DANGER_STANDBY,
        MotionState::MOTION_STATE_DANGER_STANDBY_MOVE,
        MotionState::MOTION_STATE_DANGER_WALK,
        MotionState::MOTION_STATE_DANGER_RUN,
        MotionState::MOTION_STATE_DANGER_DASH,
        MotionState::MOTION_STATE_CROUCH_IDLE,
        MotionState::MOTION_STATE_CROUCH_MOVE,
        MotionState::MOTION_STATE_CROUCH_ROLL,
        MotionState::MOTION_STATE_NOTIFY,
        MotionState::MOTION_STATE_LAND_SPEED,
        MotionState::MOTION_STATE_MOVE_FAIL_ACK,
        MotionState::MOTION_STATE_WATERFALL,
        MotionState::MOTION_STATE_DASH_BEFORE_SHAKE,
        MotionState::MOTION_STATE_SIT_IDLE,
        MotionState::MOTION_STATE_FORCE_SET_POS,
        MotionState::MOTION_STATE_QUEST_FORCE_DRAG,
        MotionState::MOTION_STATE_FOLLOW_ROUTE,
        MotionState::MOTION_STATE_SKIFF_BOARDING,
        MotionState::MOTION_STATE_SKIFF_NORMAL,
        MotionState::MOTION_STATE_SKIFF_DASH,
        MotionState::MOTION_STATE_SKIFF_POWERED_DASH,
        MotionState::MOTION_STATE_DESTROY_VEHICLE,
        MotionState::MOTION_STATE_FLY_IDLE,
        MotionState::MOTION_STATE_FLY_SLOW,
        MotionState::MOTION_STATE_FLY_FAST,
        MotionState::MOTION_STATE_AIM_MOVE,
        MotionState::MOTION_STATE_AIR_COMPENSATION,
        MotionState::MOTION_STATE_SORUSH_NORMAL,
        MotionState::MOTION_STATE_ROLLER_COASTER,
        MotionState::MOTION_STATE_DIVE_IDLE,
        MotionState::MOTION_STATE_DIVE_MOVE,
        MotionState::MOTION_STATE_DIVE_DASH,
        MotionState::MOTION_STATE_DIVE_DOLPHINE,
        MotionState::MOTION_STATE_DEBUG,
        MotionState::MOTION_STATE_OCEAN_CURRENT,
        MotionState::MOTION_STATE_DIVE_SWIM_MOVE,
        MotionState::MOTION_STATE_DIVE_SWIM_IDLE,
        MotionState::MOTION_STATE_DIVE_SWIM_DASH,
        MotionState::MOTION_STATE_NUM,
    ];
}

impl ::protobuf::EnumFull for MotionState {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MotionState").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MotionState {
    fn default() -> Self {
        MotionState::MOTION_STATE_NONE
    }
}

impl MotionState {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MotionState>("MotionState")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11MotionState.proto*\xe4\x0f\n\x0bMotionState\x12\x15\n\x11MOTION_ST\
    ATE_NONE\x10\0\x12\x16\n\x12MOTION_STATE_RESET\x10\x01\x12\x18\n\x14MOTI\
    ON_STATE_STANDBY\x10\x02\x12\x1d\n\x19MOTION_STATE_STANDBY_MOVE\x10\x03\
    \x12\x15\n\x11MOTION_STATE_WALK\x10\x04\x12\x14\n\x10MOTION_STATE_RUN\
    \x10\x05\x12\x15\n\x11MOTION_STATE_DASH\x10\x06\x12\x16\n\x12MOTION_STAT\
    E_CLIMB\x10\x07\x12\x1b\n\x17MOTION_STATE_CLIMB_JUMP\x10\x08\x12!\n\x1dM\
    OTION_STATE_STANDBY_TO_CLIMB\x10\t\x12\x16\n\x12MOTION_STATE_FIGHT\x10\n\
    \x12\x15\n\x11MOTION_STATE_JUMP\x10\x0b\x12\x15\n\x11MOTION_STATE_DROP\
    \x10\x0c\x12\x14\n\x10MOTION_STATE_FLY\x10\r\x12\x1a\n\x16MOTION_STATE_S\
    WIM_MOVE\x10\x0e\x12\x1a\n\x16MOTION_STATE_SWIM_IDLE\x10\x0f\x12\x1a\n\
    \x16MOTION_STATE_SWIM_DASH\x10\x10\x12\x1a\n\x16MOTION_STATE_SWIM_JUMP\
    \x10\x11\x12\x15\n\x11MOTION_STATE_SLIP\x10\x12\x12\x1c\n\x18MOTION_STAT\
    E_GO_UPSTAIRS\x10\x13\x12\x1f\n\x1bMOTION_STATE_FALL_ON_GROUND\x10\x14\
    \x12)\n%MOTION_STATE_JUMP_UP_WALL_FOR_STANDBY\x10\x15\x12\x1e\n\x1aMOTIO\
    N_STATE_JUMP_OFF_WALL\x10\x16\x12\x1c\n\x18MOTION_STATE_POWERED_FLY\x10\
    \x17\x12\x1c\n\x18MOTION_STATE_LADDER_IDLE\x10\x18\x12\x1c\n\x18MOTION_S\
    TATE_LADDER_MOVE\x10\x19\x12\x1c\n\x18MOTION_STATE_LADDER_SLIP\x10\x1a\
    \x12\"\n\x1eMOTION_STATE_STANDBY_TO_LADDER\x10\x1b\x12\"\n\x1eMOTION_STA\
    TE_LADDER_TO_STANDBY\x10\x1c\x12\x1f\n\x1bMOTION_STATE_DANGER_STANDBY\
    \x10\x1d\x12$\n\x20MOTION_STATE_DANGER_STANDBY_MOVE\x10\x1e\x12\x1c\n\
    \x18MOTION_STATE_DANGER_WALK\x10\x1f\x12\x1b\n\x17MOTION_STATE_DANGER_RU\
    N\x10\x20\x12\x1c\n\x18MOTION_STATE_DANGER_DASH\x10!\x12\x1c\n\x18MOTION\
    _STATE_CROUCH_IDLE\x10\"\x12\x1c\n\x18MOTION_STATE_CROUCH_MOVE\x10#\x12\
    \x1c\n\x18MOTION_STATE_CROUCH_ROLL\x10$\x12\x17\n\x13MOTION_STATE_NOTIFY\
    \x10%\x12\x1b\n\x17MOTION_STATE_LAND_SPEED\x10&\x12\x1e\n\x1aMOTION_STAT\
    E_MOVE_FAIL_ACK\x10'\x12\x1a\n\x16MOTION_STATE_WATERFALL\x10(\x12\"\n\
    \x1eMOTION_STATE_DASH_BEFORE_SHAKE\x10)\x12\x19\n\x15MOTION_STATE_SIT_ID\
    LE\x10*\x12\x1e\n\x1aMOTION_STATE_FORCE_SET_POS\x10+\x12!\n\x1dMOTION_ST\
    ATE_QUEST_FORCE_DRAG\x10,\x12\x1d\n\x19MOTION_STATE_FOLLOW_ROUTE\x10-\
    \x12\x1f\n\x1bMOTION_STATE_SKIFF_BOARDING\x10.\x12\x1d\n\x19MOTION_STATE\
    _SKIFF_NORMAL\x10/\x12\x1b\n\x17MOTION_STATE_SKIFF_DASH\x100\x12#\n\x1fM\
    OTION_STATE_SKIFF_POWERED_DASH\x101\x12\x20\n\x1cMOTION_STATE_DESTROY_VE\
    HICLE\x102\x12\x19\n\x15MOTION_STATE_FLY_IDLE\x103\x12\x19\n\x15MOTION_S\
    TATE_FLY_SLOW\x104\x12\x19\n\x15MOTION_STATE_FLY_FAST\x105\x12\x19\n\x15\
    MOTION_STATE_AIM_MOVE\x106\x12!\n\x1dMOTION_STATE_AIR_COMPENSATION\x107\
    \x12\x1e\n\x1aMOTION_STATE_SORUSH_NORMAL\x108\x12\x1f\n\x1bMOTION_STATE_\
    ROLLER_COASTER\x109\x12\x1a\n\x16MOTION_STATE_DIVE_IDLE\x10:\x12\x1a\n\
    \x16MOTION_STATE_DIVE_MOVE\x10;\x12\x1a\n\x16MOTION_STATE_DIVE_DASH\x10<\
    \x12\x1e\n\x1aMOTION_STATE_DIVE_DOLPHINE\x10=\x12\x16\n\x12MOTION_STATE_\
    DEBUG\x10>\x12\x1e\n\x1aMOTION_STATE_OCEAN_CURRENT\x10?\x12\x1f\n\x1bMOT\
    ION_STATE_DIVE_SWIM_MOVE\x10@\x12\x1f\n\x1bMOTION_STATE_DIVE_SWIM_IDLE\
    \x10A\x12\x1f\n\x1bMOTION_STATE_DIVE_SWIM_DASH\x10B\x12\x14\n\x10MOTION_\
    STATE_NUM\x10CB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(MotionState::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
