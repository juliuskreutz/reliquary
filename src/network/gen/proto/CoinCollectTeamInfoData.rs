// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CoinCollectTeamInfoData.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CoinCollectTeamInfoData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CoinCollectTeamInfoData {
    // message fields
    // @@protoc_insertion_point(field:CoinCollectTeamInfoData.avatar_id_list)
    pub avatar_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CoinCollectTeamInfoData.player_uid)
    pub player_uid: u32,
    // @@protoc_insertion_point(field:CoinCollectTeamInfoData.is_host)
    pub is_host: bool,
    // @@protoc_insertion_point(field:CoinCollectTeamInfoData.choose_skill_no)
    pub choose_skill_no: u32,
    // @@protoc_insertion_point(field:CoinCollectTeamInfoData.PLDBCFMDGLP)
    pub PLDBCFMDGLP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CoinCollectTeamInfoData.DIDCPEELBFN)
    pub DIDCPEELBFN: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CoinCollectTeamInfoData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CoinCollectTeamInfoData {
    fn default() -> &'a CoinCollectTeamInfoData {
        <CoinCollectTeamInfoData as ::protobuf::Message>::default_instance()
    }
}

impl CoinCollectTeamInfoData {
    pub fn new() -> CoinCollectTeamInfoData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_id_list",
            |m: &CoinCollectTeamInfoData| { &m.avatar_id_list },
            |m: &mut CoinCollectTeamInfoData| { &mut m.avatar_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "player_uid",
            |m: &CoinCollectTeamInfoData| { &m.player_uid },
            |m: &mut CoinCollectTeamInfoData| { &mut m.player_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_host",
            |m: &CoinCollectTeamInfoData| { &m.is_host },
            |m: &mut CoinCollectTeamInfoData| { &mut m.is_host },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "choose_skill_no",
            |m: &CoinCollectTeamInfoData| { &m.choose_skill_no },
            |m: &mut CoinCollectTeamInfoData| { &mut m.choose_skill_no },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PLDBCFMDGLP",
            |m: &CoinCollectTeamInfoData| { &m.PLDBCFMDGLP },
            |m: &mut CoinCollectTeamInfoData| { &mut m.PLDBCFMDGLP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DIDCPEELBFN",
            |m: &CoinCollectTeamInfoData| { &m.DIDCPEELBFN },
            |m: &mut CoinCollectTeamInfoData| { &mut m.DIDCPEELBFN },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CoinCollectTeamInfoData>(
            "CoinCollectTeamInfoData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CoinCollectTeamInfoData {
    const NAME: &'static str = "CoinCollectTeamInfoData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.avatar_id_list)?;
                },
                32 => {
                    self.avatar_id_list.push(is.read_uint32()?);
                },
                104 => {
                    self.player_uid = is.read_uint32()?;
                },
                64 => {
                    self.is_host = is.read_bool()?;
                },
                120 => {
                    self.choose_skill_no = is.read_uint32()?;
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.PLDBCFMDGLP)?;
                },
                96 => {
                    self.PLDBCFMDGLP.push(is.read_uint32()?);
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.DIDCPEELBFN)?;
                },
                40 => {
                    self.DIDCPEELBFN.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.avatar_id_list {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        if self.player_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.player_uid);
        }
        if self.is_host != false {
            my_size += 1 + 1;
        }
        if self.choose_skill_no != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.choose_skill_no);
        }
        for value in &self.PLDBCFMDGLP {
            my_size += ::protobuf::rt::uint32_size(12, *value);
        };
        for value in &self.DIDCPEELBFN {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.avatar_id_list {
            os.write_uint32(4, *v)?;
        };
        if self.player_uid != 0 {
            os.write_uint32(13, self.player_uid)?;
        }
        if self.is_host != false {
            os.write_bool(8, self.is_host)?;
        }
        if self.choose_skill_no != 0 {
            os.write_uint32(15, self.choose_skill_no)?;
        }
        for v in &self.PLDBCFMDGLP {
            os.write_uint32(12, *v)?;
        };
        for v in &self.DIDCPEELBFN {
            os.write_uint32(5, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CoinCollectTeamInfoData {
        CoinCollectTeamInfoData::new()
    }

    fn clear(&mut self) {
        self.avatar_id_list.clear();
        self.player_uid = 0;
        self.is_host = false;
        self.choose_skill_no = 0;
        self.PLDBCFMDGLP.clear();
        self.DIDCPEELBFN.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CoinCollectTeamInfoData {
        static instance: CoinCollectTeamInfoData = CoinCollectTeamInfoData {
            avatar_id_list: ::std::vec::Vec::new(),
            player_uid: 0,
            is_host: false,
            choose_skill_no: 0,
            PLDBCFMDGLP: ::std::vec::Vec::new(),
            DIDCPEELBFN: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CoinCollectTeamInfoData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CoinCollectTeamInfoData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CoinCollectTeamInfoData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoinCollectTeamInfoData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dCoinCollectTeamInfoData.proto\"\xe3\x01\n\x17CoinCollectTeamInfoDa\
    ta\x12$\n\x0eavatar_id_list\x18\x04\x20\x03(\rR\x0cavatarIdList\x12\x1d\
    \n\nplayer_uid\x18\r\x20\x01(\rR\tplayerUid\x12\x17\n\x07is_host\x18\x08\
    \x20\x01(\x08R\x06isHost\x12&\n\x0fchoose_skill_no\x18\x0f\x20\x01(\rR\r\
    chooseSkillNo\x12\x20\n\x0bPLDBCFMDGLP\x18\x0c\x20\x03(\rR\x0bPLDBCFMDGL\
    P\x12\x20\n\x0bDIDCPEELBFN\x18\x05\x20\x03(\rR\x0bDIDCPEELBFNB\x1b\n\x19\
    emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CoinCollectTeamInfoData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
