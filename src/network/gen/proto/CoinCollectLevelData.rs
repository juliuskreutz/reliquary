// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CoinCollectLevelData.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CoinCollectLevelData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CoinCollectLevelData {
    // message fields
    // @@protoc_insertion_point(field:CoinCollectLevelData.CGCAEFMBDLE)
    pub CGCAEFMBDLE: u32,
    // @@protoc_insertion_point(field:CoinCollectLevelData.OIDEGDJMAAH)
    pub OIDEGDJMAAH: u32,
    // @@protoc_insertion_point(field:CoinCollectLevelData.NJJLELKNFPL)
    pub NJJLELKNFPL: bool,
    // @@protoc_insertion_point(field:CoinCollectLevelData.GICIIMOFPLC)
    pub GICIIMOFPLC: bool,
    // @@protoc_insertion_point(field:CoinCollectLevelData.is_level_open)
    pub is_level_open: bool,
    // @@protoc_insertion_point(field:CoinCollectLevelData.NFKJLPLDDBM)
    pub NFKJLPLDDBM: bool,
    // @@protoc_insertion_point(field:CoinCollectLevelData.NOBHHOIAPMM)
    pub NOBHHOIAPMM: u32,
    // @@protoc_insertion_point(field:CoinCollectLevelData.GENIGFJFKEE)
    pub GENIGFJFKEE: u32,
    // @@protoc_insertion_point(field:CoinCollectLevelData.level_id)
    pub level_id: u32,
    // @@protoc_insertion_point(field:CoinCollectLevelData.single_best_team_info)
    pub single_best_team_info: ::protobuf::MessageField<super::CoinCollectTeamInfoData::CoinCollectTeamInfoData>,
    // @@protoc_insertion_point(field:CoinCollectLevelData.double_best_team_info_list)
    pub double_best_team_info_list: ::std::vec::Vec<super::CoinCollectTeamInfoData::CoinCollectTeamInfoData>,
    // @@protoc_insertion_point(field:CoinCollectLevelData.PKPHLANBFAM)
    pub PKPHLANBFAM: u32,
    // special fields
    // @@protoc_insertion_point(special_field:CoinCollectLevelData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CoinCollectLevelData {
    fn default() -> &'a CoinCollectLevelData {
        <CoinCollectLevelData as ::protobuf::Message>::default_instance()
    }
}

impl CoinCollectLevelData {
    pub fn new() -> CoinCollectLevelData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CGCAEFMBDLE",
            |m: &CoinCollectLevelData| { &m.CGCAEFMBDLE },
            |m: &mut CoinCollectLevelData| { &mut m.CGCAEFMBDLE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OIDEGDJMAAH",
            |m: &CoinCollectLevelData| { &m.OIDEGDJMAAH },
            |m: &mut CoinCollectLevelData| { &mut m.OIDEGDJMAAH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NJJLELKNFPL",
            |m: &CoinCollectLevelData| { &m.NJJLELKNFPL },
            |m: &mut CoinCollectLevelData| { &mut m.NJJLELKNFPL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GICIIMOFPLC",
            |m: &CoinCollectLevelData| { &m.GICIIMOFPLC },
            |m: &mut CoinCollectLevelData| { &mut m.GICIIMOFPLC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_level_open",
            |m: &CoinCollectLevelData| { &m.is_level_open },
            |m: &mut CoinCollectLevelData| { &mut m.is_level_open },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NFKJLPLDDBM",
            |m: &CoinCollectLevelData| { &m.NFKJLPLDDBM },
            |m: &mut CoinCollectLevelData| { &mut m.NFKJLPLDDBM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NOBHHOIAPMM",
            |m: &CoinCollectLevelData| { &m.NOBHHOIAPMM },
            |m: &mut CoinCollectLevelData| { &mut m.NOBHHOIAPMM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GENIGFJFKEE",
            |m: &CoinCollectLevelData| { &m.GENIGFJFKEE },
            |m: &mut CoinCollectLevelData| { &mut m.GENIGFJFKEE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level_id",
            |m: &CoinCollectLevelData| { &m.level_id },
            |m: &mut CoinCollectLevelData| { &mut m.level_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CoinCollectTeamInfoData::CoinCollectTeamInfoData>(
            "single_best_team_info",
            |m: &CoinCollectLevelData| { &m.single_best_team_info },
            |m: &mut CoinCollectLevelData| { &mut m.single_best_team_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "double_best_team_info_list",
            |m: &CoinCollectLevelData| { &m.double_best_team_info_list },
            |m: &mut CoinCollectLevelData| { &mut m.double_best_team_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PKPHLANBFAM",
            |m: &CoinCollectLevelData| { &m.PKPHLANBFAM },
            |m: &mut CoinCollectLevelData| { &mut m.PKPHLANBFAM },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CoinCollectLevelData>(
            "CoinCollectLevelData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CoinCollectLevelData {
    const NAME: &'static str = "CoinCollectLevelData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.CGCAEFMBDLE = is.read_uint32()?;
                },
                88 => {
                    self.OIDEGDJMAAH = is.read_uint32()?;
                },
                80 => {
                    self.NJJLELKNFPL = is.read_bool()?;
                },
                72 => {
                    self.GICIIMOFPLC = is.read_bool()?;
                },
                40 => {
                    self.is_level_open = is.read_bool()?;
                },
                32 => {
                    self.NFKJLPLDDBM = is.read_bool()?;
                },
                96 => {
                    self.NOBHHOIAPMM = is.read_uint32()?;
                },
                24 => {
                    self.GENIGFJFKEE = is.read_uint32()?;
                },
                120 => {
                    self.level_id = is.read_uint32()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.single_best_team_info)?;
                },
                18 => {
                    self.double_best_team_info_list.push(is.read_message()?);
                },
                112 => {
                    self.PKPHLANBFAM = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.CGCAEFMBDLE != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.CGCAEFMBDLE);
        }
        if self.OIDEGDJMAAH != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.OIDEGDJMAAH);
        }
        if self.NJJLELKNFPL != false {
            my_size += 1 + 1;
        }
        if self.GICIIMOFPLC != false {
            my_size += 1 + 1;
        }
        if self.is_level_open != false {
            my_size += 1 + 1;
        }
        if self.NFKJLPLDDBM != false {
            my_size += 1 + 1;
        }
        if self.NOBHHOIAPMM != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.NOBHHOIAPMM);
        }
        if self.GENIGFJFKEE != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.GENIGFJFKEE);
        }
        if self.level_id != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.level_id);
        }
        if let Some(v) = self.single_best_team_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.double_best_team_info_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.PKPHLANBFAM != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.PKPHLANBFAM);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.CGCAEFMBDLE != 0 {
            os.write_uint32(13, self.CGCAEFMBDLE)?;
        }
        if self.OIDEGDJMAAH != 0 {
            os.write_uint32(11, self.OIDEGDJMAAH)?;
        }
        if self.NJJLELKNFPL != false {
            os.write_bool(10, self.NJJLELKNFPL)?;
        }
        if self.GICIIMOFPLC != false {
            os.write_bool(9, self.GICIIMOFPLC)?;
        }
        if self.is_level_open != false {
            os.write_bool(5, self.is_level_open)?;
        }
        if self.NFKJLPLDDBM != false {
            os.write_bool(4, self.NFKJLPLDDBM)?;
        }
        if self.NOBHHOIAPMM != 0 {
            os.write_uint32(12, self.NOBHHOIAPMM)?;
        }
        if self.GENIGFJFKEE != 0 {
            os.write_uint32(3, self.GENIGFJFKEE)?;
        }
        if self.level_id != 0 {
            os.write_uint32(15, self.level_id)?;
        }
        if let Some(v) = self.single_best_team_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        for v in &self.double_best_team_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.PKPHLANBFAM != 0 {
            os.write_uint32(14, self.PKPHLANBFAM)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CoinCollectLevelData {
        CoinCollectLevelData::new()
    }

    fn clear(&mut self) {
        self.CGCAEFMBDLE = 0;
        self.OIDEGDJMAAH = 0;
        self.NJJLELKNFPL = false;
        self.GICIIMOFPLC = false;
        self.is_level_open = false;
        self.NFKJLPLDDBM = false;
        self.NOBHHOIAPMM = 0;
        self.GENIGFJFKEE = 0;
        self.level_id = 0;
        self.single_best_team_info.clear();
        self.double_best_team_info_list.clear();
        self.PKPHLANBFAM = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CoinCollectLevelData {
        static instance: CoinCollectLevelData = CoinCollectLevelData {
            CGCAEFMBDLE: 0,
            OIDEGDJMAAH: 0,
            NJJLELKNFPL: false,
            GICIIMOFPLC: false,
            is_level_open: false,
            NFKJLPLDDBM: false,
            NOBHHOIAPMM: 0,
            GENIGFJFKEE: 0,
            level_id: 0,
            single_best_team_info: ::protobuf::MessageField::none(),
            double_best_team_info_list: ::std::vec::Vec::new(),
            PKPHLANBFAM: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CoinCollectLevelData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CoinCollectLevelData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CoinCollectLevelData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoinCollectLevelData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aCoinCollectLevelData.proto\x1a\x1dCoinCollectTeamInfoData.proto\"\
    \x88\x04\n\x14CoinCollectLevelData\x12\x20\n\x0bCGCAEFMBDLE\x18\r\x20\
    \x01(\rR\x0bCGCAEFMBDLE\x12\x20\n\x0bOIDEGDJMAAH\x18\x0b\x20\x01(\rR\x0b\
    OIDEGDJMAAH\x12\x20\n\x0bNJJLELKNFPL\x18\n\x20\x01(\x08R\x0bNJJLELKNFPL\
    \x12\x20\n\x0bGICIIMOFPLC\x18\t\x20\x01(\x08R\x0bGICIIMOFPLC\x12\"\n\ris\
    _level_open\x18\x05\x20\x01(\x08R\x0bisLevelOpen\x12\x20\n\x0bNFKJLPLDDB\
    M\x18\x04\x20\x01(\x08R\x0bNFKJLPLDDBM\x12\x20\n\x0bNOBHHOIAPMM\x18\x0c\
    \x20\x01(\rR\x0bNOBHHOIAPMM\x12\x20\n\x0bGENIGFJFKEE\x18\x03\x20\x01(\rR\
    \x0bGENIGFJFKEE\x12\x19\n\x08level_id\x18\x0f\x20\x01(\rR\x07levelId\x12\
    K\n\x15single_best_team_info\x18\x08\x20\x01(\x0b2\x18.CoinCollectTeamIn\
    foDataR\x12singleBestTeamInfo\x12T\n\x1adouble_best_team_info_list\x18\
    \x02\x20\x03(\x0b2\x18.CoinCollectTeamInfoDataR\x16doubleBestTeamInfoLis\
    t\x12\x20\n\x0bPKPHLANBFAM\x18\x0e\x20\x01(\rR\x0bPKPHLANBFAMB\x1b\n\x19\
    emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::CoinCollectTeamInfoData::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CoinCollectLevelData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
