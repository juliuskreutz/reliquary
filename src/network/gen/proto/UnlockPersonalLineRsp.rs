// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `UnlockPersonalLineRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:UnlockPersonalLineRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UnlockPersonalLineRsp {
    // message fields
    // @@protoc_insertion_point(field:UnlockPersonalLineRsp.retcode)
    pub retcode: i32,
    // @@protoc_insertion_point(field:UnlockPersonalLineRsp.personal_line_id)
    pub personal_line_id: u32,
    // message oneof groups
    pub param: ::std::option::Option<unlock_personal_line_rsp::Param>,
    // special fields
    // @@protoc_insertion_point(special_field:UnlockPersonalLineRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnlockPersonalLineRsp {
    fn default() -> &'a UnlockPersonalLineRsp {
        <UnlockPersonalLineRsp as ::protobuf::Message>::default_instance()
    }
}

impl UnlockPersonalLineRsp {
    pub fn new() -> UnlockPersonalLineRsp {
        ::std::default::Default::default()
    }

    // uint32 level = 12;

    pub fn level(&self) -> u32 {
        match self.param {
            ::std::option::Option::Some(unlock_personal_line_rsp::Param::Level(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_level(&mut self) {
        self.param = ::std::option::Option::None;
    }

    pub fn has_level(&self) -> bool {
        match self.param {
            ::std::option::Option::Some(unlock_personal_line_rsp::Param::Level(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_level(&mut self, v: u32) {
        self.param = ::std::option::Option::Some(unlock_personal_line_rsp::Param::Level(v))
    }

    // uint32 chapter_id = 7;

    pub fn chapter_id(&self) -> u32 {
        match self.param {
            ::std::option::Option::Some(unlock_personal_line_rsp::Param::ChapterId(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_chapter_id(&mut self) {
        self.param = ::std::option::Option::None;
    }

    pub fn has_chapter_id(&self) -> bool {
        match self.param {
            ::std::option::Option::Some(unlock_personal_line_rsp::Param::ChapterId(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_chapter_id(&mut self, v: u32) {
        self.param = ::std::option::Option::Some(unlock_personal_line_rsp::Param::ChapterId(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &UnlockPersonalLineRsp| { &m.retcode },
            |m: &mut UnlockPersonalLineRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "personal_line_id",
            |m: &UnlockPersonalLineRsp| { &m.personal_line_id },
            |m: &mut UnlockPersonalLineRsp| { &mut m.personal_line_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "level",
            UnlockPersonalLineRsp::has_level,
            UnlockPersonalLineRsp::level,
            UnlockPersonalLineRsp::set_level,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "chapter_id",
            UnlockPersonalLineRsp::has_chapter_id,
            UnlockPersonalLineRsp::chapter_id,
            UnlockPersonalLineRsp::set_chapter_id,
        ));
        oneofs.push(unlock_personal_line_rsp::Param::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnlockPersonalLineRsp>(
            "UnlockPersonalLineRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnlockPersonalLineRsp {
    const NAME: &'static str = "UnlockPersonalLineRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                72 => {
                    self.retcode = is.read_int32()?;
                },
                88 => {
                    self.personal_line_id = is.read_uint32()?;
                },
                96 => {
                    self.param = ::std::option::Option::Some(unlock_personal_line_rsp::Param::Level(is.read_uint32()?));
                },
                56 => {
                    self.param = ::std::option::Option::Some(unlock_personal_line_rsp::Param::ChapterId(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::int32_size(9, self.retcode);
        }
        if self.personal_line_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.personal_line_id);
        }
        if let ::std::option::Option::Some(ref v) = self.param {
            match v {
                &unlock_personal_line_rsp::Param::Level(v) => {
                    my_size += ::protobuf::rt::uint32_size(12, v);
                },
                &unlock_personal_line_rsp::Param::ChapterId(v) => {
                    my_size += ::protobuf::rt::uint32_size(7, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_int32(9, self.retcode)?;
        }
        if self.personal_line_id != 0 {
            os.write_uint32(11, self.personal_line_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.param {
            match v {
                &unlock_personal_line_rsp::Param::Level(v) => {
                    os.write_uint32(12, v)?;
                },
                &unlock_personal_line_rsp::Param::ChapterId(v) => {
                    os.write_uint32(7, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnlockPersonalLineRsp {
        UnlockPersonalLineRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.personal_line_id = 0;
        self.param = ::std::option::Option::None;
        self.param = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnlockPersonalLineRsp {
        static instance: UnlockPersonalLineRsp = UnlockPersonalLineRsp {
            retcode: 0,
            personal_line_id: 0,
            param: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnlockPersonalLineRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnlockPersonalLineRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnlockPersonalLineRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnlockPersonalLineRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `UnlockPersonalLineRsp`
pub mod unlock_personal_line_rsp {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:UnlockPersonalLineRsp.param)
    pub enum Param {
        // @@protoc_insertion_point(oneof_field:UnlockPersonalLineRsp.level)
        Level(u32),
        // @@protoc_insertion_point(oneof_field:UnlockPersonalLineRsp.chapter_id)
        ChapterId(u32),
    }

    impl ::protobuf::Oneof for Param {
    }

    impl ::protobuf::OneofFull for Param {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::UnlockPersonalLineRsp as ::protobuf::MessageFull>::descriptor().oneof_by_name("param").unwrap()).clone()
        }
    }

    impl Param {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Param>("param")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bUnlockPersonalLineRsp.proto\"\x9d\x01\n\x15UnlockPersonalLineRsp\
    \x12\x18\n\x07retcode\x18\t\x20\x01(\x05R\x07retcode\x12(\n\x10personal_\
    line_id\x18\x0b\x20\x01(\rR\x0epersonalLineId\x12\x16\n\x05level\x18\x0c\
    \x20\x01(\rH\0R\x05level\x12\x1f\n\nchapter_id\x18\x07\x20\x01(\rH\0R\tc\
    hapterIdB\x07\n\x05paramB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(UnlockPersonalLineRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
