// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `SceneMonsterInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:SceneMonsterInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SceneMonsterInfo {
    // message fields
    // @@protoc_insertion_point(field:SceneMonsterInfo.monster_id)
    pub monster_id: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.group_id)
    pub group_id: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.config_id)
    pub config_id: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.weapon_list)
    pub weapon_list: ::std::vec::Vec<super::SceneWeaponInfo::SceneWeaponInfo>,
    // @@protoc_insertion_point(field:SceneMonsterInfo.authority_peer_id)
    pub authority_peer_id: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.affix_list)
    pub affix_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SceneMonsterInfo.is_elite)
    pub is_elite: bool,
    // @@protoc_insertion_point(field:SceneMonsterInfo.owner_entity_id)
    pub owner_entity_id: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.summoned_tag)
    pub summoned_tag: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.summon_tag_map)
    pub summon_tag_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:SceneMonsterInfo.pose_id)
    pub pose_id: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.born_type)
    pub born_type: ::protobuf::EnumOrUnknown<super::MonsterBornType::MonsterBornType>,
    // @@protoc_insertion_point(field:SceneMonsterInfo.block_id)
    pub block_id: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.mark_flag)
    pub mark_flag: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.title_id)
    pub title_id: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.special_name_id)
    pub special_name_id: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.attack_target_id)
    pub attack_target_id: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.monster_route)
    pub monster_route: ::protobuf::MessageField<super::MonsterRoute::MonsterRoute>,
    // @@protoc_insertion_point(field:SceneMonsterInfo.ai_config_id)
    pub ai_config_id: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.level_route_id)
    pub level_route_id: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.init_pose_id)
    pub init_pose_id: u32,
    // @@protoc_insertion_point(field:SceneMonsterInfo.is_light)
    pub is_light: bool,
    // @@protoc_insertion_point(field:SceneMonsterInfo.kill_num)
    pub kill_num: u32,
    // message oneof groups
    pub content: ::std::option::Option<scene_monster_info::Content>,
    // special fields
    // @@protoc_insertion_point(special_field:SceneMonsterInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SceneMonsterInfo {
    fn default() -> &'a SceneMonsterInfo {
        <SceneMonsterInfo as ::protobuf::Message>::default_instance()
    }
}

impl SceneMonsterInfo {
    pub fn new() -> SceneMonsterInfo {
        ::std::default::Default::default()
    }

    // .SceneFishInfo fish_info = 50;

    pub fn fish_info(&self) -> &super::SceneFishInfo::SceneFishInfo {
        match self.content {
            ::std::option::Option::Some(scene_monster_info::Content::FishInfo(ref v)) => v,
            _ => <super::SceneFishInfo::SceneFishInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_fish_info(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_fish_info(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(scene_monster_info::Content::FishInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fish_info(&mut self, v: super::SceneFishInfo::SceneFishInfo) {
        self.content = ::std::option::Option::Some(scene_monster_info::Content::FishInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fish_info(&mut self) -> &mut super::SceneFishInfo::SceneFishInfo {
        if let ::std::option::Option::Some(scene_monster_info::Content::FishInfo(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(scene_monster_info::Content::FishInfo(super::SceneFishInfo::SceneFishInfo::new()));
        }
        match self.content {
            ::std::option::Option::Some(scene_monster_info::Content::FishInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fish_info(&mut self) -> super::SceneFishInfo::SceneFishInfo {
        if self.has_fish_info() {
            match self.content.take() {
                ::std::option::Option::Some(scene_monster_info::Content::FishInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SceneFishInfo::SceneFishInfo::new()
        }
    }

    // .FishtankFishInfo fishtank_fish_info = 51;

    pub fn fishtank_fish_info(&self) -> &super::FishtankFishInfo::FishtankFishInfo {
        match self.content {
            ::std::option::Option::Some(scene_monster_info::Content::FishtankFishInfo(ref v)) => v,
            _ => <super::FishtankFishInfo::FishtankFishInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_fishtank_fish_info(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_fishtank_fish_info(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(scene_monster_info::Content::FishtankFishInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fishtank_fish_info(&mut self, v: super::FishtankFishInfo::FishtankFishInfo) {
        self.content = ::std::option::Option::Some(scene_monster_info::Content::FishtankFishInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fishtank_fish_info(&mut self) -> &mut super::FishtankFishInfo::FishtankFishInfo {
        if let ::std::option::Option::Some(scene_monster_info::Content::FishtankFishInfo(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(scene_monster_info::Content::FishtankFishInfo(super::FishtankFishInfo::FishtankFishInfo::new()));
        }
        match self.content {
            ::std::option::Option::Some(scene_monster_info::Content::FishtankFishInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fishtank_fish_info(&mut self) -> super::FishtankFishInfo::FishtankFishInfo {
        if self.has_fishtank_fish_info() {
            match self.content.take() {
                ::std::option::Option::Some(scene_monster_info::Content::FishtankFishInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FishtankFishInfo::FishtankFishInfo::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(25);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "monster_id",
            |m: &SceneMonsterInfo| { &m.monster_id },
            |m: &mut SceneMonsterInfo| { &mut m.monster_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &SceneMonsterInfo| { &m.group_id },
            |m: &mut SceneMonsterInfo| { &mut m.group_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "config_id",
            |m: &SceneMonsterInfo| { &m.config_id },
            |m: &mut SceneMonsterInfo| { &mut m.config_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "weapon_list",
            |m: &SceneMonsterInfo| { &m.weapon_list },
            |m: &mut SceneMonsterInfo| { &mut m.weapon_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "authority_peer_id",
            |m: &SceneMonsterInfo| { &m.authority_peer_id },
            |m: &mut SceneMonsterInfo| { &mut m.authority_peer_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "affix_list",
            |m: &SceneMonsterInfo| { &m.affix_list },
            |m: &mut SceneMonsterInfo| { &mut m.affix_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_elite",
            |m: &SceneMonsterInfo| { &m.is_elite },
            |m: &mut SceneMonsterInfo| { &mut m.is_elite },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_entity_id",
            |m: &SceneMonsterInfo| { &m.owner_entity_id },
            |m: &mut SceneMonsterInfo| { &mut m.owner_entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "summoned_tag",
            |m: &SceneMonsterInfo| { &m.summoned_tag },
            |m: &mut SceneMonsterInfo| { &mut m.summoned_tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "summon_tag_map",
            |m: &SceneMonsterInfo| { &m.summon_tag_map },
            |m: &mut SceneMonsterInfo| { &mut m.summon_tag_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pose_id",
            |m: &SceneMonsterInfo| { &m.pose_id },
            |m: &mut SceneMonsterInfo| { &mut m.pose_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "born_type",
            |m: &SceneMonsterInfo| { &m.born_type },
            |m: &mut SceneMonsterInfo| { &mut m.born_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "block_id",
            |m: &SceneMonsterInfo| { &m.block_id },
            |m: &mut SceneMonsterInfo| { &mut m.block_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mark_flag",
            |m: &SceneMonsterInfo| { &m.mark_flag },
            |m: &mut SceneMonsterInfo| { &mut m.mark_flag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title_id",
            |m: &SceneMonsterInfo| { &m.title_id },
            |m: &mut SceneMonsterInfo| { &mut m.title_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "special_name_id",
            |m: &SceneMonsterInfo| { &m.special_name_id },
            |m: &mut SceneMonsterInfo| { &mut m.special_name_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "attack_target_id",
            |m: &SceneMonsterInfo| { &m.attack_target_id },
            |m: &mut SceneMonsterInfo| { &mut m.attack_target_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MonsterRoute::MonsterRoute>(
            "monster_route",
            |m: &SceneMonsterInfo| { &m.monster_route },
            |m: &mut SceneMonsterInfo| { &mut m.monster_route },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ai_config_id",
            |m: &SceneMonsterInfo| { &m.ai_config_id },
            |m: &mut SceneMonsterInfo| { &mut m.ai_config_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level_route_id",
            |m: &SceneMonsterInfo| { &m.level_route_id },
            |m: &mut SceneMonsterInfo| { &mut m.level_route_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "init_pose_id",
            |m: &SceneMonsterInfo| { &m.init_pose_id },
            |m: &mut SceneMonsterInfo| { &mut m.init_pose_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_light",
            |m: &SceneMonsterInfo| { &m.is_light },
            |m: &mut SceneMonsterInfo| { &mut m.is_light },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "kill_num",
            |m: &SceneMonsterInfo| { &m.kill_num },
            |m: &mut SceneMonsterInfo| { &mut m.kill_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SceneFishInfo::SceneFishInfo>(
            "fish_info",
            SceneMonsterInfo::has_fish_info,
            SceneMonsterInfo::fish_info,
            SceneMonsterInfo::mut_fish_info,
            SceneMonsterInfo::set_fish_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FishtankFishInfo::FishtankFishInfo>(
            "fishtank_fish_info",
            SceneMonsterInfo::has_fishtank_fish_info,
            SceneMonsterInfo::fishtank_fish_info,
            SceneMonsterInfo::mut_fishtank_fish_info,
            SceneMonsterInfo::set_fishtank_fish_info,
        ));
        oneofs.push(scene_monster_info::Content::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SceneMonsterInfo>(
            "SceneMonsterInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SceneMonsterInfo {
    const NAME: &'static str = "SceneMonsterInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.monster_id = is.read_uint32()?;
                },
                16 => {
                    self.group_id = is.read_uint32()?;
                },
                24 => {
                    self.config_id = is.read_uint32()?;
                },
                34 => {
                    self.weapon_list.push(is.read_message()?);
                },
                40 => {
                    self.authority_peer_id = is.read_uint32()?;
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.affix_list)?;
                },
                48 => {
                    self.affix_list.push(is.read_uint32()?);
                },
                56 => {
                    self.is_elite = is.read_bool()?;
                },
                64 => {
                    self.owner_entity_id = is.read_uint32()?;
                },
                72 => {
                    self.summoned_tag = is.read_uint32()?;
                },
                82 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.summon_tag_map.insert(key, value);
                },
                88 => {
                    self.pose_id = is.read_uint32()?;
                },
                96 => {
                    self.born_type = is.read_enum_or_unknown()?;
                },
                104 => {
                    self.block_id = is.read_uint32()?;
                },
                112 => {
                    self.mark_flag = is.read_uint32()?;
                },
                120 => {
                    self.title_id = is.read_uint32()?;
                },
                128 => {
                    self.special_name_id = is.read_uint32()?;
                },
                136 => {
                    self.attack_target_id = is.read_uint32()?;
                },
                146 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.monster_route)?;
                },
                152 => {
                    self.ai_config_id = is.read_uint32()?;
                },
                160 => {
                    self.level_route_id = is.read_uint32()?;
                },
                168 => {
                    self.init_pose_id = is.read_uint32()?;
                },
                176 => {
                    self.is_light = is.read_bool()?;
                },
                184 => {
                    self.kill_num = is.read_uint32()?;
                },
                402 => {
                    self.content = ::std::option::Option::Some(scene_monster_info::Content::FishInfo(is.read_message()?));
                },
                410 => {
                    self.content = ::std::option::Option::Some(scene_monster_info::Content::FishtankFishInfo(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.monster_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.monster_id);
        }
        if self.group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.group_id);
        }
        if self.config_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.config_id);
        }
        for value in &self.weapon_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.authority_peer_id != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.authority_peer_id);
        }
        for value in &self.affix_list {
            my_size += ::protobuf::rt::uint32_size(6, *value);
        };
        if self.is_elite != false {
            my_size += 1 + 1;
        }
        if self.owner_entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.owner_entity_id);
        }
        if self.summoned_tag != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.summoned_tag);
        }
        for (k, v) in &self.summon_tag_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.pose_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.pose_id);
        }
        if self.born_type != ::protobuf::EnumOrUnknown::new(super::MonsterBornType::MonsterBornType::MONSTER_BORN_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(12, self.born_type.value());
        }
        if self.block_id != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.block_id);
        }
        if self.mark_flag != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.mark_flag);
        }
        if self.title_id != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.title_id);
        }
        if self.special_name_id != 0 {
            my_size += ::protobuf::rt::uint32_size(16, self.special_name_id);
        }
        if self.attack_target_id != 0 {
            my_size += ::protobuf::rt::uint32_size(17, self.attack_target_id);
        }
        if let Some(v) = self.monster_route.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.ai_config_id != 0 {
            my_size += ::protobuf::rt::uint32_size(19, self.ai_config_id);
        }
        if self.level_route_id != 0 {
            my_size += ::protobuf::rt::uint32_size(20, self.level_route_id);
        }
        if self.init_pose_id != 0 {
            my_size += ::protobuf::rt::uint32_size(21, self.init_pose_id);
        }
        if self.is_light != false {
            my_size += 2 + 1;
        }
        if self.kill_num != 0 {
            my_size += ::protobuf::rt::uint32_size(23, self.kill_num);
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &scene_monster_info::Content::FishInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &scene_monster_info::Content::FishtankFishInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.monster_id != 0 {
            os.write_uint32(1, self.monster_id)?;
        }
        if self.group_id != 0 {
            os.write_uint32(2, self.group_id)?;
        }
        if self.config_id != 0 {
            os.write_uint32(3, self.config_id)?;
        }
        for v in &self.weapon_list {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.authority_peer_id != 0 {
            os.write_uint32(5, self.authority_peer_id)?;
        }
        for v in &self.affix_list {
            os.write_uint32(6, *v)?;
        };
        if self.is_elite != false {
            os.write_bool(7, self.is_elite)?;
        }
        if self.owner_entity_id != 0 {
            os.write_uint32(8, self.owner_entity_id)?;
        }
        if self.summoned_tag != 0 {
            os.write_uint32(9, self.summoned_tag)?;
        }
        for (k, v) in &self.summon_tag_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(82)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if self.pose_id != 0 {
            os.write_uint32(11, self.pose_id)?;
        }
        if self.born_type != ::protobuf::EnumOrUnknown::new(super::MonsterBornType::MonsterBornType::MONSTER_BORN_TYPE_NONE) {
            os.write_enum(12, ::protobuf::EnumOrUnknown::value(&self.born_type))?;
        }
        if self.block_id != 0 {
            os.write_uint32(13, self.block_id)?;
        }
        if self.mark_flag != 0 {
            os.write_uint32(14, self.mark_flag)?;
        }
        if self.title_id != 0 {
            os.write_uint32(15, self.title_id)?;
        }
        if self.special_name_id != 0 {
            os.write_uint32(16, self.special_name_id)?;
        }
        if self.attack_target_id != 0 {
            os.write_uint32(17, self.attack_target_id)?;
        }
        if let Some(v) = self.monster_route.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
        }
        if self.ai_config_id != 0 {
            os.write_uint32(19, self.ai_config_id)?;
        }
        if self.level_route_id != 0 {
            os.write_uint32(20, self.level_route_id)?;
        }
        if self.init_pose_id != 0 {
            os.write_uint32(21, self.init_pose_id)?;
        }
        if self.is_light != false {
            os.write_bool(22, self.is_light)?;
        }
        if self.kill_num != 0 {
            os.write_uint32(23, self.kill_num)?;
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &scene_monster_info::Content::FishInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(50, v, os)?;
                },
                &scene_monster_info::Content::FishtankFishInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(51, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SceneMonsterInfo {
        SceneMonsterInfo::new()
    }

    fn clear(&mut self) {
        self.monster_id = 0;
        self.group_id = 0;
        self.config_id = 0;
        self.weapon_list.clear();
        self.authority_peer_id = 0;
        self.affix_list.clear();
        self.is_elite = false;
        self.owner_entity_id = 0;
        self.summoned_tag = 0;
        self.summon_tag_map.clear();
        self.pose_id = 0;
        self.born_type = ::protobuf::EnumOrUnknown::new(super::MonsterBornType::MonsterBornType::MONSTER_BORN_TYPE_NONE);
        self.block_id = 0;
        self.mark_flag = 0;
        self.title_id = 0;
        self.special_name_id = 0;
        self.attack_target_id = 0;
        self.monster_route.clear();
        self.ai_config_id = 0;
        self.level_route_id = 0;
        self.init_pose_id = 0;
        self.is_light = false;
        self.kill_num = 0;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SceneMonsterInfo {
        static instance: ::protobuf::rt::Lazy<SceneMonsterInfo> = ::protobuf::rt::Lazy::new();
        instance.get(SceneMonsterInfo::new)
    }
}

impl ::protobuf::MessageFull for SceneMonsterInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SceneMonsterInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SceneMonsterInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SceneMonsterInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SceneMonsterInfo`
pub mod scene_monster_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:SceneMonsterInfo.content)
    pub enum Content {
        // @@protoc_insertion_point(oneof_field:SceneMonsterInfo.fish_info)
        FishInfo(super::super::SceneFishInfo::SceneFishInfo),
        // @@protoc_insertion_point(oneof_field:SceneMonsterInfo.fishtank_fish_info)
        FishtankFishInfo(super::super::FishtankFishInfo::FishtankFishInfo),
    }

    impl ::protobuf::Oneof for Content {
    }

    impl ::protobuf::OneofFull for Content {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::SceneMonsterInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("content").unwrap()).clone()
        }
    }

    impl Content {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Content>("content")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16SceneMonsterInfo.proto\x1a\x15SceneWeaponInfo.proto\x1a\x15Monster\
    BornType.proto\x1a\x12MonsterRoute.proto\x1a\x13SceneFishInfo.proto\x1a\
    \x16FishtankFishInfo.proto\"\x97\x08\n\x10SceneMonsterInfo\x12\x1d\n\nmo\
    nster_id\x18\x01\x20\x01(\rR\tmonsterId\x12\x19\n\x08group_id\x18\x02\
    \x20\x01(\rR\x07groupId\x12\x1b\n\tconfig_id\x18\x03\x20\x01(\rR\x08conf\
    igId\x121\n\x0bweapon_list\x18\x04\x20\x03(\x0b2\x10.SceneWeaponInfoR\nw\
    eaponList\x12*\n\x11authority_peer_id\x18\x05\x20\x01(\rR\x0fauthorityPe\
    erId\x12\x1d\n\naffix_list\x18\x06\x20\x03(\rR\taffixList\x12\x19\n\x08i\
    s_elite\x18\x07\x20\x01(\x08R\x07isElite\x12&\n\x0fowner_entity_id\x18\
    \x08\x20\x01(\rR\rownerEntityId\x12!\n\x0csummoned_tag\x18\t\x20\x01(\rR\
    \x0bsummonedTag\x12I\n\x0esummon_tag_map\x18\n\x20\x03(\x0b2#.SceneMonst\
    erInfo.SummonTagMapEntryR\x0csummonTagMap\x12\x17\n\x07pose_id\x18\x0b\
    \x20\x01(\rR\x06poseId\x12-\n\tborn_type\x18\x0c\x20\x01(\x0e2\x10.Monst\
    erBornTypeR\x08bornType\x12\x19\n\x08block_id\x18\r\x20\x01(\rR\x07block\
    Id\x12\x1b\n\tmark_flag\x18\x0e\x20\x01(\rR\x08markFlag\x12\x19\n\x08tit\
    le_id\x18\x0f\x20\x01(\rR\x07titleId\x12&\n\x0fspecial_name_id\x18\x10\
    \x20\x01(\rR\rspecialNameId\x12(\n\x10attack_target_id\x18\x11\x20\x01(\
    \rR\x0eattackTargetId\x122\n\rmonster_route\x18\x12\x20\x01(\x0b2\r.Mons\
    terRouteR\x0cmonsterRoute\x12\x20\n\x0cai_config_id\x18\x13\x20\x01(\rR\
    \naiConfigId\x12$\n\x0elevel_route_id\x18\x14\x20\x01(\rR\x0clevelRouteI\
    d\x12\x20\n\x0cinit_pose_id\x18\x15\x20\x01(\rR\ninitPoseId\x12\x19\n\
    \x08is_light\x18\x16\x20\x01(\x08R\x07isLight\x12\x19\n\x08kill_num\x18\
    \x17\x20\x01(\rR\x07killNum\x12-\n\tfish_info\x182\x20\x01(\x0b2\x0e.Sce\
    neFishInfoH\0R\x08fishInfo\x12A\n\x12fishtank_fish_info\x183\x20\x01(\
    \x0b2\x11.FishtankFishInfoH\0R\x10fishtankFishInfo\x1a?\n\x11SummonTagMa\
    pEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\rR\x05value:\x028\x01B\t\n\x07contentB\x1b\n\x19emu.gr\
    asscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::SceneWeaponInfo::file_descriptor().clone());
            deps.push(super::MonsterBornType::file_descriptor().clone());
            deps.push(super::MonsterRoute::file_descriptor().clone());
            deps.push(super::SceneFishInfo::file_descriptor().clone());
            deps.push(super::FishtankFishInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SceneMonsterInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
