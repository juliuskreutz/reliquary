// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BreakoutPhysicalObject.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:BreakoutPhysicalObject)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BreakoutPhysicalObject {
    // message fields
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.id)
    pub id: u32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.index)
    pub index: u32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.is_active)
    pub is_active: bool,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.pos)
    pub pos: ::protobuf::MessageField<super::BreakoutVector2::BreakoutVector2>,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.move_dir)
    pub move_dir: ::protobuf::MessageField<super::BreakoutVector2::BreakoutVector2>,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.speed)
    pub speed: i32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.init_peer_id)
    pub init_peer_id: u32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.state)
    pub state: u32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.element_type)
    pub element_type: u32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.element_reaction_buff)
    pub element_reaction_buff: u32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.modifier_list)
    pub modifier_list: ::std::vec::Vec<super::BreakoutPhysicalObjectModifier::BreakoutPhysicalObjectModifier>,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.total_rotation)
    pub total_rotation: i32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.info_list)
    pub info_list: ::std::vec::Vec<super::BreakoutBrickInfo::BreakoutBrickInfo>,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.last_hit_peer_id)
    pub last_hit_peer_id: u32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.speed_increase_count)
    pub speed_increase_count: u32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObject.offset)
    pub offset: i32,
    // special fields
    // @@protoc_insertion_point(special_field:BreakoutPhysicalObject.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BreakoutPhysicalObject {
    fn default() -> &'a BreakoutPhysicalObject {
        <BreakoutPhysicalObject as ::protobuf::Message>::default_instance()
    }
}

impl BreakoutPhysicalObject {
    pub fn new() -> BreakoutPhysicalObject {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(16);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &BreakoutPhysicalObject| { &m.id },
            |m: &mut BreakoutPhysicalObject| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &BreakoutPhysicalObject| { &m.index },
            |m: &mut BreakoutPhysicalObject| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_active",
            |m: &BreakoutPhysicalObject| { &m.is_active },
            |m: &mut BreakoutPhysicalObject| { &mut m.is_active },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BreakoutVector2::BreakoutVector2>(
            "pos",
            |m: &BreakoutPhysicalObject| { &m.pos },
            |m: &mut BreakoutPhysicalObject| { &mut m.pos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BreakoutVector2::BreakoutVector2>(
            "move_dir",
            |m: &BreakoutPhysicalObject| { &m.move_dir },
            |m: &mut BreakoutPhysicalObject| { &mut m.move_dir },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "speed",
            |m: &BreakoutPhysicalObject| { &m.speed },
            |m: &mut BreakoutPhysicalObject| { &mut m.speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "init_peer_id",
            |m: &BreakoutPhysicalObject| { &m.init_peer_id },
            |m: &mut BreakoutPhysicalObject| { &mut m.init_peer_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &BreakoutPhysicalObject| { &m.state },
            |m: &mut BreakoutPhysicalObject| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "element_type",
            |m: &BreakoutPhysicalObject| { &m.element_type },
            |m: &mut BreakoutPhysicalObject| { &mut m.element_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "element_reaction_buff",
            |m: &BreakoutPhysicalObject| { &m.element_reaction_buff },
            |m: &mut BreakoutPhysicalObject| { &mut m.element_reaction_buff },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "modifier_list",
            |m: &BreakoutPhysicalObject| { &m.modifier_list },
            |m: &mut BreakoutPhysicalObject| { &mut m.modifier_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_rotation",
            |m: &BreakoutPhysicalObject| { &m.total_rotation },
            |m: &mut BreakoutPhysicalObject| { &mut m.total_rotation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "info_list",
            |m: &BreakoutPhysicalObject| { &m.info_list },
            |m: &mut BreakoutPhysicalObject| { &mut m.info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_hit_peer_id",
            |m: &BreakoutPhysicalObject| { &m.last_hit_peer_id },
            |m: &mut BreakoutPhysicalObject| { &mut m.last_hit_peer_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "speed_increase_count",
            |m: &BreakoutPhysicalObject| { &m.speed_increase_count },
            |m: &mut BreakoutPhysicalObject| { &mut m.speed_increase_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "offset",
            |m: &BreakoutPhysicalObject| { &m.offset },
            |m: &mut BreakoutPhysicalObject| { &mut m.offset },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BreakoutPhysicalObject>(
            "BreakoutPhysicalObject",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BreakoutPhysicalObject {
    const NAME: &'static str = "BreakoutPhysicalObject";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                16 => {
                    self.index = is.read_uint32()?;
                },
                24 => {
                    self.is_active = is.read_bool()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pos)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.move_dir)?;
                },
                48 => {
                    self.speed = is.read_int32()?;
                },
                56 => {
                    self.init_peer_id = is.read_uint32()?;
                },
                64 => {
                    self.state = is.read_uint32()?;
                },
                72 => {
                    self.element_type = is.read_uint32()?;
                },
                80 => {
                    self.element_reaction_buff = is.read_uint32()?;
                },
                90 => {
                    self.modifier_list.push(is.read_message()?);
                },
                96 => {
                    self.total_rotation = is.read_int32()?;
                },
                106 => {
                    self.info_list.push(is.read_message()?);
                },
                112 => {
                    self.last_hit_peer_id = is.read_uint32()?;
                },
                120 => {
                    self.speed_increase_count = is.read_uint32()?;
                },
                128 => {
                    self.offset = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.index);
        }
        if self.is_active != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.move_dir.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.speed != 0 {
            my_size += ::protobuf::rt::int32_size(6, self.speed);
        }
        if self.init_peer_id != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.init_peer_id);
        }
        if self.state != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.state);
        }
        if self.element_type != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.element_type);
        }
        if self.element_reaction_buff != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.element_reaction_buff);
        }
        for value in &self.modifier_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.total_rotation != 0 {
            my_size += ::protobuf::rt::int32_size(12, self.total_rotation);
        }
        for value in &self.info_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.last_hit_peer_id != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.last_hit_peer_id);
        }
        if self.speed_increase_count != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.speed_increase_count);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::int32_size(16, self.offset);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.index != 0 {
            os.write_uint32(2, self.index)?;
        }
        if self.is_active != false {
            os.write_bool(3, self.is_active)?;
        }
        if let Some(v) = self.pos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.move_dir.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if self.speed != 0 {
            os.write_int32(6, self.speed)?;
        }
        if self.init_peer_id != 0 {
            os.write_uint32(7, self.init_peer_id)?;
        }
        if self.state != 0 {
            os.write_uint32(8, self.state)?;
        }
        if self.element_type != 0 {
            os.write_uint32(9, self.element_type)?;
        }
        if self.element_reaction_buff != 0 {
            os.write_uint32(10, self.element_reaction_buff)?;
        }
        for v in &self.modifier_list {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        if self.total_rotation != 0 {
            os.write_int32(12, self.total_rotation)?;
        }
        for v in &self.info_list {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        if self.last_hit_peer_id != 0 {
            os.write_uint32(14, self.last_hit_peer_id)?;
        }
        if self.speed_increase_count != 0 {
            os.write_uint32(15, self.speed_increase_count)?;
        }
        if self.offset != 0 {
            os.write_int32(16, self.offset)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BreakoutPhysicalObject {
        BreakoutPhysicalObject::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.index = 0;
        self.is_active = false;
        self.pos.clear();
        self.move_dir.clear();
        self.speed = 0;
        self.init_peer_id = 0;
        self.state = 0;
        self.element_type = 0;
        self.element_reaction_buff = 0;
        self.modifier_list.clear();
        self.total_rotation = 0;
        self.info_list.clear();
        self.last_hit_peer_id = 0;
        self.speed_increase_count = 0;
        self.offset = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BreakoutPhysicalObject {
        static instance: BreakoutPhysicalObject = BreakoutPhysicalObject {
            id: 0,
            index: 0,
            is_active: false,
            pos: ::protobuf::MessageField::none(),
            move_dir: ::protobuf::MessageField::none(),
            speed: 0,
            init_peer_id: 0,
            state: 0,
            element_type: 0,
            element_reaction_buff: 0,
            modifier_list: ::std::vec::Vec::new(),
            total_rotation: 0,
            info_list: ::std::vec::Vec::new(),
            last_hit_peer_id: 0,
            speed_increase_count: 0,
            offset: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BreakoutPhysicalObject {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BreakoutPhysicalObject").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BreakoutPhysicalObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BreakoutPhysicalObject {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cBreakoutPhysicalObject.proto\x1a\x15BreakoutVector2.proto\x1a$Brea\
    koutPhysicalObjectModifier.proto\x1a\x17BreakoutBrickInfo.proto\"\xe2\
    \x04\n\x16BreakoutPhysicalObject\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02\
    id\x12\x14\n\x05index\x18\x02\x20\x01(\rR\x05index\x12\x1b\n\tis_active\
    \x18\x03\x20\x01(\x08R\x08isActive\x12\"\n\x03pos\x18\x04\x20\x01(\x0b2\
    \x10.BreakoutVector2R\x03pos\x12+\n\x08move_dir\x18\x05\x20\x01(\x0b2\
    \x10.BreakoutVector2R\x07moveDir\x12\x14\n\x05speed\x18\x06\x20\x01(\x05\
    R\x05speed\x12\x20\n\x0cinit_peer_id\x18\x07\x20\x01(\rR\ninitPeerId\x12\
    \x14\n\x05state\x18\x08\x20\x01(\rR\x05state\x12!\n\x0celement_type\x18\
    \t\x20\x01(\rR\x0belementType\x122\n\x15element_reaction_buff\x18\n\x20\
    \x01(\rR\x13elementReactionBuff\x12D\n\rmodifier_list\x18\x0b\x20\x03(\
    \x0b2\x1f.BreakoutPhysicalObjectModifierR\x0cmodifierList\x12%\n\x0etota\
    l_rotation\x18\x0c\x20\x01(\x05R\rtotalRotation\x12/\n\tinfo_list\x18\r\
    \x20\x03(\x0b2\x12.BreakoutBrickInfoR\x08infoList\x12'\n\x10last_hit_pee\
    r_id\x18\x0e\x20\x01(\rR\rlastHitPeerId\x120\n\x14speed_increase_count\
    \x18\x0f\x20\x01(\rR\x12speedIncreaseCount\x12\x16\n\x06offset\x18\x10\
    \x20\x01(\x05R\x06offsetB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::BreakoutVector2::file_descriptor().clone());
            deps.push(super::BreakoutPhysicalObjectModifier::file_descriptor().clone());
            deps.push(super::BreakoutBrickInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BreakoutPhysicalObject::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
