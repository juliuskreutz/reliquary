// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MsgParam.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:MsgParam)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgParam {
    // message oneof groups
    pub param: ::std::option::Option<msg_param::Param>,
    // special fields
    // @@protoc_insertion_point(special_field:MsgParam.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgParam {
    fn default() -> &'a MsgParam {
        <MsgParam as ::protobuf::Message>::default_instance()
    }
}

impl MsgParam {
    pub fn new() -> MsgParam {
        ::std::default::Default::default()
    }

    // uint32 int_param = 8;

    pub fn int_param(&self) -> u32 {
        match self.param {
            ::std::option::Option::Some(msg_param::Param::IntParam(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_int_param(&mut self) {
        self.param = ::std::option::Option::None;
    }

    pub fn has_int_param(&self) -> bool {
        match self.param {
            ::std::option::Option::Some(msg_param::Param::IntParam(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int_param(&mut self, v: u32) {
        self.param = ::std::option::Option::Some(msg_param::Param::IntParam(v))
    }

    // float flt_param = 10;

    pub fn flt_param(&self) -> f32 {
        match self.param {
            ::std::option::Option::Some(msg_param::Param::FltParam(v)) => v,
            _ => 0.,
        }
    }

    pub fn clear_flt_param(&mut self) {
        self.param = ::std::option::Option::None;
    }

    pub fn has_flt_param(&self) -> bool {
        match self.param {
            ::std::option::Option::Some(msg_param::Param::FltParam(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_flt_param(&mut self, v: f32) {
        self.param = ::std::option::Option::Some(msg_param::Param::FltParam(v))
    }

    // string str_param = 12;

    pub fn str_param(&self) -> &str {
        match self.param {
            ::std::option::Option::Some(msg_param::Param::StrParam(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_str_param(&mut self) {
        self.param = ::std::option::Option::None;
    }

    pub fn has_str_param(&self) -> bool {
        match self.param {
            ::std::option::Option::Some(msg_param::Param::StrParam(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_str_param(&mut self, v: ::std::string::String) {
        self.param = ::std::option::Option::Some(msg_param::Param::StrParam(v))
    }

    // Mutable pointer to the field.
    pub fn mut_str_param(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(msg_param::Param::StrParam(_)) = self.param {
        } else {
            self.param = ::std::option::Option::Some(msg_param::Param::StrParam(::std::string::String::new()));
        }
        match self.param {
            ::std::option::Option::Some(msg_param::Param::StrParam(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_str_param(&mut self) -> ::std::string::String {
        if self.has_str_param() {
            match self.param.take() {
                ::std::option::Option::Some(msg_param::Param::StrParam(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "int_param",
            MsgParam::has_int_param,
            MsgParam::int_param,
            MsgParam::set_int_param,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "flt_param",
            MsgParam::has_flt_param,
            MsgParam::flt_param,
            MsgParam::set_flt_param,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "str_param",
            MsgParam::has_str_param,
            MsgParam::str_param,
            MsgParam::set_str_param,
        ));
        oneofs.push(msg_param::Param::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgParam>(
            "MsgParam",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgParam {
    const NAME: &'static str = "MsgParam";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                64 => {
                    self.param = ::std::option::Option::Some(msg_param::Param::IntParam(is.read_uint32()?));
                },
                85 => {
                    self.param = ::std::option::Option::Some(msg_param::Param::FltParam(is.read_float()?));
                },
                98 => {
                    self.param = ::std::option::Option::Some(msg_param::Param::StrParam(is.read_string()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.param {
            match v {
                &msg_param::Param::IntParam(v) => {
                    my_size += ::protobuf::rt::uint32_size(8, v);
                },
                &msg_param::Param::FltParam(v) => {
                    my_size += 1 + 4;
                },
                &msg_param::Param::StrParam(ref v) => {
                    my_size += ::protobuf::rt::string_size(12, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.param {
            match v {
                &msg_param::Param::IntParam(v) => {
                    os.write_uint32(8, v)?;
                },
                &msg_param::Param::FltParam(v) => {
                    os.write_float(10, v)?;
                },
                &msg_param::Param::StrParam(ref v) => {
                    os.write_string(12, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgParam {
        MsgParam::new()
    }

    fn clear(&mut self) {
        self.param = ::std::option::Option::None;
        self.param = ::std::option::Option::None;
        self.param = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgParam {
        static instance: MsgParam = MsgParam {
            param: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgParam {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgParam").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgParam {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgParam {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MsgParam`
pub mod msg_param {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:MsgParam.param)
    pub enum Param {
        // @@protoc_insertion_point(oneof_field:MsgParam.int_param)
        IntParam(u32),
        // @@protoc_insertion_point(oneof_field:MsgParam.flt_param)
        FltParam(f32),
        // @@protoc_insertion_point(oneof_field:MsgParam.str_param)
        StrParam(::std::string::String),
    }

    impl ::protobuf::Oneof for Param {
    }

    impl ::protobuf::OneofFull for Param {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::MsgParam as ::protobuf::MessageFull>::descriptor().oneof_by_name("param").unwrap()).clone()
        }
    }

    impl Param {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Param>("param")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eMsgParam.proto\"p\n\x08MsgParam\x12\x1d\n\tint_param\x18\x08\x20\
    \x01(\rH\0R\x08intParam\x12\x1d\n\tflt_param\x18\n\x20\x01(\x02H\0R\x08f\
    ltParam\x12\x1d\n\tstr_param\x18\x0c\x20\x01(\tH\0R\x08strParamB\x07\n\
    \x05paramB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MsgParam::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
