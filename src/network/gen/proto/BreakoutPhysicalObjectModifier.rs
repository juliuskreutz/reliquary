// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BreakoutPhysicalObjectModifier.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:BreakoutPhysicalObjectModifier)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BreakoutPhysicalObjectModifier {
    // message fields
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.type)
    pub type_: u32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.id)
    pub id: u32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.param1)
    pub param1: i32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.param2)
    pub param2: i32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.param3)
    pub param3: i32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.param4)
    pub param4: i32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.param5)
    pub param5: i32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.param6)
    pub param6: i32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.bool1)
    pub bool1: bool,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.duration)
    pub duration: i32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.end_time)
    pub end_time: i32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.combo)
    pub combo: u32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.peer_id)
    pub peer_id: u32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.skill_type)
    pub skill_type: u32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.level)
    pub level: u32,
    // @@protoc_insertion_point(field:BreakoutPhysicalObjectModifier.choose_player_count)
    pub choose_player_count: u32,
    // special fields
    // @@protoc_insertion_point(special_field:BreakoutPhysicalObjectModifier.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BreakoutPhysicalObjectModifier {
    fn default() -> &'a BreakoutPhysicalObjectModifier {
        <BreakoutPhysicalObjectModifier as ::protobuf::Message>::default_instance()
    }
}

impl BreakoutPhysicalObjectModifier {
    pub fn new() -> BreakoutPhysicalObjectModifier {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(16);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &BreakoutPhysicalObjectModifier| { &m.type_ },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &BreakoutPhysicalObjectModifier| { &m.id },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "param1",
            |m: &BreakoutPhysicalObjectModifier| { &m.param1 },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.param1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "param2",
            |m: &BreakoutPhysicalObjectModifier| { &m.param2 },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.param2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "param3",
            |m: &BreakoutPhysicalObjectModifier| { &m.param3 },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.param3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "param4",
            |m: &BreakoutPhysicalObjectModifier| { &m.param4 },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.param4 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "param5",
            |m: &BreakoutPhysicalObjectModifier| { &m.param5 },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.param5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "param6",
            |m: &BreakoutPhysicalObjectModifier| { &m.param6 },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.param6 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bool1",
            |m: &BreakoutPhysicalObjectModifier| { &m.bool1 },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.bool1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "duration",
            |m: &BreakoutPhysicalObjectModifier| { &m.duration },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.duration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_time",
            |m: &BreakoutPhysicalObjectModifier| { &m.end_time },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "combo",
            |m: &BreakoutPhysicalObjectModifier| { &m.combo },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.combo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "peer_id",
            |m: &BreakoutPhysicalObjectModifier| { &m.peer_id },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.peer_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "skill_type",
            |m: &BreakoutPhysicalObjectModifier| { &m.skill_type },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.skill_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &BreakoutPhysicalObjectModifier| { &m.level },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "choose_player_count",
            |m: &BreakoutPhysicalObjectModifier| { &m.choose_player_count },
            |m: &mut BreakoutPhysicalObjectModifier| { &mut m.choose_player_count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BreakoutPhysicalObjectModifier>(
            "BreakoutPhysicalObjectModifier",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BreakoutPhysicalObjectModifier {
    const NAME: &'static str = "BreakoutPhysicalObjectModifier";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_uint32()?;
                },
                16 => {
                    self.id = is.read_uint32()?;
                },
                24 => {
                    self.param1 = is.read_int32()?;
                },
                32 => {
                    self.param2 = is.read_int32()?;
                },
                40 => {
                    self.param3 = is.read_int32()?;
                },
                48 => {
                    self.param4 = is.read_int32()?;
                },
                56 => {
                    self.param5 = is.read_int32()?;
                },
                64 => {
                    self.param6 = is.read_int32()?;
                },
                72 => {
                    self.bool1 = is.read_bool()?;
                },
                80 => {
                    self.duration = is.read_int32()?;
                },
                88 => {
                    self.end_time = is.read_int32()?;
                },
                96 => {
                    self.combo = is.read_uint32()?;
                },
                104 => {
                    self.peer_id = is.read_uint32()?;
                },
                112 => {
                    self.skill_type = is.read_uint32()?;
                },
                120 => {
                    self.level = is.read_uint32()?;
                },
                128 => {
                    self.choose_player_count = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.type_);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.id);
        }
        if self.param1 != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.param1);
        }
        if self.param2 != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.param2);
        }
        if self.param3 != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.param3);
        }
        if self.param4 != 0 {
            my_size += ::protobuf::rt::int32_size(6, self.param4);
        }
        if self.param5 != 0 {
            my_size += ::protobuf::rt::int32_size(7, self.param5);
        }
        if self.param6 != 0 {
            my_size += ::protobuf::rt::int32_size(8, self.param6);
        }
        if self.bool1 != false {
            my_size += 1 + 1;
        }
        if self.duration != 0 {
            my_size += ::protobuf::rt::int32_size(10, self.duration);
        }
        if self.end_time != 0 {
            my_size += ::protobuf::rt::int32_size(11, self.end_time);
        }
        if self.combo != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.combo);
        }
        if self.peer_id != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.peer_id);
        }
        if self.skill_type != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.skill_type);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.level);
        }
        if self.choose_player_count != 0 {
            my_size += ::protobuf::rt::uint32_size(16, self.choose_player_count);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != 0 {
            os.write_uint32(1, self.type_)?;
        }
        if self.id != 0 {
            os.write_uint32(2, self.id)?;
        }
        if self.param1 != 0 {
            os.write_int32(3, self.param1)?;
        }
        if self.param2 != 0 {
            os.write_int32(4, self.param2)?;
        }
        if self.param3 != 0 {
            os.write_int32(5, self.param3)?;
        }
        if self.param4 != 0 {
            os.write_int32(6, self.param4)?;
        }
        if self.param5 != 0 {
            os.write_int32(7, self.param5)?;
        }
        if self.param6 != 0 {
            os.write_int32(8, self.param6)?;
        }
        if self.bool1 != false {
            os.write_bool(9, self.bool1)?;
        }
        if self.duration != 0 {
            os.write_int32(10, self.duration)?;
        }
        if self.end_time != 0 {
            os.write_int32(11, self.end_time)?;
        }
        if self.combo != 0 {
            os.write_uint32(12, self.combo)?;
        }
        if self.peer_id != 0 {
            os.write_uint32(13, self.peer_id)?;
        }
        if self.skill_type != 0 {
            os.write_uint32(14, self.skill_type)?;
        }
        if self.level != 0 {
            os.write_uint32(15, self.level)?;
        }
        if self.choose_player_count != 0 {
            os.write_uint32(16, self.choose_player_count)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BreakoutPhysicalObjectModifier {
        BreakoutPhysicalObjectModifier::new()
    }

    fn clear(&mut self) {
        self.type_ = 0;
        self.id = 0;
        self.param1 = 0;
        self.param2 = 0;
        self.param3 = 0;
        self.param4 = 0;
        self.param5 = 0;
        self.param6 = 0;
        self.bool1 = false;
        self.duration = 0;
        self.end_time = 0;
        self.combo = 0;
        self.peer_id = 0;
        self.skill_type = 0;
        self.level = 0;
        self.choose_player_count = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BreakoutPhysicalObjectModifier {
        static instance: BreakoutPhysicalObjectModifier = BreakoutPhysicalObjectModifier {
            type_: 0,
            id: 0,
            param1: 0,
            param2: 0,
            param3: 0,
            param4: 0,
            param5: 0,
            param6: 0,
            bool1: false,
            duration: 0,
            end_time: 0,
            combo: 0,
            peer_id: 0,
            skill_type: 0,
            level: 0,
            choose_player_count: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BreakoutPhysicalObjectModifier {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BreakoutPhysicalObjectModifier").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BreakoutPhysicalObjectModifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BreakoutPhysicalObjectModifier {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$BreakoutPhysicalObjectModifier.proto\"\xb5\x03\n\x1eBreakoutPhysicalO\
    bjectModifier\x12\x12\n\x04type\x18\x01\x20\x01(\rR\x04type\x12\x0e\n\
    \x02id\x18\x02\x20\x01(\rR\x02id\x12\x16\n\x06param1\x18\x03\x20\x01(\
    \x05R\x06param1\x12\x16\n\x06param2\x18\x04\x20\x01(\x05R\x06param2\x12\
    \x16\n\x06param3\x18\x05\x20\x01(\x05R\x06param3\x12\x16\n\x06param4\x18\
    \x06\x20\x01(\x05R\x06param4\x12\x16\n\x06param5\x18\x07\x20\x01(\x05R\
    \x06param5\x12\x16\n\x06param6\x18\x08\x20\x01(\x05R\x06param6\x12\x14\n\
    \x05bool1\x18\t\x20\x01(\x08R\x05bool1\x12\x1a\n\x08duration\x18\n\x20\
    \x01(\x05R\x08duration\x12\x19\n\x08end_time\x18\x0b\x20\x01(\x05R\x07en\
    dTime\x12\x14\n\x05combo\x18\x0c\x20\x01(\rR\x05combo\x12\x17\n\x07peer_\
    id\x18\r\x20\x01(\rR\x06peerId\x12\x1d\n\nskill_type\x18\x0e\x20\x01(\rR\
    \tskillType\x12\x14\n\x05level\x18\x0f\x20\x01(\rR\x05level\x12.\n\x13ch\
    oose_player_count\x18\x10\x20\x01(\rR\x11choosePlayerCountB\x1b\n\x19emu\
    .grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BreakoutPhysicalObjectModifier::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
