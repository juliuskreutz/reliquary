// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MusicGameSettleReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:MusicGameSettleReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MusicGameSettleReq {
    // message fields
    // @@protoc_insertion_point(field:MusicGameSettleReq.correct_hit)
    pub correct_hit: u32,
    // @@protoc_insertion_point(field:MusicGameSettleReq.OEAHADEGEOA)
    pub OEAHADEGEOA: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:MusicGameSettleReq.ugc_guid)
    pub ugc_guid: u64,
    // @@protoc_insertion_point(field:MusicGameSettleReq.BPNLLFDJJOL)
    pub BPNLLFDJJOL: bool,
    // @@protoc_insertion_point(field:MusicGameSettleReq.score)
    pub score: u32,
    // @@protoc_insertion_point(field:MusicGameSettleReq.MECALGKAKJK)
    pub MECALGKAKJK: u32,
    // @@protoc_insertion_point(field:MusicGameSettleReq.max_combo)
    pub max_combo: u32,
    // @@protoc_insertion_point(field:MusicGameSettleReq.KPPICEDHMPN)
    pub KPPICEDHMPN: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:MusicGameSettleReq.speed)
    pub speed: f32,
    // @@protoc_insertion_point(field:MusicGameSettleReq.KDAOEDCLEFG)
    pub KDAOEDCLEFG: u32,
    // @@protoc_insertion_point(field:MusicGameSettleReq.is_save_score)
    pub is_save_score: bool,
    // @@protoc_insertion_point(field:MusicGameSettleReq.MAMHOPGFOKD)
    pub MAMHOPGFOKD: bool,
    // @@protoc_insertion_point(field:MusicGameSettleReq.NMPPJPOJFDC)
    pub NMPPJPOJFDC: u32,
    // @@protoc_insertion_point(field:MusicGameSettleReq.music_basic_id)
    pub music_basic_id: u32,
    // @@protoc_insertion_point(field:MusicGameSettleReq.combo)
    pub combo: u32,
    // @@protoc_insertion_point(field:MusicGameSettleReq.NGALDEAEBHG)
    pub NGALDEAEBHG: u32,
    // @@protoc_insertion_point(field:MusicGameSettleReq.FCFNKIDLDHJ)
    pub FCFNKIDLDHJ: u32,
    // @@protoc_insertion_point(field:MusicGameSettleReq.GDOMKIHOKCC)
    pub GDOMKIHOKCC: u32,
    // special fields
    // @@protoc_insertion_point(special_field:MusicGameSettleReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MusicGameSettleReq {
    fn default() -> &'a MusicGameSettleReq {
        <MusicGameSettleReq as ::protobuf::Message>::default_instance()
    }
}

impl MusicGameSettleReq {
    pub fn new() -> MusicGameSettleReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(18);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "correct_hit",
            |m: &MusicGameSettleReq| { &m.correct_hit },
            |m: &mut MusicGameSettleReq| { &mut m.correct_hit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OEAHADEGEOA",
            |m: &MusicGameSettleReq| { &m.OEAHADEGEOA },
            |m: &mut MusicGameSettleReq| { &mut m.OEAHADEGEOA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ugc_guid",
            |m: &MusicGameSettleReq| { &m.ugc_guid },
            |m: &mut MusicGameSettleReq| { &mut m.ugc_guid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BPNLLFDJJOL",
            |m: &MusicGameSettleReq| { &m.BPNLLFDJJOL },
            |m: &mut MusicGameSettleReq| { &mut m.BPNLLFDJJOL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "score",
            |m: &MusicGameSettleReq| { &m.score },
            |m: &mut MusicGameSettleReq| { &mut m.score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MECALGKAKJK",
            |m: &MusicGameSettleReq| { &m.MECALGKAKJK },
            |m: &mut MusicGameSettleReq| { &mut m.MECALGKAKJK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_combo",
            |m: &MusicGameSettleReq| { &m.max_combo },
            |m: &mut MusicGameSettleReq| { &mut m.max_combo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KPPICEDHMPN",
            |m: &MusicGameSettleReq| { &m.KPPICEDHMPN },
            |m: &mut MusicGameSettleReq| { &mut m.KPPICEDHMPN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "speed",
            |m: &MusicGameSettleReq| { &m.speed },
            |m: &mut MusicGameSettleReq| { &mut m.speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KDAOEDCLEFG",
            |m: &MusicGameSettleReq| { &m.KDAOEDCLEFG },
            |m: &mut MusicGameSettleReq| { &mut m.KDAOEDCLEFG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_save_score",
            |m: &MusicGameSettleReq| { &m.is_save_score },
            |m: &mut MusicGameSettleReq| { &mut m.is_save_score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MAMHOPGFOKD",
            |m: &MusicGameSettleReq| { &m.MAMHOPGFOKD },
            |m: &mut MusicGameSettleReq| { &mut m.MAMHOPGFOKD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NMPPJPOJFDC",
            |m: &MusicGameSettleReq| { &m.NMPPJPOJFDC },
            |m: &mut MusicGameSettleReq| { &mut m.NMPPJPOJFDC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "music_basic_id",
            |m: &MusicGameSettleReq| { &m.music_basic_id },
            |m: &mut MusicGameSettleReq| { &mut m.music_basic_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "combo",
            |m: &MusicGameSettleReq| { &m.combo },
            |m: &mut MusicGameSettleReq| { &mut m.combo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NGALDEAEBHG",
            |m: &MusicGameSettleReq| { &m.NGALDEAEBHG },
            |m: &mut MusicGameSettleReq| { &mut m.NGALDEAEBHG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FCFNKIDLDHJ",
            |m: &MusicGameSettleReq| { &m.FCFNKIDLDHJ },
            |m: &mut MusicGameSettleReq| { &mut m.FCFNKIDLDHJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GDOMKIHOKCC",
            |m: &MusicGameSettleReq| { &m.GDOMKIHOKCC },
            |m: &mut MusicGameSettleReq| { &mut m.GDOMKIHOKCC },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MusicGameSettleReq>(
            "MusicGameSettleReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MusicGameSettleReq {
    const NAME: &'static str = "MusicGameSettleReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                56 => {
                    self.correct_hit = is.read_uint32()?;
                },
                2618 => {
                    is.read_repeated_packed_uint32_into(&mut self.OEAHADEGEOA)?;
                },
                2616 => {
                    self.OEAHADEGEOA.push(is.read_uint32()?);
                },
                8 => {
                    self.ugc_guid = is.read_uint64()?;
                },
                9600 => {
                    self.BPNLLFDJJOL = is.read_bool()?;
                },
                64 => {
                    self.score = is.read_uint32()?;
                },
                112 => {
                    self.MECALGKAKJK = is.read_uint32()?;
                },
                16 => {
                    self.max_combo = is.read_uint32()?;
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.KPPICEDHMPN)?;
                },
                40 => {
                    self.KPPICEDHMPN.push(is.read_uint32()?);
                },
                13029 => {
                    self.speed = is.read_float()?;
                },
                13992 => {
                    self.KDAOEDCLEFG = is.read_uint32()?;
                },
                48 => {
                    self.is_save_score = is.read_bool()?;
                },
                9584 => {
                    self.MAMHOPGFOKD = is.read_bool()?;
                },
                32 => {
                    self.NMPPJPOJFDC = is.read_uint32()?;
                },
                88 => {
                    self.music_basic_id = is.read_uint32()?;
                },
                72 => {
                    self.combo = is.read_uint32()?;
                },
                120 => {
                    self.NGALDEAEBHG = is.read_uint32()?;
                },
                7504 => {
                    self.FCFNKIDLDHJ = is.read_uint32()?;
                },
                5976 => {
                    self.GDOMKIHOKCC = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.correct_hit != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.correct_hit);
        }
        for value in &self.OEAHADEGEOA {
            my_size += ::protobuf::rt::uint32_size(327, *value);
        };
        if self.ugc_guid != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.ugc_guid);
        }
        if self.BPNLLFDJJOL != false {
            my_size += 2 + 1;
        }
        if self.score != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.score);
        }
        if self.MECALGKAKJK != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.MECALGKAKJK);
        }
        if self.max_combo != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.max_combo);
        }
        for value in &self.KPPICEDHMPN {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        if self.speed != 0. {
            my_size += 2 + 4;
        }
        if self.KDAOEDCLEFG != 0 {
            my_size += ::protobuf::rt::uint32_size(1749, self.KDAOEDCLEFG);
        }
        if self.is_save_score != false {
            my_size += 1 + 1;
        }
        if self.MAMHOPGFOKD != false {
            my_size += 2 + 1;
        }
        if self.NMPPJPOJFDC != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.NMPPJPOJFDC);
        }
        if self.music_basic_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.music_basic_id);
        }
        if self.combo != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.combo);
        }
        if self.NGALDEAEBHG != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.NGALDEAEBHG);
        }
        if self.FCFNKIDLDHJ != 0 {
            my_size += ::protobuf::rt::uint32_size(938, self.FCFNKIDLDHJ);
        }
        if self.GDOMKIHOKCC != 0 {
            my_size += ::protobuf::rt::uint32_size(747, self.GDOMKIHOKCC);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.correct_hit != 0 {
            os.write_uint32(7, self.correct_hit)?;
        }
        for v in &self.OEAHADEGEOA {
            os.write_uint32(327, *v)?;
        };
        if self.ugc_guid != 0 {
            os.write_uint64(1, self.ugc_guid)?;
        }
        if self.BPNLLFDJJOL != false {
            os.write_bool(1200, self.BPNLLFDJJOL)?;
        }
        if self.score != 0 {
            os.write_uint32(8, self.score)?;
        }
        if self.MECALGKAKJK != 0 {
            os.write_uint32(14, self.MECALGKAKJK)?;
        }
        if self.max_combo != 0 {
            os.write_uint32(2, self.max_combo)?;
        }
        for v in &self.KPPICEDHMPN {
            os.write_uint32(5, *v)?;
        };
        if self.speed != 0. {
            os.write_float(1628, self.speed)?;
        }
        if self.KDAOEDCLEFG != 0 {
            os.write_uint32(1749, self.KDAOEDCLEFG)?;
        }
        if self.is_save_score != false {
            os.write_bool(6, self.is_save_score)?;
        }
        if self.MAMHOPGFOKD != false {
            os.write_bool(1198, self.MAMHOPGFOKD)?;
        }
        if self.NMPPJPOJFDC != 0 {
            os.write_uint32(4, self.NMPPJPOJFDC)?;
        }
        if self.music_basic_id != 0 {
            os.write_uint32(11, self.music_basic_id)?;
        }
        if self.combo != 0 {
            os.write_uint32(9, self.combo)?;
        }
        if self.NGALDEAEBHG != 0 {
            os.write_uint32(15, self.NGALDEAEBHG)?;
        }
        if self.FCFNKIDLDHJ != 0 {
            os.write_uint32(938, self.FCFNKIDLDHJ)?;
        }
        if self.GDOMKIHOKCC != 0 {
            os.write_uint32(747, self.GDOMKIHOKCC)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MusicGameSettleReq {
        MusicGameSettleReq::new()
    }

    fn clear(&mut self) {
        self.correct_hit = 0;
        self.OEAHADEGEOA.clear();
        self.ugc_guid = 0;
        self.BPNLLFDJJOL = false;
        self.score = 0;
        self.MECALGKAKJK = 0;
        self.max_combo = 0;
        self.KPPICEDHMPN.clear();
        self.speed = 0.;
        self.KDAOEDCLEFG = 0;
        self.is_save_score = false;
        self.MAMHOPGFOKD = false;
        self.NMPPJPOJFDC = 0;
        self.music_basic_id = 0;
        self.combo = 0;
        self.NGALDEAEBHG = 0;
        self.FCFNKIDLDHJ = 0;
        self.GDOMKIHOKCC = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MusicGameSettleReq {
        static instance: MusicGameSettleReq = MusicGameSettleReq {
            correct_hit: 0,
            OEAHADEGEOA: ::std::vec::Vec::new(),
            ugc_guid: 0,
            BPNLLFDJJOL: false,
            score: 0,
            MECALGKAKJK: 0,
            max_combo: 0,
            KPPICEDHMPN: ::std::vec::Vec::new(),
            speed: 0.,
            KDAOEDCLEFG: 0,
            is_save_score: false,
            MAMHOPGFOKD: false,
            NMPPJPOJFDC: 0,
            music_basic_id: 0,
            combo: 0,
            NGALDEAEBHG: 0,
            FCFNKIDLDHJ: 0,
            GDOMKIHOKCC: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MusicGameSettleReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MusicGameSettleReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MusicGameSettleReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MusicGameSettleReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18MusicGameSettleReq.proto\"\xd4\x04\n\x12MusicGameSettleReq\x12\x1f\
    \n\x0bcorrect_hit\x18\x07\x20\x01(\rR\ncorrectHit\x12!\n\x0bOEAHADEGEOA\
    \x18\xc7\x02\x20\x03(\rR\x0bOEAHADEGEOA\x12\x19\n\x08ugc_guid\x18\x01\
    \x20\x01(\x04R\x07ugcGuid\x12!\n\x0bBPNLLFDJJOL\x18\xb0\t\x20\x01(\x08R\
    \x0bBPNLLFDJJOL\x12\x14\n\x05score\x18\x08\x20\x01(\rR\x05score\x12\x20\
    \n\x0bMECALGKAKJK\x18\x0e\x20\x01(\rR\x0bMECALGKAKJK\x12\x1b\n\tmax_comb\
    o\x18\x02\x20\x01(\rR\x08maxCombo\x12\x20\n\x0bKPPICEDHMPN\x18\x05\x20\
    \x03(\rR\x0bKPPICEDHMPN\x12\x15\n\x05speed\x18\xdc\x0c\x20\x01(\x02R\x05\
    speed\x12!\n\x0bKDAOEDCLEFG\x18\xd5\r\x20\x01(\rR\x0bKDAOEDCLEFG\x12\"\n\
    \ris_save_score\x18\x06\x20\x01(\x08R\x0bisSaveScore\x12!\n\x0bMAMHOPGFO\
    KD\x18\xae\t\x20\x01(\x08R\x0bMAMHOPGFOKD\x12\x20\n\x0bNMPPJPOJFDC\x18\
    \x04\x20\x01(\rR\x0bNMPPJPOJFDC\x12$\n\x0emusic_basic_id\x18\x0b\x20\x01\
    (\rR\x0cmusicBasicId\x12\x14\n\x05combo\x18\t\x20\x01(\rR\x05combo\x12\
    \x20\n\x0bNGALDEAEBHG\x18\x0f\x20\x01(\rR\x0bNGALDEAEBHG\x12!\n\x0bFCFNK\
    IDLDHJ\x18\xaa\x07\x20\x01(\rR\x0bFCFNKIDLDHJ\x12!\n\x0bGDOMKIHOKCC\x18\
    \xeb\x05\x20\x01(\rR\x0bGDOMKIHOKCCB\x1b\n\x19emu.grasscutter.net.protob\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MusicGameSettleReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
