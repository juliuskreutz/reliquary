// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ResVersionConfig.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ResVersionConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ResVersionConfig {
    // message fields
    // @@protoc_insertion_point(field:ResVersionConfig.version)
    pub version: u32,
    // @@protoc_insertion_point(field:ResVersionConfig.relogin)
    pub relogin: bool,
    // @@protoc_insertion_point(field:ResVersionConfig.md5)
    pub md5: ::std::string::String,
    // @@protoc_insertion_point(field:ResVersionConfig.release_total_size)
    pub release_total_size: ::std::string::String,
    // @@protoc_insertion_point(field:ResVersionConfig.version_suffix)
    pub version_suffix: ::std::string::String,
    // @@protoc_insertion_point(field:ResVersionConfig.branch)
    pub branch: ::std::string::String,
    // @@protoc_insertion_point(field:ResVersionConfig.next_script_version)
    pub next_script_version: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ResVersionConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResVersionConfig {
    fn default() -> &'a ResVersionConfig {
        <ResVersionConfig as ::protobuf::Message>::default_instance()
    }
}

impl ResVersionConfig {
    pub fn new() -> ResVersionConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &ResVersionConfig| { &m.version },
            |m: &mut ResVersionConfig| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relogin",
            |m: &ResVersionConfig| { &m.relogin },
            |m: &mut ResVersionConfig| { &mut m.relogin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "md5",
            |m: &ResVersionConfig| { &m.md5 },
            |m: &mut ResVersionConfig| { &mut m.md5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "release_total_size",
            |m: &ResVersionConfig| { &m.release_total_size },
            |m: &mut ResVersionConfig| { &mut m.release_total_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version_suffix",
            |m: &ResVersionConfig| { &m.version_suffix },
            |m: &mut ResVersionConfig| { &mut m.version_suffix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "branch",
            |m: &ResVersionConfig| { &m.branch },
            |m: &mut ResVersionConfig| { &mut m.branch },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next_script_version",
            |m: &ResVersionConfig| { &m.next_script_version },
            |m: &mut ResVersionConfig| { &mut m.next_script_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResVersionConfig>(
            "ResVersionConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResVersionConfig {
    const NAME: &'static str = "ResVersionConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = is.read_uint32()?;
                },
                16 => {
                    self.relogin = is.read_bool()?;
                },
                26 => {
                    self.md5 = is.read_string()?;
                },
                34 => {
                    self.release_total_size = is.read_string()?;
                },
                42 => {
                    self.version_suffix = is.read_string()?;
                },
                50 => {
                    self.branch = is.read_string()?;
                },
                58 => {
                    self.next_script_version = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.version);
        }
        if self.relogin != false {
            my_size += 1 + 1;
        }
        if !self.md5.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.md5);
        }
        if !self.release_total_size.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.release_total_size);
        }
        if !self.version_suffix.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.version_suffix);
        }
        if !self.branch.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.branch);
        }
        if !self.next_script_version.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.next_script_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if self.relogin != false {
            os.write_bool(2, self.relogin)?;
        }
        if !self.md5.is_empty() {
            os.write_string(3, &self.md5)?;
        }
        if !self.release_total_size.is_empty() {
            os.write_string(4, &self.release_total_size)?;
        }
        if !self.version_suffix.is_empty() {
            os.write_string(5, &self.version_suffix)?;
        }
        if !self.branch.is_empty() {
            os.write_string(6, &self.branch)?;
        }
        if !self.next_script_version.is_empty() {
            os.write_string(7, &self.next_script_version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResVersionConfig {
        ResVersionConfig::new()
    }

    fn clear(&mut self) {
        self.version = 0;
        self.relogin = false;
        self.md5.clear();
        self.release_total_size.clear();
        self.version_suffix.clear();
        self.branch.clear();
        self.next_script_version.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResVersionConfig {
        static instance: ResVersionConfig = ResVersionConfig {
            version: 0,
            relogin: false,
            md5: ::std::string::String::new(),
            release_total_size: ::std::string::String::new(),
            version_suffix: ::std::string::String::new(),
            branch: ::std::string::String::new(),
            next_script_version: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResVersionConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResVersionConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResVersionConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResVersionConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16ResVersionConfig.proto\"\xf5\x01\n\x10ResVersionConfig\x12\x18\n\
    \x07version\x18\x01\x20\x01(\rR\x07version\x12\x18\n\x07relogin\x18\x02\
    \x20\x01(\x08R\x07relogin\x12\x10\n\x03md5\x18\x03\x20\x01(\tR\x03md5\
    \x12,\n\x12release_total_size\x18\x04\x20\x01(\tR\x10releaseTotalSize\
    \x12%\n\x0eversion_suffix\x18\x05\x20\x01(\tR\rversionSuffix\x12\x16\n\
    \x06branch\x18\x06\x20\x01(\tR\x06branch\x12.\n\x13next_script_version\
    \x18\x07\x20\x01(\tR\x11nextScriptVersionB\x1b\n\x19emu.grasscutter.net.\
    protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ResVersionConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
