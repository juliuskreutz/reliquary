// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlayerDieType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:PlayerDieType)
pub enum PlayerDieType {
    // @@protoc_insertion_point(enum_value:PlayerDieType.PLAYER_DIE_TYPE_NONE)
    PLAYER_DIE_TYPE_NONE = 0,
    // @@protoc_insertion_point(enum_value:PlayerDieType.PLAYER_DIE_TYPE_KILL_BY_MONSTER)
    PLAYER_DIE_TYPE_KILL_BY_MONSTER = 1,
    // @@protoc_insertion_point(enum_value:PlayerDieType.PLAYER_DIE_TYPE_KILL_BY_GEAR)
    PLAYER_DIE_TYPE_KILL_BY_GEAR = 2,
    // @@protoc_insertion_point(enum_value:PlayerDieType.PLAYER_DIE_TYPE_FALL)
    PLAYER_DIE_TYPE_FALL = 3,
    // @@protoc_insertion_point(enum_value:PlayerDieType.PLAYER_DIE_TYPE_DRAWN)
    PLAYER_DIE_TYPE_DRAWN = 4,
    // @@protoc_insertion_point(enum_value:PlayerDieType.PLAYER_DIE_TYPE_ABYSS)
    PLAYER_DIE_TYPE_ABYSS = 5,
    // @@protoc_insertion_point(enum_value:PlayerDieType.PLAYER_DIE_TYPE_GM)
    PLAYER_DIE_TYPE_GM = 6,
    // @@protoc_insertion_point(enum_value:PlayerDieType.PLAYER_DIE_TYPE_CLIMATE_COLD)
    PLAYER_DIE_TYPE_CLIMATE_COLD = 7,
    // @@protoc_insertion_point(enum_value:PlayerDieType.PLAYER_DIE_TYPE_STORM_LIGHTING)
    PLAYER_DIE_TYPE_STORM_LIGHTING = 8,
    // @@protoc_insertion_point(enum_value:PlayerDieType.PLAYER_DIE_TYPE_DIRTY_WATER_EROSION)
    PLAYER_DIE_TYPE_DIRTY_WATER_EROSION = 9,
}

impl ::protobuf::Enum for PlayerDieType {
    const NAME: &'static str = "PlayerDieType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PlayerDieType> {
        match value {
            0 => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_NONE),
            1 => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_KILL_BY_MONSTER),
            2 => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_KILL_BY_GEAR),
            3 => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_FALL),
            4 => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_DRAWN),
            5 => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_ABYSS),
            6 => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_GM),
            7 => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_CLIMATE_COLD),
            8 => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_STORM_LIGHTING),
            9 => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_DIRTY_WATER_EROSION),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<PlayerDieType> {
        match str {
            "PLAYER_DIE_TYPE_NONE" => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_NONE),
            "PLAYER_DIE_TYPE_KILL_BY_MONSTER" => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_KILL_BY_MONSTER),
            "PLAYER_DIE_TYPE_KILL_BY_GEAR" => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_KILL_BY_GEAR),
            "PLAYER_DIE_TYPE_FALL" => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_FALL),
            "PLAYER_DIE_TYPE_DRAWN" => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_DRAWN),
            "PLAYER_DIE_TYPE_ABYSS" => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_ABYSS),
            "PLAYER_DIE_TYPE_GM" => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_GM),
            "PLAYER_DIE_TYPE_CLIMATE_COLD" => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_CLIMATE_COLD),
            "PLAYER_DIE_TYPE_STORM_LIGHTING" => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_STORM_LIGHTING),
            "PLAYER_DIE_TYPE_DIRTY_WATER_EROSION" => ::std::option::Option::Some(PlayerDieType::PLAYER_DIE_TYPE_DIRTY_WATER_EROSION),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [PlayerDieType] = &[
        PlayerDieType::PLAYER_DIE_TYPE_NONE,
        PlayerDieType::PLAYER_DIE_TYPE_KILL_BY_MONSTER,
        PlayerDieType::PLAYER_DIE_TYPE_KILL_BY_GEAR,
        PlayerDieType::PLAYER_DIE_TYPE_FALL,
        PlayerDieType::PLAYER_DIE_TYPE_DRAWN,
        PlayerDieType::PLAYER_DIE_TYPE_ABYSS,
        PlayerDieType::PLAYER_DIE_TYPE_GM,
        PlayerDieType::PLAYER_DIE_TYPE_CLIMATE_COLD,
        PlayerDieType::PLAYER_DIE_TYPE_STORM_LIGHTING,
        PlayerDieType::PLAYER_DIE_TYPE_DIRTY_WATER_EROSION,
    ];
}

impl ::protobuf::EnumFull for PlayerDieType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("PlayerDieType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for PlayerDieType {
    fn default() -> Self {
        PlayerDieType::PLAYER_DIE_TYPE_NONE
    }
}

impl PlayerDieType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<PlayerDieType>("PlayerDieType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13PlayerDieType.proto*\xc7\x02\n\rPlayerDieType\x12\x18\n\x14PLAYER_\
    DIE_TYPE_NONE\x10\0\x12#\n\x1fPLAYER_DIE_TYPE_KILL_BY_MONSTER\x10\x01\
    \x12\x20\n\x1cPLAYER_DIE_TYPE_KILL_BY_GEAR\x10\x02\x12\x18\n\x14PLAYER_D\
    IE_TYPE_FALL\x10\x03\x12\x19\n\x15PLAYER_DIE_TYPE_DRAWN\x10\x04\x12\x19\
    \n\x15PLAYER_DIE_TYPE_ABYSS\x10\x05\x12\x16\n\x12PLAYER_DIE_TYPE_GM\x10\
    \x06\x12\x20\n\x1cPLAYER_DIE_TYPE_CLIMATE_COLD\x10\x07\x12\"\n\x1ePLAYER\
    _DIE_TYPE_STORM_LIGHTING\x10\x08\x12'\n#PLAYER_DIE_TYPE_DIRTY_WATER_EROS\
    ION\x10\tB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(PlayerDieType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
