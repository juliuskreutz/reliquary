// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CheckAddItemExceedLimitNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CheckAddItemExceedLimitNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CheckAddItemExceedLimitNotify {
    // message fields
    // @@protoc_insertion_point(field:CheckAddItemExceedLimitNotify.JJHKBJLIPNA)
    pub JJHKBJLIPNA: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CheckAddItemExceedLimitNotify.is_drop)
    pub is_drop: bool,
    // @@protoc_insertion_point(field:CheckAddItemExceedLimitNotify.msg_type)
    pub msg_type: ::protobuf::EnumOrUnknown<check_add_item_exceed_limit_notify::ItemExceedLimitMsgType>,
    // @@protoc_insertion_point(field:CheckAddItemExceedLimitNotify.OPFPLNLHLMA)
    pub OPFPLNLHLMA: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CheckAddItemExceedLimitNotify.reason)
    pub reason: u32,
    // special fields
    // @@protoc_insertion_point(special_field:CheckAddItemExceedLimitNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CheckAddItemExceedLimitNotify {
    fn default() -> &'a CheckAddItemExceedLimitNotify {
        <CheckAddItemExceedLimitNotify as ::protobuf::Message>::default_instance()
    }
}

impl CheckAddItemExceedLimitNotify {
    pub fn new() -> CheckAddItemExceedLimitNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JJHKBJLIPNA",
            |m: &CheckAddItemExceedLimitNotify| { &m.JJHKBJLIPNA },
            |m: &mut CheckAddItemExceedLimitNotify| { &mut m.JJHKBJLIPNA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_drop",
            |m: &CheckAddItemExceedLimitNotify| { &m.is_drop },
            |m: &mut CheckAddItemExceedLimitNotify| { &mut m.is_drop },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg_type",
            |m: &CheckAddItemExceedLimitNotify| { &m.msg_type },
            |m: &mut CheckAddItemExceedLimitNotify| { &mut m.msg_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OPFPLNLHLMA",
            |m: &CheckAddItemExceedLimitNotify| { &m.OPFPLNLHLMA },
            |m: &mut CheckAddItemExceedLimitNotify| { &mut m.OPFPLNLHLMA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reason",
            |m: &CheckAddItemExceedLimitNotify| { &m.reason },
            |m: &mut CheckAddItemExceedLimitNotify| { &mut m.reason },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CheckAddItemExceedLimitNotify>(
            "CheckAddItemExceedLimitNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CheckAddItemExceedLimitNotify {
    const NAME: &'static str = "CheckAddItemExceedLimitNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.JJHKBJLIPNA)?;
                },
                88 => {
                    self.JJHKBJLIPNA.push(is.read_uint32()?);
                },
                96 => {
                    self.is_drop = is.read_bool()?;
                },
                8 => {
                    self.msg_type = is.read_enum_or_unknown()?;
                },
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.OPFPLNLHLMA)?;
                },
                104 => {
                    self.OPFPLNLHLMA.push(is.read_uint32()?);
                },
                24 => {
                    self.reason = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.JJHKBJLIPNA {
            my_size += ::protobuf::rt::uint32_size(11, *value);
        };
        if self.is_drop != false {
            my_size += 1 + 1;
        }
        if self.msg_type != ::protobuf::EnumOrUnknown::new(check_add_item_exceed_limit_notify::ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_DEFAULT) {
            my_size += ::protobuf::rt::int32_size(1, self.msg_type.value());
        }
        for value in &self.OPFPLNLHLMA {
            my_size += ::protobuf::rt::uint32_size(13, *value);
        };
        if self.reason != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.reason);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.JJHKBJLIPNA {
            os.write_uint32(11, *v)?;
        };
        if self.is_drop != false {
            os.write_bool(12, self.is_drop)?;
        }
        if self.msg_type != ::protobuf::EnumOrUnknown::new(check_add_item_exceed_limit_notify::ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_DEFAULT) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.msg_type))?;
        }
        for v in &self.OPFPLNLHLMA {
            os.write_uint32(13, *v)?;
        };
        if self.reason != 0 {
            os.write_uint32(3, self.reason)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CheckAddItemExceedLimitNotify {
        CheckAddItemExceedLimitNotify::new()
    }

    fn clear(&mut self) {
        self.JJHKBJLIPNA.clear();
        self.is_drop = false;
        self.msg_type = ::protobuf::EnumOrUnknown::new(check_add_item_exceed_limit_notify::ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_DEFAULT);
        self.OPFPLNLHLMA.clear();
        self.reason = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CheckAddItemExceedLimitNotify {
        static instance: CheckAddItemExceedLimitNotify = CheckAddItemExceedLimitNotify {
            JJHKBJLIPNA: ::std::vec::Vec::new(),
            is_drop: false,
            msg_type: ::protobuf::EnumOrUnknown::from_i32(0),
            OPFPLNLHLMA: ::std::vec::Vec::new(),
            reason: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CheckAddItemExceedLimitNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CheckAddItemExceedLimitNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CheckAddItemExceedLimitNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckAddItemExceedLimitNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CheckAddItemExceedLimitNotify`
pub mod check_add_item_exceed_limit_notify {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType)
    pub enum ItemExceedLimitMsgType {
        // @@protoc_insertion_point(enum_value:CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType.ITEM_EXCEED_LIMIT_MSG_DEFAULT)
        ITEM_EXCEED_LIMIT_MSG_DEFAULT = 0,
        // @@protoc_insertion_point(enum_value:CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType.ITEM_EXCEED_LIMIT_MSG_TEXT)
        ITEM_EXCEED_LIMIT_MSG_TEXT = 1,
        // @@protoc_insertion_point(enum_value:CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType.ITEM_EXCEED_LIMIT_MSG_DIALOG)
        ITEM_EXCEED_LIMIT_MSG_DIALOG = 2,
        // @@protoc_insertion_point(enum_value:CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType.ITEM_EXCEED_LIMIT_MSG_DIALOG_NONBLOCK)
        ITEM_EXCEED_LIMIT_MSG_DIALOG_NONBLOCK = 3,
    }

    impl ::protobuf::Enum for ItemExceedLimitMsgType {
        const NAME: &'static str = "ItemExceedLimitMsgType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ItemExceedLimitMsgType> {
            match value {
                0 => ::std::option::Option::Some(ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_DEFAULT),
                1 => ::std::option::Option::Some(ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_TEXT),
                2 => ::std::option::Option::Some(ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_DIALOG),
                3 => ::std::option::Option::Some(ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_DIALOG_NONBLOCK),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ItemExceedLimitMsgType> {
            match str {
                "ITEM_EXCEED_LIMIT_MSG_DEFAULT" => ::std::option::Option::Some(ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_DEFAULT),
                "ITEM_EXCEED_LIMIT_MSG_TEXT" => ::std::option::Option::Some(ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_TEXT),
                "ITEM_EXCEED_LIMIT_MSG_DIALOG" => ::std::option::Option::Some(ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_DIALOG),
                "ITEM_EXCEED_LIMIT_MSG_DIALOG_NONBLOCK" => ::std::option::Option::Some(ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_DIALOG_NONBLOCK),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ItemExceedLimitMsgType] = &[
            ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_DEFAULT,
            ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_TEXT,
            ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_DIALOG,
            ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_DIALOG_NONBLOCK,
        ];
    }

    impl ::protobuf::EnumFull for ItemExceedLimitMsgType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ItemExceedLimitMsgType {
        fn default() -> Self {
            ItemExceedLimitMsgType::ITEM_EXCEED_LIMIT_MSG_DEFAULT
        }
    }

    impl ItemExceedLimitMsgType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ItemExceedLimitMsgType>("CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#CheckAddItemExceedLimitNotify.proto\"\x91\x03\n\x1dCheckAddItemExceed\
    LimitNotify\x12\x20\n\x0bJJHKBJLIPNA\x18\x0b\x20\x03(\rR\x0bJJHKBJLIPNA\
    \x12\x17\n\x07is_drop\x18\x0c\x20\x01(\x08R\x06isDrop\x12P\n\x08msg_type\
    \x18\x01\x20\x01(\x0e25.CheckAddItemExceedLimitNotify.ItemExceedLimitMsg\
    TypeR\x07msgType\x12\x20\n\x0bOPFPLNLHLMA\x18\r\x20\x03(\rR\x0bOPFPLNLHL\
    MA\x12\x16\n\x06reason\x18\x03\x20\x01(\rR\x06reason\"\xa8\x01\n\x16Item\
    ExceedLimitMsgType\x12!\n\x1dITEM_EXCEED_LIMIT_MSG_DEFAULT\x10\0\x12\x1e\
    \n\x1aITEM_EXCEED_LIMIT_MSG_TEXT\x10\x01\x12\x20\n\x1cITEM_EXCEED_LIMIT_\
    MSG_DIALOG\x10\x02\x12)\n%ITEM_EXCEED_LIMIT_MSG_DIALOG_NONBLOCK\x10\x03B\
    \x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CheckAddItemExceedLimitNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(check_add_item_exceed_limit_notify::ItemExceedLimitMsgType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
