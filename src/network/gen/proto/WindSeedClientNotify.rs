// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `WindSeedClientNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:WindSeedClientNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct WindSeedClientNotify {
    // message oneof groups
    pub notify: ::std::option::Option<wind_seed_client_notify::Notify>,
    // special fields
    // @@protoc_insertion_point(special_field:WindSeedClientNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WindSeedClientNotify {
    fn default() -> &'a WindSeedClientNotify {
        <WindSeedClientNotify as ::protobuf::Message>::default_instance()
    }
}

impl WindSeedClientNotify {
    pub fn new() -> WindSeedClientNotify {
        ::std::default::Default::default()
    }

    // .WindSeedClientNotify.RefreshNotify refresh_notify = 4;

    pub fn refresh_notify(&self) -> &wind_seed_client_notify::RefreshNotify {
        match self.notify {
            ::std::option::Option::Some(wind_seed_client_notify::Notify::RefreshNotify(ref v)) => v,
            _ => <wind_seed_client_notify::RefreshNotify as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_refresh_notify(&mut self) {
        self.notify = ::std::option::Option::None;
    }

    pub fn has_refresh_notify(&self) -> bool {
        match self.notify {
            ::std::option::Option::Some(wind_seed_client_notify::Notify::RefreshNotify(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_refresh_notify(&mut self, v: wind_seed_client_notify::RefreshNotify) {
        self.notify = ::std::option::Option::Some(wind_seed_client_notify::Notify::RefreshNotify(v))
    }

    // Mutable pointer to the field.
    pub fn mut_refresh_notify(&mut self) -> &mut wind_seed_client_notify::RefreshNotify {
        if let ::std::option::Option::Some(wind_seed_client_notify::Notify::RefreshNotify(_)) = self.notify {
        } else {
            self.notify = ::std::option::Option::Some(wind_seed_client_notify::Notify::RefreshNotify(wind_seed_client_notify::RefreshNotify::new()));
        }
        match self.notify {
            ::std::option::Option::Some(wind_seed_client_notify::Notify::RefreshNotify(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_refresh_notify(&mut self) -> wind_seed_client_notify::RefreshNotify {
        if self.has_refresh_notify() {
            match self.notify.take() {
                ::std::option::Option::Some(wind_seed_client_notify::Notify::RefreshNotify(v)) => v,
                _ => panic!(),
            }
        } else {
            wind_seed_client_notify::RefreshNotify::new()
        }
    }

    // .WindSeedClientNotify.AddWindBulletNotify add_wind_bullet_notify = 13;

    pub fn add_wind_bullet_notify(&self) -> &wind_seed_client_notify::AddWindBulletNotify {
        match self.notify {
            ::std::option::Option::Some(wind_seed_client_notify::Notify::AddWindBulletNotify(ref v)) => v,
            _ => <wind_seed_client_notify::AddWindBulletNotify as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_add_wind_bullet_notify(&mut self) {
        self.notify = ::std::option::Option::None;
    }

    pub fn has_add_wind_bullet_notify(&self) -> bool {
        match self.notify {
            ::std::option::Option::Some(wind_seed_client_notify::Notify::AddWindBulletNotify(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_add_wind_bullet_notify(&mut self, v: wind_seed_client_notify::AddWindBulletNotify) {
        self.notify = ::std::option::Option::Some(wind_seed_client_notify::Notify::AddWindBulletNotify(v))
    }

    // Mutable pointer to the field.
    pub fn mut_add_wind_bullet_notify(&mut self) -> &mut wind_seed_client_notify::AddWindBulletNotify {
        if let ::std::option::Option::Some(wind_seed_client_notify::Notify::AddWindBulletNotify(_)) = self.notify {
        } else {
            self.notify = ::std::option::Option::Some(wind_seed_client_notify::Notify::AddWindBulletNotify(wind_seed_client_notify::AddWindBulletNotify::new()));
        }
        match self.notify {
            ::std::option::Option::Some(wind_seed_client_notify::Notify::AddWindBulletNotify(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_add_wind_bullet_notify(&mut self) -> wind_seed_client_notify::AddWindBulletNotify {
        if self.has_add_wind_bullet_notify() {
            match self.notify.take() {
                ::std::option::Option::Some(wind_seed_client_notify::Notify::AddWindBulletNotify(v)) => v,
                _ => panic!(),
            }
        } else {
            wind_seed_client_notify::AddWindBulletNotify::new()
        }
    }

    // .WindSeedClientNotify.AreaNotify area_notify = 14;

    pub fn area_notify(&self) -> &wind_seed_client_notify::AreaNotify {
        match self.notify {
            ::std::option::Option::Some(wind_seed_client_notify::Notify::AreaNotify(ref v)) => v,
            _ => <wind_seed_client_notify::AreaNotify as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_area_notify(&mut self) {
        self.notify = ::std::option::Option::None;
    }

    pub fn has_area_notify(&self) -> bool {
        match self.notify {
            ::std::option::Option::Some(wind_seed_client_notify::Notify::AreaNotify(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_area_notify(&mut self, v: wind_seed_client_notify::AreaNotify) {
        self.notify = ::std::option::Option::Some(wind_seed_client_notify::Notify::AreaNotify(v))
    }

    // Mutable pointer to the field.
    pub fn mut_area_notify(&mut self) -> &mut wind_seed_client_notify::AreaNotify {
        if let ::std::option::Option::Some(wind_seed_client_notify::Notify::AreaNotify(_)) = self.notify {
        } else {
            self.notify = ::std::option::Option::Some(wind_seed_client_notify::Notify::AreaNotify(wind_seed_client_notify::AreaNotify::new()));
        }
        match self.notify {
            ::std::option::Option::Some(wind_seed_client_notify::Notify::AreaNotify(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_area_notify(&mut self) -> wind_seed_client_notify::AreaNotify {
        if self.has_area_notify() {
            match self.notify.take() {
                ::std::option::Option::Some(wind_seed_client_notify::Notify::AreaNotify(v)) => v,
                _ => panic!(),
            }
        } else {
            wind_seed_client_notify::AreaNotify::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, wind_seed_client_notify::RefreshNotify>(
            "refresh_notify",
            WindSeedClientNotify::has_refresh_notify,
            WindSeedClientNotify::refresh_notify,
            WindSeedClientNotify::mut_refresh_notify,
            WindSeedClientNotify::set_refresh_notify,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, wind_seed_client_notify::AddWindBulletNotify>(
            "add_wind_bullet_notify",
            WindSeedClientNotify::has_add_wind_bullet_notify,
            WindSeedClientNotify::add_wind_bullet_notify,
            WindSeedClientNotify::mut_add_wind_bullet_notify,
            WindSeedClientNotify::set_add_wind_bullet_notify,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, wind_seed_client_notify::AreaNotify>(
            "area_notify",
            WindSeedClientNotify::has_area_notify,
            WindSeedClientNotify::area_notify,
            WindSeedClientNotify::mut_area_notify,
            WindSeedClientNotify::set_area_notify,
        ));
        oneofs.push(wind_seed_client_notify::Notify::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WindSeedClientNotify>(
            "WindSeedClientNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WindSeedClientNotify {
    const NAME: &'static str = "WindSeedClientNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    self.notify = ::std::option::Option::Some(wind_seed_client_notify::Notify::RefreshNotify(is.read_message()?));
                },
                106 => {
                    self.notify = ::std::option::Option::Some(wind_seed_client_notify::Notify::AddWindBulletNotify(is.read_message()?));
                },
                114 => {
                    self.notify = ::std::option::Option::Some(wind_seed_client_notify::Notify::AreaNotify(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.notify {
            match v {
                &wind_seed_client_notify::Notify::RefreshNotify(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &wind_seed_client_notify::Notify::AddWindBulletNotify(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &wind_seed_client_notify::Notify::AreaNotify(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.notify {
            match v {
                &wind_seed_client_notify::Notify::RefreshNotify(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &wind_seed_client_notify::Notify::AddWindBulletNotify(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &wind_seed_client_notify::Notify::AreaNotify(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WindSeedClientNotify {
        WindSeedClientNotify::new()
    }

    fn clear(&mut self) {
        self.notify = ::std::option::Option::None;
        self.notify = ::std::option::Option::None;
        self.notify = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WindSeedClientNotify {
        static instance: WindSeedClientNotify = WindSeedClientNotify {
            notify: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WindSeedClientNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WindSeedClientNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WindSeedClientNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WindSeedClientNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `WindSeedClientNotify`
pub mod wind_seed_client_notify {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:WindSeedClientNotify.notify)
    pub enum Notify {
        // @@protoc_insertion_point(oneof_field:WindSeedClientNotify.refresh_notify)
        RefreshNotify(RefreshNotify),
        // @@protoc_insertion_point(oneof_field:WindSeedClientNotify.add_wind_bullet_notify)
        AddWindBulletNotify(AddWindBulletNotify),
        // @@protoc_insertion_point(oneof_field:WindSeedClientNotify.area_notify)
        AreaNotify(AreaNotify),
    }

    impl ::protobuf::Oneof for Notify {
    }

    impl ::protobuf::OneofFull for Notify {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::WindSeedClientNotify as ::protobuf::MessageFull>::descriptor().oneof_by_name("notify").unwrap()).clone()
        }
    }

    impl Notify {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Notify>("notify")
        }
    }
    // @@protoc_insertion_point(message:WindSeedClientNotify.RefreshNotify)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RefreshNotify {
        // message fields
        // @@protoc_insertion_point(field:WindSeedClientNotify.RefreshNotify.refresh_num)
        pub refresh_num: u32,
        // special fields
        // @@protoc_insertion_point(special_field:WindSeedClientNotify.RefreshNotify.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RefreshNotify {
        fn default() -> &'a RefreshNotify {
            <RefreshNotify as ::protobuf::Message>::default_instance()
        }
    }

    impl RefreshNotify {
        pub fn new() -> RefreshNotify {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "refresh_num",
                |m: &RefreshNotify| { &m.refresh_num },
                |m: &mut RefreshNotify| { &mut m.refresh_num },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RefreshNotify>(
                "WindSeedClientNotify.RefreshNotify",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RefreshNotify {
        const NAME: &'static str = "RefreshNotify";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    32 => {
                        self.refresh_num = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.refresh_num != 0 {
                my_size += ::protobuf::rt::uint32_size(4, self.refresh_num);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.refresh_num != 0 {
                os.write_uint32(4, self.refresh_num)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RefreshNotify {
            RefreshNotify::new()
        }

        fn clear(&mut self) {
            self.refresh_num = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RefreshNotify {
            static instance: RefreshNotify = RefreshNotify {
                refresh_num: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RefreshNotify {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("WindSeedClientNotify.RefreshNotify").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RefreshNotify {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RefreshNotify {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:WindSeedClientNotify.AddWindBulletNotify)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AddWindBulletNotify {
        // message fields
        // @@protoc_insertion_point(field:WindSeedClientNotify.AddWindBulletNotify.seed_pos)
        pub seed_pos: ::protobuf::MessageField<super::super::Vector::Vector>,
        // @@protoc_insertion_point(field:WindSeedClientNotify.AddWindBulletNotify.HCHIGHEKMPI)
        pub HCHIGHEKMPI: u32,
        // @@protoc_insertion_point(field:WindSeedClientNotify.AddWindBulletNotify.FJOPGEEAHNB)
        pub FJOPGEEAHNB: u32,
        // special fields
        // @@protoc_insertion_point(special_field:WindSeedClientNotify.AddWindBulletNotify.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AddWindBulletNotify {
        fn default() -> &'a AddWindBulletNotify {
            <AddWindBulletNotify as ::protobuf::Message>::default_instance()
        }
    }

    impl AddWindBulletNotify {
        pub fn new() -> AddWindBulletNotify {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::Vector::Vector>(
                "seed_pos",
                |m: &AddWindBulletNotify| { &m.seed_pos },
                |m: &mut AddWindBulletNotify| { &mut m.seed_pos },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "HCHIGHEKMPI",
                |m: &AddWindBulletNotify| { &m.HCHIGHEKMPI },
                |m: &mut AddWindBulletNotify| { &mut m.HCHIGHEKMPI },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "FJOPGEEAHNB",
                |m: &AddWindBulletNotify| { &m.FJOPGEEAHNB },
                |m: &mut AddWindBulletNotify| { &mut m.FJOPGEEAHNB },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddWindBulletNotify>(
                "WindSeedClientNotify.AddWindBulletNotify",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for AddWindBulletNotify {
        const NAME: &'static str = "AddWindBulletNotify";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    42 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.seed_pos)?;
                    },
                    96 => {
                        self.HCHIGHEKMPI = is.read_uint32()?;
                    },
                    8 => {
                        self.FJOPGEEAHNB = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.seed_pos.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.HCHIGHEKMPI != 0 {
                my_size += ::protobuf::rt::uint32_size(12, self.HCHIGHEKMPI);
            }
            if self.FJOPGEEAHNB != 0 {
                my_size += ::protobuf::rt::uint32_size(1, self.FJOPGEEAHNB);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.seed_pos.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
            }
            if self.HCHIGHEKMPI != 0 {
                os.write_uint32(12, self.HCHIGHEKMPI)?;
            }
            if self.FJOPGEEAHNB != 0 {
                os.write_uint32(1, self.FJOPGEEAHNB)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AddWindBulletNotify {
            AddWindBulletNotify::new()
        }

        fn clear(&mut self) {
            self.seed_pos.clear();
            self.HCHIGHEKMPI = 0;
            self.FJOPGEEAHNB = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AddWindBulletNotify {
            static instance: AddWindBulletNotify = AddWindBulletNotify {
                seed_pos: ::protobuf::MessageField::none(),
                HCHIGHEKMPI: 0,
                FJOPGEEAHNB: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for AddWindBulletNotify {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("WindSeedClientNotify.AddWindBulletNotify").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for AddWindBulletNotify {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for AddWindBulletNotify {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:WindSeedClientNotify.AreaNotify)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AreaNotify {
        // message fields
        // @@protoc_insertion_point(field:WindSeedClientNotify.AreaNotify.area_code)
        pub area_code: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:WindSeedClientNotify.AreaNotify.area_type)
        pub area_type: u32,
        // @@protoc_insertion_point(field:WindSeedClientNotify.AreaNotify.area_id)
        pub area_id: u32,
        // special fields
        // @@protoc_insertion_point(special_field:WindSeedClientNotify.AreaNotify.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AreaNotify {
        fn default() -> &'a AreaNotify {
            <AreaNotify as ::protobuf::Message>::default_instance()
        }
    }

    impl AreaNotify {
        pub fn new() -> AreaNotify {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "area_code",
                |m: &AreaNotify| { &m.area_code },
                |m: &mut AreaNotify| { &mut m.area_code },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "area_type",
                |m: &AreaNotify| { &m.area_type },
                |m: &mut AreaNotify| { &mut m.area_type },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "area_id",
                |m: &AreaNotify| { &m.area_id },
                |m: &mut AreaNotify| { &mut m.area_id },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AreaNotify>(
                "WindSeedClientNotify.AreaNotify",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for AreaNotify {
        const NAME: &'static str = "AreaNotify";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    58 => {
                        self.area_code = is.read_bytes()?;
                    },
                    32 => {
                        self.area_type = is.read_uint32()?;
                    },
                    40 => {
                        self.area_id = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.area_code.is_empty() {
                my_size += ::protobuf::rt::bytes_size(7, &self.area_code);
            }
            if self.area_type != 0 {
                my_size += ::protobuf::rt::uint32_size(4, self.area_type);
            }
            if self.area_id != 0 {
                my_size += ::protobuf::rt::uint32_size(5, self.area_id);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.area_code.is_empty() {
                os.write_bytes(7, &self.area_code)?;
            }
            if self.area_type != 0 {
                os.write_uint32(4, self.area_type)?;
            }
            if self.area_id != 0 {
                os.write_uint32(5, self.area_id)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AreaNotify {
            AreaNotify::new()
        }

        fn clear(&mut self) {
            self.area_code.clear();
            self.area_type = 0;
            self.area_id = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AreaNotify {
            static instance: AreaNotify = AreaNotify {
                area_code: ::std::vec::Vec::new(),
                area_type: 0,
                area_id: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for AreaNotify {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("WindSeedClientNotify.AreaNotify").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for AreaNotify {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for AreaNotify {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aWindSeedClientNotify.proto\x1a\x0cVector.proto\"\xa7\x04\n\x14Wind\
    SeedClientNotify\x12L\n\x0erefresh_notify\x18\x04\x20\x01(\x0b2#.WindSee\
    dClientNotify.RefreshNotifyH\0R\rrefreshNotify\x12`\n\x16add_wind_bullet\
    _notify\x18\r\x20\x01(\x0b2).WindSeedClientNotify.AddWindBulletNotifyH\0\
    R\x13addWindBulletNotify\x12C\n\x0barea_notify\x18\x0e\x20\x01(\x0b2\x20\
    .WindSeedClientNotify.AreaNotifyH\0R\nareaNotify\x1a0\n\rRefreshNotify\
    \x12\x1f\n\x0brefresh_num\x18\x04\x20\x01(\rR\nrefreshNum\x1a}\n\x13AddW\
    indBulletNotify\x12\"\n\x08seed_pos\x18\x05\x20\x01(\x0b2\x07.VectorR\
    \x07seedPos\x12\x20\n\x0bHCHIGHEKMPI\x18\x0c\x20\x01(\rR\x0bHCHIGHEKMPI\
    \x12\x20\n\x0bFJOPGEEAHNB\x18\x01\x20\x01(\rR\x0bFJOPGEEAHNB\x1a_\n\nAre\
    aNotify\x12\x1b\n\tarea_code\x18\x07\x20\x01(\x0cR\x08areaCode\x12\x1b\n\
    \tarea_type\x18\x04\x20\x01(\rR\x08areaType\x12\x17\n\x07area_id\x18\x05\
    \x20\x01(\rR\x06areaIdB\x08\n\x06notifyB\x1b\n\x19emu.grasscutter.net.pr\
    otob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::Vector::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(WindSeedClientNotify::generated_message_descriptor_data());
            messages.push(wind_seed_client_notify::RefreshNotify::generated_message_descriptor_data());
            messages.push(wind_seed_client_notify::AddWindBulletNotify::generated_message_descriptor_data());
            messages.push(wind_seed_client_notify::AreaNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
