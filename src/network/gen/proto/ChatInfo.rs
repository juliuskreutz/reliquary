// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChatInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ChatInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChatInfo {
    // message fields
    // @@protoc_insertion_point(field:ChatInfo.time)
    pub time: u32,
    // @@protoc_insertion_point(field:ChatInfo.to_uid)
    pub to_uid: u32,
    // @@protoc_insertion_point(field:ChatInfo.is_read)
    pub is_read: bool,
    // @@protoc_insertion_point(field:ChatInfo.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:ChatInfo.sequence)
    pub sequence: u32,
    // message oneof groups
    pub content: ::std::option::Option<chat_info::Content>,
    // special fields
    // @@protoc_insertion_point(special_field:ChatInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChatInfo {
    fn default() -> &'a ChatInfo {
        <ChatInfo as ::protobuf::Message>::default_instance()
    }
}

impl ChatInfo {
    pub fn new() -> ChatInfo {
        ::std::default::Default::default()
    }

    // string text = 1751;

    pub fn text(&self) -> &str {
        match self.content {
            ::std::option::Option::Some(chat_info::Content::Text(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_text(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(chat_info::Content::Text(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.content = ::std::option::Option::Some(chat_info::Content::Text(v))
    }

    // Mutable pointer to the field.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(chat_info::Content::Text(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(chat_info::Content::Text(::std::string::String::new()));
        }
        match self.content {
            ::std::option::Option::Some(chat_info::Content::Text(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        if self.has_text() {
            match self.content.take() {
                ::std::option::Option::Some(chat_info::Content::Text(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // uint32 icon = 1792;

    pub fn icon(&self) -> u32 {
        match self.content {
            ::std::option::Option::Some(chat_info::Content::Icon(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_icon(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_icon(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(chat_info::Content::Icon(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_icon(&mut self, v: u32) {
        self.content = ::std::option::Option::Some(chat_info::Content::Icon(v))
    }

    // .ChatInfo.SystemHint system_hint = 370;

    pub fn system_hint(&self) -> &chat_info::SystemHint {
        match self.content {
            ::std::option::Option::Some(chat_info::Content::SystemHint(ref v)) => v,
            _ => <chat_info::SystemHint as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_system_hint(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_system_hint(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(chat_info::Content::SystemHint(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_system_hint(&mut self, v: chat_info::SystemHint) {
        self.content = ::std::option::Option::Some(chat_info::Content::SystemHint(v))
    }

    // Mutable pointer to the field.
    pub fn mut_system_hint(&mut self) -> &mut chat_info::SystemHint {
        if let ::std::option::Option::Some(chat_info::Content::SystemHint(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(chat_info::Content::SystemHint(chat_info::SystemHint::new()));
        }
        match self.content {
            ::std::option::Option::Some(chat_info::Content::SystemHint(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_system_hint(&mut self) -> chat_info::SystemHint {
        if self.has_system_hint() {
            match self.content.take() {
                ::std::option::Option::Some(chat_info::Content::SystemHint(v)) => v,
                _ => panic!(),
            }
        } else {
            chat_info::SystemHint::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time",
            |m: &ChatInfo| { &m.time },
            |m: &mut ChatInfo| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to_uid",
            |m: &ChatInfo| { &m.to_uid },
            |m: &mut ChatInfo| { &mut m.to_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_read",
            |m: &ChatInfo| { &m.is_read },
            |m: &mut ChatInfo| { &mut m.is_read },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &ChatInfo| { &m.uid },
            |m: &mut ChatInfo| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sequence",
            |m: &ChatInfo| { &m.sequence },
            |m: &mut ChatInfo| { &mut m.sequence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "text",
            ChatInfo::has_text,
            ChatInfo::text,
            ChatInfo::set_text,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "icon",
            ChatInfo::has_icon,
            ChatInfo::icon,
            ChatInfo::set_icon,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, chat_info::SystemHint>(
            "system_hint",
            ChatInfo::has_system_hint,
            ChatInfo::system_hint,
            ChatInfo::mut_system_hint,
            ChatInfo::set_system_hint,
        ));
        oneofs.push(chat_info::Content::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChatInfo>(
            "ChatInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChatInfo {
    const NAME: &'static str = "ChatInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                72 => {
                    self.time = is.read_uint32()?;
                },
                64 => {
                    self.to_uid = is.read_uint32()?;
                },
                96 => {
                    self.is_read = is.read_bool()?;
                },
                40 => {
                    self.uid = is.read_uint32()?;
                },
                32 => {
                    self.sequence = is.read_uint32()?;
                },
                14010 => {
                    self.content = ::std::option::Option::Some(chat_info::Content::Text(is.read_string()?));
                },
                14336 => {
                    self.content = ::std::option::Option::Some(chat_info::Content::Icon(is.read_uint32()?));
                },
                2962 => {
                    self.content = ::std::option::Option::Some(chat_info::Content::SystemHint(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.time != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.time);
        }
        if self.to_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.to_uid);
        }
        if self.is_read != false {
            my_size += 1 + 1;
        }
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.uid);
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.sequence);
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &chat_info::Content::Text(ref v) => {
                    my_size += ::protobuf::rt::string_size(1751, &v);
                },
                &chat_info::Content::Icon(v) => {
                    my_size += ::protobuf::rt::uint32_size(1792, v);
                },
                &chat_info::Content::SystemHint(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.time != 0 {
            os.write_uint32(9, self.time)?;
        }
        if self.to_uid != 0 {
            os.write_uint32(8, self.to_uid)?;
        }
        if self.is_read != false {
            os.write_bool(12, self.is_read)?;
        }
        if self.uid != 0 {
            os.write_uint32(5, self.uid)?;
        }
        if self.sequence != 0 {
            os.write_uint32(4, self.sequence)?;
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &chat_info::Content::Text(ref v) => {
                    os.write_string(1751, v)?;
                },
                &chat_info::Content::Icon(v) => {
                    os.write_uint32(1792, v)?;
                },
                &chat_info::Content::SystemHint(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(370, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChatInfo {
        ChatInfo::new()
    }

    fn clear(&mut self) {
        self.time = 0;
        self.to_uid = 0;
        self.is_read = false;
        self.uid = 0;
        self.sequence = 0;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChatInfo {
        static instance: ChatInfo = ChatInfo {
            time: 0,
            to_uid: 0,
            is_read: false,
            uid: 0,
            sequence: 0,
            content: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChatInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChatInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChatInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChatInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ChatInfo`
pub mod chat_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ChatInfo.content)
    pub enum Content {
        // @@protoc_insertion_point(oneof_field:ChatInfo.text)
        Text(::std::string::String),
        // @@protoc_insertion_point(oneof_field:ChatInfo.icon)
        Icon(u32),
        // @@protoc_insertion_point(oneof_field:ChatInfo.system_hint)
        SystemHint(SystemHint),
    }

    impl ::protobuf::Oneof for Content {
    }

    impl ::protobuf::OneofFull for Content {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ChatInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("content").unwrap()).clone()
        }
    }

    impl Content {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Content>("content")
        }
    }
    // @@protoc_insertion_point(message:ChatInfo.SystemHint)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct SystemHint {
        // message fields
        // @@protoc_insertion_point(field:ChatInfo.SystemHint.type)
        pub type_: u32,
        // special fields
        // @@protoc_insertion_point(special_field:ChatInfo.SystemHint.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a SystemHint {
        fn default() -> &'a SystemHint {
            <SystemHint as ::protobuf::Message>::default_instance()
        }
    }

    impl SystemHint {
        pub fn new() -> SystemHint {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "type",
                |m: &SystemHint| { &m.type_ },
                |m: &mut SystemHint| { &mut m.type_ },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SystemHint>(
                "ChatInfo.SystemHint",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for SystemHint {
        const NAME: &'static str = "SystemHint";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    56 => {
                        self.type_ = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.type_ != 0 {
                my_size += ::protobuf::rt::uint32_size(7, self.type_);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.type_ != 0 {
                os.write_uint32(7, self.type_)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> SystemHint {
            SystemHint::new()
        }

        fn clear(&mut self) {
            self.type_ = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static SystemHint {
            static instance: SystemHint = SystemHint {
                type_: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for SystemHint {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ChatInfo.SystemHint").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for SystemHint {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for SystemHint {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:ChatInfo.SystemHintType)
    pub enum SystemHintType {
        // @@protoc_insertion_point(enum_value:ChatInfo.SystemHintType.SYSTEM_HINT_TYPE_CHAT_NONE)
        SYSTEM_HINT_TYPE_CHAT_NONE = 0,
        // @@protoc_insertion_point(enum_value:ChatInfo.SystemHintType.SYSTEM_HINT_TYPE_CHAT_ENTER_WORLD)
        SYSTEM_HINT_TYPE_CHAT_ENTER_WORLD = 1,
        // @@protoc_insertion_point(enum_value:ChatInfo.SystemHintType.SYSTEM_HINT_TYPE_CHAT_LEAVE_WORLD)
        SYSTEM_HINT_TYPE_CHAT_LEAVE_WORLD = 2,
    }

    impl ::protobuf::Enum for SystemHintType {
        const NAME: &'static str = "SystemHintType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<SystemHintType> {
            match value {
                0 => ::std::option::Option::Some(SystemHintType::SYSTEM_HINT_TYPE_CHAT_NONE),
                1 => ::std::option::Option::Some(SystemHintType::SYSTEM_HINT_TYPE_CHAT_ENTER_WORLD),
                2 => ::std::option::Option::Some(SystemHintType::SYSTEM_HINT_TYPE_CHAT_LEAVE_WORLD),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<SystemHintType> {
            match str {
                "SYSTEM_HINT_TYPE_CHAT_NONE" => ::std::option::Option::Some(SystemHintType::SYSTEM_HINT_TYPE_CHAT_NONE),
                "SYSTEM_HINT_TYPE_CHAT_ENTER_WORLD" => ::std::option::Option::Some(SystemHintType::SYSTEM_HINT_TYPE_CHAT_ENTER_WORLD),
                "SYSTEM_HINT_TYPE_CHAT_LEAVE_WORLD" => ::std::option::Option::Some(SystemHintType::SYSTEM_HINT_TYPE_CHAT_LEAVE_WORLD),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [SystemHintType] = &[
            SystemHintType::SYSTEM_HINT_TYPE_CHAT_NONE,
            SystemHintType::SYSTEM_HINT_TYPE_CHAT_ENTER_WORLD,
            SystemHintType::SYSTEM_HINT_TYPE_CHAT_LEAVE_WORLD,
        ];
    }

    impl ::protobuf::EnumFull for SystemHintType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ChatInfo.SystemHintType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for SystemHintType {
        fn default() -> Self {
            SystemHintType::SYSTEM_HINT_TYPE_CHAT_NONE
        }
    }

    impl SystemHintType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<SystemHintType>("ChatInfo.SystemHintType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eChatInfo.proto\"\x91\x03\n\x08ChatInfo\x12\x12\n\x04time\x18\t\x20\
    \x01(\rR\x04time\x12\x15\n\x06to_uid\x18\x08\x20\x01(\rR\x05toUid\x12\
    \x17\n\x07is_read\x18\x0c\x20\x01(\x08R\x06isRead\x12\x10\n\x03uid\x18\
    \x05\x20\x01(\rR\x03uid\x12\x1a\n\x08sequence\x18\x04\x20\x01(\rR\x08seq\
    uence\x12\x15\n\x04text\x18\xd7\r\x20\x01(\tH\0R\x04text\x12\x15\n\x04ic\
    on\x18\x80\x0e\x20\x01(\rH\0R\x04icon\x128\n\x0bsystem_hint\x18\xf2\x02\
    \x20\x01(\x0b2\x14.ChatInfo.SystemHintH\0R\nsystemHint\x1a\x20\n\nSystem\
    Hint\x12\x12\n\x04type\x18\x07\x20\x01(\rR\x04type\"~\n\x0eSystemHintTyp\
    e\x12\x1e\n\x1aSYSTEM_HINT_TYPE_CHAT_NONE\x10\0\x12%\n!SYSTEM_HINT_TYPE_\
    CHAT_ENTER_WORLD\x10\x01\x12%\n!SYSTEM_HINT_TYPE_CHAT_LEAVE_WORLD\x10\
    \x02B\t\n\x07contentB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(ChatInfo::generated_message_descriptor_data());
            messages.push(chat_info::SystemHint::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(chat_info::SystemHintType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
