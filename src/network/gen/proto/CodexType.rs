// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CodexType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CodexType)
pub enum CodexType {
    // @@protoc_insertion_point(enum_value:CodexType.CODEX_NONE)
    CODEX_NONE = 0,
    // @@protoc_insertion_point(enum_value:CodexType.CODEX_QUEST)
    CODEX_QUEST = 1,
    // @@protoc_insertion_point(enum_value:CodexType.CODEX_WEAPON)
    CODEX_WEAPON = 2,
    // @@protoc_insertion_point(enum_value:CodexType.CODEX_ANIMAL)
    CODEX_ANIMAL = 3,
    // @@protoc_insertion_point(enum_value:CodexType.CODEX_MATERIAL)
    CODEX_MATERIAL = 4,
    // @@protoc_insertion_point(enum_value:CodexType.CODEX_BOOKS)
    CODEX_BOOKS = 5,
    // @@protoc_insertion_point(enum_value:CodexType.CODEX_PUSHTIPS)
    CODEX_PUSHTIPS = 6,
    // @@protoc_insertion_point(enum_value:CodexType.CODEX_VIEW)
    CODEX_VIEW = 7,
    // @@protoc_insertion_point(enum_value:CodexType.CODEX_RELIQUARY)
    CODEX_RELIQUARY = 8,
}

impl ::protobuf::Enum for CodexType {
    const NAME: &'static str = "CodexType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CodexType> {
        match value {
            0 => ::std::option::Option::Some(CodexType::CODEX_NONE),
            1 => ::std::option::Option::Some(CodexType::CODEX_QUEST),
            2 => ::std::option::Option::Some(CodexType::CODEX_WEAPON),
            3 => ::std::option::Option::Some(CodexType::CODEX_ANIMAL),
            4 => ::std::option::Option::Some(CodexType::CODEX_MATERIAL),
            5 => ::std::option::Option::Some(CodexType::CODEX_BOOKS),
            6 => ::std::option::Option::Some(CodexType::CODEX_PUSHTIPS),
            7 => ::std::option::Option::Some(CodexType::CODEX_VIEW),
            8 => ::std::option::Option::Some(CodexType::CODEX_RELIQUARY),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CodexType> {
        match str {
            "CODEX_NONE" => ::std::option::Option::Some(CodexType::CODEX_NONE),
            "CODEX_QUEST" => ::std::option::Option::Some(CodexType::CODEX_QUEST),
            "CODEX_WEAPON" => ::std::option::Option::Some(CodexType::CODEX_WEAPON),
            "CODEX_ANIMAL" => ::std::option::Option::Some(CodexType::CODEX_ANIMAL),
            "CODEX_MATERIAL" => ::std::option::Option::Some(CodexType::CODEX_MATERIAL),
            "CODEX_BOOKS" => ::std::option::Option::Some(CodexType::CODEX_BOOKS),
            "CODEX_PUSHTIPS" => ::std::option::Option::Some(CodexType::CODEX_PUSHTIPS),
            "CODEX_VIEW" => ::std::option::Option::Some(CodexType::CODEX_VIEW),
            "CODEX_RELIQUARY" => ::std::option::Option::Some(CodexType::CODEX_RELIQUARY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CodexType] = &[
        CodexType::CODEX_NONE,
        CodexType::CODEX_QUEST,
        CodexType::CODEX_WEAPON,
        CodexType::CODEX_ANIMAL,
        CodexType::CODEX_MATERIAL,
        CodexType::CODEX_BOOKS,
        CodexType::CODEX_PUSHTIPS,
        CodexType::CODEX_VIEW,
        CodexType::CODEX_RELIQUARY,
    ];
}

impl ::protobuf::EnumFull for CodexType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CodexType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CodexType {
    fn default() -> Self {
        CodexType::CODEX_NONE
    }
}

impl CodexType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CodexType>("CodexType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fCodexType.proto*\xae\x01\n\tCodexType\x12\x0e\n\nCODEX_NONE\x10\0\
    \x12\x0f\n\x0bCODEX_QUEST\x10\x01\x12\x10\n\x0cCODEX_WEAPON\x10\x02\x12\
    \x10\n\x0cCODEX_ANIMAL\x10\x03\x12\x12\n\x0eCODEX_MATERIAL\x10\x04\x12\
    \x0f\n\x0bCODEX_BOOKS\x10\x05\x12\x12\n\x0eCODEX_PUSHTIPS\x10\x06\x12\
    \x0e\n\nCODEX_VIEW\x10\x07\x12\x13\n\x0fCODEX_RELIQUARY\x10\x08B\x1b\n\
    \x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CodexType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
