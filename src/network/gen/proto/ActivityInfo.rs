// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ActivityInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ActivityInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ActivityInfo {
    // message fields
    // @@protoc_insertion_point(field:ActivityInfo.activity_id)
    pub activity_id: u32,
    // @@protoc_insertion_point(field:ActivityInfo.DNMOEAFCDGC)
    pub DNMOEAFCDGC: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ActivityInfo.watcher_info_list)
    pub watcher_info_list: ::std::vec::Vec<super::ActivityWatcherInfo::ActivityWatcherInfo>,
    // @@protoc_insertion_point(field:ActivityInfo.is_finished)
    pub is_finished: bool,
    // @@protoc_insertion_point(field:ActivityInfo.LJLDCLMAMNL)
    pub LJLDCLMAMNL: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ActivityInfo.PJJKJGALLGD)
    pub PJJKJGALLGD: bool,
    // @@protoc_insertion_point(field:ActivityInfo.activity_type)
    pub activity_type: u32,
    // @@protoc_insertion_point(field:ActivityInfo.schedule_id)
    pub schedule_id: u32,
    // @@protoc_insertion_point(field:ActivityInfo.activity_coin_map)
    pub activity_coin_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:ActivityInfo.meet_cond_list)
    pub meet_cond_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ActivityInfo.DKJDABCNGBP)
    pub DKJDABCNGBP: bool,
    // @@protoc_insertion_point(field:ActivityInfo.begin_time)
    pub begin_time: u32,
    // @@protoc_insertion_point(field:ActivityInfo.INGFNLLCDOL)
    pub INGFNLLCDOL: u32,
    // @@protoc_insertion_point(field:ActivityInfo.ENNDKMJIMHN)
    pub ENNDKMJIMHN: bool,
    // @@protoc_insertion_point(field:ActivityInfo.cur_score)
    pub cur_score: u32,
    // @@protoc_insertion_point(field:ActivityInfo.BKJNDLLNAML)
    pub BKJNDLLNAML: bool,
    // @@protoc_insertion_point(field:ActivityInfo.first_day_start_time)
    pub first_day_start_time: u32,
    // @@protoc_insertion_point(field:ActivityInfo.ABMOPKOIMPA)
    pub ABMOPKOIMPA: bool,
    // @@protoc_insertion_point(field:ActivityInfo.FGFGECAAKJM)
    pub FGFGECAAKJM: u32,
    // @@protoc_insertion_point(field:ActivityInfo.GFEMIEBKKKL)
    pub GFEMIEBKKKL: bool,
    // @@protoc_insertion_point(field:ActivityInfo.CEFIPNKPEKA)
    pub CEFIPNKPEKA: u32,
    // @@protoc_insertion_point(field:ActivityInfo.end_time)
    pub end_time: u32,
    // @@protoc_insertion_point(field:ActivityInfo.wish_gift_num_map)
    pub wish_gift_num_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:ActivityInfo.PHCOMIFAIJD)
    pub PHCOMIFAIJD: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ActivityInfo.activity_push_tips_data_list)
    pub activity_push_tips_data_list: ::std::vec::Vec<super::ActivityPushTipsData::ActivityPushTipsData>,
    // message oneof groups
    pub detail: ::std::option::Option<activity_info::Detail>,
    // special fields
    // @@protoc_insertion_point(special_field:ActivityInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ActivityInfo {
    fn default() -> &'a ActivityInfo {
        <ActivityInfo as ::protobuf::Message>::default_instance()
    }
}

impl ActivityInfo {
    pub fn new() -> ActivityInfo {
        ::std::default::Default::default()
    }

    // .SeaLampActivityDetailInfo sam_lamp_info = 10;

    pub fn sam_lamp_info(&self) -> &super::SeaLampActivityDetailInfo::SeaLampActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SamLampInfo(ref v)) => v,
            _ => <super::SeaLampActivityDetailInfo::SeaLampActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sam_lamp_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_sam_lamp_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SamLampInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sam_lamp_info(&mut self, v: super::SeaLampActivityDetailInfo::SeaLampActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::SamLampInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sam_lamp_info(&mut self) -> &mut super::SeaLampActivityDetailInfo::SeaLampActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::SamLampInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::SamLampInfo(super::SeaLampActivityDetailInfo::SeaLampActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SamLampInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sam_lamp_info(&mut self) -> super::SeaLampActivityDetailInfo::SeaLampActivityDetailInfo {
        if self.has_sam_lamp_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::SamLampInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SeaLampActivityDetailInfo::SeaLampActivityDetailInfo::new()
        }
    }

    // .CrucibleActivityDetailInfo crucible_info = 7;

    pub fn crucible_info(&self) -> &super::CrucibleActivityDetailInfo::CrucibleActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::CrucibleInfo(ref v)) => v,
            _ => <super::CrucibleActivityDetailInfo::CrucibleActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_crucible_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_crucible_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::CrucibleInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_crucible_info(&mut self, v: super::CrucibleActivityDetailInfo::CrucibleActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::CrucibleInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_crucible_info(&mut self) -> &mut super::CrucibleActivityDetailInfo::CrucibleActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::CrucibleInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::CrucibleInfo(super::CrucibleActivityDetailInfo::CrucibleActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::CrucibleInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_crucible_info(&mut self) -> super::CrucibleActivityDetailInfo::CrucibleActivityDetailInfo {
        if self.has_crucible_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::CrucibleInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CrucibleActivityDetailInfo::CrucibleActivityDetailInfo::new()
        }
    }

    // .SalesmanActivityDetailInfo salesman_info = 8;

    pub fn salesman_info(&self) -> &super::SalesmanActivityDetailInfo::SalesmanActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SalesmanInfo(ref v)) => v,
            _ => <super::SalesmanActivityDetailInfo::SalesmanActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_salesman_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_salesman_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SalesmanInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_salesman_info(&mut self, v: super::SalesmanActivityDetailInfo::SalesmanActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::SalesmanInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_salesman_info(&mut self) -> &mut super::SalesmanActivityDetailInfo::SalesmanActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::SalesmanInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::SalesmanInfo(super::SalesmanActivityDetailInfo::SalesmanActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SalesmanInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_salesman_info(&mut self) -> super::SalesmanActivityDetailInfo::SalesmanActivityDetailInfo {
        if self.has_salesman_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::SalesmanInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SalesmanActivityDetailInfo::SalesmanActivityDetailInfo::new()
        }
    }

    // .TrialAvatarActivityDetailInfo trial_avatar_info = 6;

    pub fn trial_avatar_info(&self) -> &super::TrialAvatarActivityDetailInfo::TrialAvatarActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TrialAvatarInfo(ref v)) => v,
            _ => <super::TrialAvatarActivityDetailInfo::TrialAvatarActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_trial_avatar_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_trial_avatar_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TrialAvatarInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_trial_avatar_info(&mut self, v: super::TrialAvatarActivityDetailInfo::TrialAvatarActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::TrialAvatarInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_trial_avatar_info(&mut self) -> &mut super::TrialAvatarActivityDetailInfo::TrialAvatarActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::TrialAvatarInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::TrialAvatarInfo(super::TrialAvatarActivityDetailInfo::TrialAvatarActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TrialAvatarInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_trial_avatar_info(&mut self) -> super::TrialAvatarActivityDetailInfo::TrialAvatarActivityDetailInfo {
        if self.has_trial_avatar_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::TrialAvatarInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::TrialAvatarActivityDetailInfo::TrialAvatarActivityDetailInfo::new()
        }
    }

    // .DeliveryActivityDetailInfo delivery_info = 1846;

    pub fn delivery_info(&self) -> &super::DeliveryActivityDetailInfo::DeliveryActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::DeliveryInfo(ref v)) => v,
            _ => <super::DeliveryActivityDetailInfo::DeliveryActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_delivery_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_delivery_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::DeliveryInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delivery_info(&mut self, v: super::DeliveryActivityDetailInfo::DeliveryActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::DeliveryInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delivery_info(&mut self) -> &mut super::DeliveryActivityDetailInfo::DeliveryActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::DeliveryInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::DeliveryInfo(super::DeliveryActivityDetailInfo::DeliveryActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::DeliveryInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delivery_info(&mut self) -> super::DeliveryActivityDetailInfo::DeliveryActivityDetailInfo {
        if self.has_delivery_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::DeliveryInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DeliveryActivityDetailInfo::DeliveryActivityDetailInfo::new()
        }
    }

    // .AsterActivityDetailInfo aster_info = 260;

    pub fn aster_info(&self) -> &super::AsterActivityDetailInfo::AsterActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::AsterInfo(ref v)) => v,
            _ => <super::AsterActivityDetailInfo::AsterActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_aster_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_aster_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::AsterInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_aster_info(&mut self, v: super::AsterActivityDetailInfo::AsterActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::AsterInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_aster_info(&mut self) -> &mut super::AsterActivityDetailInfo::AsterActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::AsterInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::AsterInfo(super::AsterActivityDetailInfo::AsterActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::AsterInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_aster_info(&mut self) -> super::AsterActivityDetailInfo::AsterActivityDetailInfo {
        if self.has_aster_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::AsterInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AsterActivityDetailInfo::AsterActivityDetailInfo::new()
        }
    }

    // .FlightActivityDetailInfo flight_info = 826;

    pub fn flight_info(&self) -> &super::FlightActivityDetailInfo::FlightActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FlightInfo(ref v)) => v,
            _ => <super::FlightActivityDetailInfo::FlightActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_flight_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_flight_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FlightInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_flight_info(&mut self, v: super::FlightActivityDetailInfo::FlightActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::FlightInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_flight_info(&mut self) -> &mut super::FlightActivityDetailInfo::FlightActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::FlightInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::FlightInfo(super::FlightActivityDetailInfo::FlightActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FlightInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_flight_info(&mut self) -> super::FlightActivityDetailInfo::FlightActivityDetailInfo {
        if self.has_flight_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::FlightInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FlightActivityDetailInfo::FlightActivityDetailInfo::new()
        }
    }

    // .DragonSpineActivityDetailInfo dragon_spine_info = 110;

    pub fn dragon_spine_info(&self) -> &super::DragonSpineActivityDetailInfo::DragonSpineActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::DragonSpineInfo(ref v)) => v,
            _ => <super::DragonSpineActivityDetailInfo::DragonSpineActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_dragon_spine_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_dragon_spine_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::DragonSpineInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_dragon_spine_info(&mut self, v: super::DragonSpineActivityDetailInfo::DragonSpineActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::DragonSpineInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_dragon_spine_info(&mut self) -> &mut super::DragonSpineActivityDetailInfo::DragonSpineActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::DragonSpineInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::DragonSpineInfo(super::DragonSpineActivityDetailInfo::DragonSpineActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::DragonSpineInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_dragon_spine_info(&mut self) -> super::DragonSpineActivityDetailInfo::DragonSpineActivityDetailInfo {
        if self.has_dragon_spine_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::DragonSpineInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DragonSpineActivityDetailInfo::DragonSpineActivityDetailInfo::new()
        }
    }

    // .EffigyActivityDetailInfo effigy_info = 1010;

    pub fn effigy_info(&self) -> &super::EffigyActivityDetailInfo::EffigyActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::EffigyInfo(ref v)) => v,
            _ => <super::EffigyActivityDetailInfo::EffigyActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_effigy_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_effigy_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::EffigyInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_effigy_info(&mut self, v: super::EffigyActivityDetailInfo::EffigyActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::EffigyInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_effigy_info(&mut self) -> &mut super::EffigyActivityDetailInfo::EffigyActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::EffigyInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::EffigyInfo(super::EffigyActivityDetailInfo::EffigyActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::EffigyInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_effigy_info(&mut self) -> super::EffigyActivityDetailInfo::EffigyActivityDetailInfo {
        if self.has_effigy_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::EffigyInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EffigyActivityDetailInfo::EffigyActivityDetailInfo::new()
        }
    }

    // .TreasureMapActivityDetailInfo treasure_map_info = 1754;

    pub fn treasure_map_info(&self) -> &super::TreasureMapActivityDetailInfo::TreasureMapActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TreasureMapInfo(ref v)) => v,
            _ => <super::TreasureMapActivityDetailInfo::TreasureMapActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_treasure_map_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_treasure_map_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TreasureMapInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_treasure_map_info(&mut self, v: super::TreasureMapActivityDetailInfo::TreasureMapActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::TreasureMapInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_treasure_map_info(&mut self) -> &mut super::TreasureMapActivityDetailInfo::TreasureMapActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::TreasureMapInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::TreasureMapInfo(super::TreasureMapActivityDetailInfo::TreasureMapActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TreasureMapInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_treasure_map_info(&mut self) -> super::TreasureMapActivityDetailInfo::TreasureMapActivityDetailInfo {
        if self.has_treasure_map_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::TreasureMapInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::TreasureMapActivityDetailInfo::TreasureMapActivityDetailInfo::new()
        }
    }

    // .BlessingActivityDetailInfo blessing_info = 331;

    pub fn blessing_info(&self) -> &super::BlessingActivityDetailInfo::BlessingActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BlessingInfo(ref v)) => v,
            _ => <super::BlessingActivityDetailInfo::BlessingActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_blessing_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_blessing_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BlessingInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_blessing_info(&mut self, v: super::BlessingActivityDetailInfo::BlessingActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::BlessingInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_blessing_info(&mut self) -> &mut super::BlessingActivityDetailInfo::BlessingActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::BlessingInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::BlessingInfo(super::BlessingActivityDetailInfo::BlessingActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BlessingInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_blessing_info(&mut self) -> super::BlessingActivityDetailInfo::BlessingActivityDetailInfo {
        if self.has_blessing_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::BlessingInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BlessingActivityDetailInfo::BlessingActivityDetailInfo::new()
        }
    }

    // .SeaLampActivityInfo sea_lamp_info = 1114;

    pub fn sea_lamp_info(&self) -> &super::SeaLampActivityInfo::SeaLampActivityInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SeaLampInfo(ref v)) => v,
            _ => <super::SeaLampActivityInfo::SeaLampActivityInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sea_lamp_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_sea_lamp_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SeaLampInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sea_lamp_info(&mut self, v: super::SeaLampActivityInfo::SeaLampActivityInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::SeaLampInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sea_lamp_info(&mut self) -> &mut super::SeaLampActivityInfo::SeaLampActivityInfo {
        if let ::std::option::Option::Some(activity_info::Detail::SeaLampInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::SeaLampInfo(super::SeaLampActivityInfo::SeaLampActivityInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SeaLampInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sea_lamp_info(&mut self) -> super::SeaLampActivityInfo::SeaLampActivityInfo {
        if self.has_sea_lamp_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::SeaLampInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SeaLampActivityInfo::SeaLampActivityInfo::new()
        }
    }

    // .ExpeditionActivityDetailInfo expedition_info = 674;

    pub fn expedition_info(&self) -> &super::ExpeditionActivityDetailInfo::ExpeditionActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ExpeditionInfo(ref v)) => v,
            _ => <super::ExpeditionActivityDetailInfo::ExpeditionActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_expedition_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_expedition_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ExpeditionInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_expedition_info(&mut self, v: super::ExpeditionActivityDetailInfo::ExpeditionActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::ExpeditionInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_expedition_info(&mut self) -> &mut super::ExpeditionActivityDetailInfo::ExpeditionActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::ExpeditionInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::ExpeditionInfo(super::ExpeditionActivityDetailInfo::ExpeditionActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ExpeditionInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_expedition_info(&mut self) -> super::ExpeditionActivityDetailInfo::ExpeditionActivityDetailInfo {
        if self.has_expedition_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::ExpeditionInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ExpeditionActivityDetailInfo::ExpeditionActivityDetailInfo::new()
        }
    }

    // .ArenaChallengeActivityDetailInfo arena_challenge_info = 39;

    pub fn arena_challenge_info(&self) -> &super::ArenaChallengeActivityDetailInfo::ArenaChallengeActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ArenaChallengeInfo(ref v)) => v,
            _ => <super::ArenaChallengeActivityDetailInfo::ArenaChallengeActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_arena_challenge_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_arena_challenge_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ArenaChallengeInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_arena_challenge_info(&mut self, v: super::ArenaChallengeActivityDetailInfo::ArenaChallengeActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::ArenaChallengeInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_arena_challenge_info(&mut self) -> &mut super::ArenaChallengeActivityDetailInfo::ArenaChallengeActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::ArenaChallengeInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::ArenaChallengeInfo(super::ArenaChallengeActivityDetailInfo::ArenaChallengeActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ArenaChallengeInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_arena_challenge_info(&mut self) -> super::ArenaChallengeActivityDetailInfo::ArenaChallengeActivityDetailInfo {
        if self.has_arena_challenge_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::ArenaChallengeInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ArenaChallengeActivityDetailInfo::ArenaChallengeActivityDetailInfo::new()
        }
    }

    // .FleurFairActivityDetailInfo fleur_fair_info = 293;

    pub fn fleur_fair_info(&self) -> &super::FleurFairActivityDetailInfo::FleurFairActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FleurFairInfo(ref v)) => v,
            _ => <super::FleurFairActivityDetailInfo::FleurFairActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_fleur_fair_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_fleur_fair_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FleurFairInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fleur_fair_info(&mut self, v: super::FleurFairActivityDetailInfo::FleurFairActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::FleurFairInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fleur_fair_info(&mut self) -> &mut super::FleurFairActivityDetailInfo::FleurFairActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::FleurFairInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::FleurFairInfo(super::FleurFairActivityDetailInfo::FleurFairActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FleurFairInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fleur_fair_info(&mut self) -> super::FleurFairActivityDetailInfo::FleurFairActivityDetailInfo {
        if self.has_fleur_fair_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::FleurFairInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FleurFairActivityDetailInfo::FleurFairActivityDetailInfo::new()
        }
    }

    // .WaterSpiritActivityDetailInfo water_spirit_info = 1997;

    pub fn water_spirit_info(&self) -> &super::WaterSpiritActivityDetailInfo::WaterSpiritActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::WaterSpiritInfo(ref v)) => v,
            _ => <super::WaterSpiritActivityDetailInfo::WaterSpiritActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_water_spirit_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_water_spirit_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::WaterSpiritInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_water_spirit_info(&mut self, v: super::WaterSpiritActivityDetailInfo::WaterSpiritActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::WaterSpiritInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_water_spirit_info(&mut self) -> &mut super::WaterSpiritActivityDetailInfo::WaterSpiritActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::WaterSpiritInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::WaterSpiritInfo(super::WaterSpiritActivityDetailInfo::WaterSpiritActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::WaterSpiritInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_water_spirit_info(&mut self) -> super::WaterSpiritActivityDetailInfo::WaterSpiritActivityDetailInfo {
        if self.has_water_spirit_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::WaterSpiritInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::WaterSpiritActivityDetailInfo::WaterSpiritActivityDetailInfo::new()
        }
    }

    // .ChannelerSlabActivityDetailInfo challneler_slab_info = 1757;

    pub fn challneler_slab_info(&self) -> &super::ChannelerSlabActivityDetailInfo::ChannelerSlabActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ChallnelerSlabInfo(ref v)) => v,
            _ => <super::ChannelerSlabActivityDetailInfo::ChannelerSlabActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_challneler_slab_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_challneler_slab_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ChallnelerSlabInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_challneler_slab_info(&mut self, v: super::ChannelerSlabActivityDetailInfo::ChannelerSlabActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::ChallnelerSlabInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_challneler_slab_info(&mut self) -> &mut super::ChannelerSlabActivityDetailInfo::ChannelerSlabActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::ChallnelerSlabInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::ChallnelerSlabInfo(super::ChannelerSlabActivityDetailInfo::ChannelerSlabActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ChallnelerSlabInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_challneler_slab_info(&mut self) -> super::ChannelerSlabActivityDetailInfo::ChannelerSlabActivityDetailInfo {
        if self.has_challneler_slab_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::ChallnelerSlabInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ChannelerSlabActivityDetailInfo::ChannelerSlabActivityDetailInfo::new()
        }
    }

    // .MistTrialActivityDetailInfo mist_trial_activity_info = 1622;

    pub fn mist_trial_activity_info(&self) -> &super::MistTrialActivityDetailInfo::MistTrialActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MistTrialActivityInfo(ref v)) => v,
            _ => <super::MistTrialActivityDetailInfo::MistTrialActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_mist_trial_activity_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_mist_trial_activity_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MistTrialActivityInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mist_trial_activity_info(&mut self, v: super::MistTrialActivityDetailInfo::MistTrialActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::MistTrialActivityInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mist_trial_activity_info(&mut self) -> &mut super::MistTrialActivityDetailInfo::MistTrialActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::MistTrialActivityInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::MistTrialActivityInfo(super::MistTrialActivityDetailInfo::MistTrialActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MistTrialActivityInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mist_trial_activity_info(&mut self) -> super::MistTrialActivityDetailInfo::MistTrialActivityDetailInfo {
        if self.has_mist_trial_activity_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::MistTrialActivityInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MistTrialActivityDetailInfo::MistTrialActivityDetailInfo::new()
        }
    }

    // .HideAndSeekActivityDetailInfo hide_and_seek_info = 1747;

    pub fn hide_and_seek_info(&self) -> &super::HideAndSeekActivityDetailInfo::HideAndSeekActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::HideAndSeekInfo(ref v)) => v,
            _ => <super::HideAndSeekActivityDetailInfo::HideAndSeekActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_hide_and_seek_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_hide_and_seek_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::HideAndSeekInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hide_and_seek_info(&mut self, v: super::HideAndSeekActivityDetailInfo::HideAndSeekActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::HideAndSeekInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_hide_and_seek_info(&mut self) -> &mut super::HideAndSeekActivityDetailInfo::HideAndSeekActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::HideAndSeekInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::HideAndSeekInfo(super::HideAndSeekActivityDetailInfo::HideAndSeekActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::HideAndSeekInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_hide_and_seek_info(&mut self) -> super::HideAndSeekActivityDetailInfo::HideAndSeekActivityDetailInfo {
        if self.has_hide_and_seek_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::HideAndSeekInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HideAndSeekActivityDetailInfo::HideAndSeekActivityDetailInfo::new()
        }
    }

    // .FindHilichurlDetailInfo find_hilichurl_info = 1284;

    pub fn find_hilichurl_info(&self) -> &super::FindHilichurlDetailInfo::FindHilichurlDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FindHilichurlInfo(ref v)) => v,
            _ => <super::FindHilichurlDetailInfo::FindHilichurlDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_find_hilichurl_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_find_hilichurl_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FindHilichurlInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_find_hilichurl_info(&mut self, v: super::FindHilichurlDetailInfo::FindHilichurlDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::FindHilichurlInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_find_hilichurl_info(&mut self) -> &mut super::FindHilichurlDetailInfo::FindHilichurlDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::FindHilichurlInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::FindHilichurlInfo(super::FindHilichurlDetailInfo::FindHilichurlDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FindHilichurlInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_find_hilichurl_info(&mut self) -> super::FindHilichurlDetailInfo::FindHilichurlDetailInfo {
        if self.has_find_hilichurl_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::FindHilichurlInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FindHilichurlDetailInfo::FindHilichurlDetailInfo::new()
        }
    }

    // .SummerTimeDetailInfo summer_time_info = 950;

    pub fn summer_time_info(&self) -> &super::SummerTimeDetailInfo::SummerTimeDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SummerTimeInfo(ref v)) => v,
            _ => <super::SummerTimeDetailInfo::SummerTimeDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_summer_time_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_summer_time_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SummerTimeInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_summer_time_info(&mut self, v: super::SummerTimeDetailInfo::SummerTimeDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::SummerTimeInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_summer_time_info(&mut self) -> &mut super::SummerTimeDetailInfo::SummerTimeDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::SummerTimeInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::SummerTimeInfo(super::SummerTimeDetailInfo::SummerTimeDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SummerTimeInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_summer_time_info(&mut self) -> super::SummerTimeDetailInfo::SummerTimeDetailInfo {
        if self.has_summer_time_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::SummerTimeInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SummerTimeDetailInfo::SummerTimeDetailInfo::new()
        }
    }

    // .BuoyantCombatDetailInfo buoyant_combat_info = 519;

    pub fn buoyant_combat_info(&self) -> &super::BuoyantCombatDetailInfo::BuoyantCombatDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BuoyantCombatInfo(ref v)) => v,
            _ => <super::BuoyantCombatDetailInfo::BuoyantCombatDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_buoyant_combat_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_buoyant_combat_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BuoyantCombatInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_buoyant_combat_info(&mut self, v: super::BuoyantCombatDetailInfo::BuoyantCombatDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::BuoyantCombatInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_buoyant_combat_info(&mut self) -> &mut super::BuoyantCombatDetailInfo::BuoyantCombatDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::BuoyantCombatInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::BuoyantCombatInfo(super::BuoyantCombatDetailInfo::BuoyantCombatDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BuoyantCombatInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_buoyant_combat_info(&mut self) -> super::BuoyantCombatDetailInfo::BuoyantCombatDetailInfo {
        if self.has_buoyant_combat_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::BuoyantCombatInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BuoyantCombatDetailInfo::BuoyantCombatDetailInfo::new()
        }
    }

    // .EchoShellDetailInfo echo_shell_info = 305;

    pub fn echo_shell_info(&self) -> &super::EchoShellDetailInfo::EchoShellDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::EchoShellInfo(ref v)) => v,
            _ => <super::EchoShellDetailInfo::EchoShellDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_echo_shell_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_echo_shell_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::EchoShellInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_echo_shell_info(&mut self, v: super::EchoShellDetailInfo::EchoShellDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::EchoShellInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_echo_shell_info(&mut self) -> &mut super::EchoShellDetailInfo::EchoShellDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::EchoShellInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::EchoShellInfo(super::EchoShellDetailInfo::EchoShellDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::EchoShellInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_echo_shell_info(&mut self) -> super::EchoShellDetailInfo::EchoShellDetailInfo {
        if self.has_echo_shell_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::EchoShellInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EchoShellDetailInfo::EchoShellDetailInfo::new()
        }
    }

    // .BounceConjuringActivityDetailInfo bounce_conjuring_info = 1864;

    pub fn bounce_conjuring_info(&self) -> &super::BounceConjuringActivityDetailInfo::BounceConjuringActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BounceConjuringInfo(ref v)) => v,
            _ => <super::BounceConjuringActivityDetailInfo::BounceConjuringActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_bounce_conjuring_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_bounce_conjuring_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BounceConjuringInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bounce_conjuring_info(&mut self, v: super::BounceConjuringActivityDetailInfo::BounceConjuringActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::BounceConjuringInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bounce_conjuring_info(&mut self) -> &mut super::BounceConjuringActivityDetailInfo::BounceConjuringActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::BounceConjuringInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::BounceConjuringInfo(super::BounceConjuringActivityDetailInfo::BounceConjuringActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BounceConjuringInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bounce_conjuring_info(&mut self) -> super::BounceConjuringActivityDetailInfo::BounceConjuringActivityDetailInfo {
        if self.has_bounce_conjuring_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::BounceConjuringInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BounceConjuringActivityDetailInfo::BounceConjuringActivityDetailInfo::new()
        }
    }

    // .BlitzRushActivityDetailInfo blitz_rush_info = 915;

    pub fn blitz_rush_info(&self) -> &super::BlitzRushActivityDetailInfo::BlitzRushActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BlitzRushInfo(ref v)) => v,
            _ => <super::BlitzRushActivityDetailInfo::BlitzRushActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_blitz_rush_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_blitz_rush_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BlitzRushInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_blitz_rush_info(&mut self, v: super::BlitzRushActivityDetailInfo::BlitzRushActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::BlitzRushInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_blitz_rush_info(&mut self) -> &mut super::BlitzRushActivityDetailInfo::BlitzRushActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::BlitzRushInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::BlitzRushInfo(super::BlitzRushActivityDetailInfo::BlitzRushActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BlitzRushInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_blitz_rush_info(&mut self) -> super::BlitzRushActivityDetailInfo::BlitzRushActivityDetailInfo {
        if self.has_blitz_rush_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::BlitzRushInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BlitzRushActivityDetailInfo::BlitzRushActivityDetailInfo::new()
        }
    }

    // .ChessActivityDetailInfo chess_info = 1087;

    pub fn chess_info(&self) -> &super::ChessActivityDetailInfo::ChessActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ChessInfo(ref v)) => v,
            _ => <super::ChessActivityDetailInfo::ChessActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_chess_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_chess_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ChessInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_chess_info(&mut self, v: super::ChessActivityDetailInfo::ChessActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::ChessInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_chess_info(&mut self) -> &mut super::ChessActivityDetailInfo::ChessActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::ChessInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::ChessInfo(super::ChessActivityDetailInfo::ChessActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ChessInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_chess_info(&mut self) -> super::ChessActivityDetailInfo::ChessActivityDetailInfo {
        if self.has_chess_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::ChessInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ChessActivityDetailInfo::ChessActivityDetailInfo::new()
        }
    }

    // .SumoActivityDetailInfo sumo_info = 2008;

    pub fn sumo_info(&self) -> &super::SumoActivityDetailInfo::SumoActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SumoInfo(ref v)) => v,
            _ => <super::SumoActivityDetailInfo::SumoActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sumo_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_sumo_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SumoInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sumo_info(&mut self, v: super::SumoActivityDetailInfo::SumoActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::SumoInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sumo_info(&mut self) -> &mut super::SumoActivityDetailInfo::SumoActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::SumoInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::SumoInfo(super::SumoActivityDetailInfo::SumoActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SumoInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sumo_info(&mut self) -> super::SumoActivityDetailInfo::SumoActivityDetailInfo {
        if self.has_sumo_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::SumoInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SumoActivityDetailInfo::SumoActivityDetailInfo::new()
        }
    }

    // .MoonfinTrialActivityDetailInfo moonfin_trial_info = 389;

    pub fn moonfin_trial_info(&self) -> &super::MoonfinTrialActivityDetailInfo::MoonfinTrialActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MoonfinTrialInfo(ref v)) => v,
            _ => <super::MoonfinTrialActivityDetailInfo::MoonfinTrialActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_moonfin_trial_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_moonfin_trial_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MoonfinTrialInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_moonfin_trial_info(&mut self, v: super::MoonfinTrialActivityDetailInfo::MoonfinTrialActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::MoonfinTrialInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_moonfin_trial_info(&mut self) -> &mut super::MoonfinTrialActivityDetailInfo::MoonfinTrialActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::MoonfinTrialInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::MoonfinTrialInfo(super::MoonfinTrialActivityDetailInfo::MoonfinTrialActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MoonfinTrialInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_moonfin_trial_info(&mut self) -> super::MoonfinTrialActivityDetailInfo::MoonfinTrialActivityDetailInfo {
        if self.has_moonfin_trial_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::MoonfinTrialInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MoonfinTrialActivityDetailInfo::MoonfinTrialActivityDetailInfo::new()
        }
    }

    // .LunaRiteDetailInfo luna_rite_info = 1971;

    pub fn luna_rite_info(&self) -> &super::LunaRiteDetailInfo::LunaRiteDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::LunaRiteInfo(ref v)) => v,
            _ => <super::LunaRiteDetailInfo::LunaRiteDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_luna_rite_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_luna_rite_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::LunaRiteInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_luna_rite_info(&mut self, v: super::LunaRiteDetailInfo::LunaRiteDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::LunaRiteInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_luna_rite_info(&mut self) -> &mut super::LunaRiteDetailInfo::LunaRiteDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::LunaRiteInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::LunaRiteInfo(super::LunaRiteDetailInfo::LunaRiteDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::LunaRiteInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_luna_rite_info(&mut self) -> super::LunaRiteDetailInfo::LunaRiteDetailInfo {
        if self.has_luna_rite_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::LunaRiteInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LunaRiteDetailInfo::LunaRiteDetailInfo::new()
        }
    }

    // .PlantFlowerActivityDetailInfo plant_flower_info = 1854;

    pub fn plant_flower_info(&self) -> &super::PlantFlowerActivityDetailInfo::PlantFlowerActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PlantFlowerInfo(ref v)) => v,
            _ => <super::PlantFlowerActivityDetailInfo::PlantFlowerActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_plant_flower_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_plant_flower_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PlantFlowerInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_plant_flower_info(&mut self, v: super::PlantFlowerActivityDetailInfo::PlantFlowerActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::PlantFlowerInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_plant_flower_info(&mut self) -> &mut super::PlantFlowerActivityDetailInfo::PlantFlowerActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::PlantFlowerInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::PlantFlowerInfo(super::PlantFlowerActivityDetailInfo::PlantFlowerActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PlantFlowerInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_plant_flower_info(&mut self) -> super::PlantFlowerActivityDetailInfo::PlantFlowerActivityDetailInfo {
        if self.has_plant_flower_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::PlantFlowerInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PlantFlowerActivityDetailInfo::PlantFlowerActivityDetailInfo::new()
        }
    }

    // .MusicGameActivityDetailInfo music_game_info = 1847;

    pub fn music_game_info(&self) -> &super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(ref v)) => v,
            _ => <super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_music_game_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_music_game_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_music_game_info(&mut self, v: super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_music_game_info(&mut self) -> &mut super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_music_game_info(&mut self) -> super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo {
        if self.has_music_game_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo::new()
        }
    }

    // .RoguelikeDungeonActivityDetailInfo roguelike_dungoen_info = 1025;

    pub fn roguelike_dungoen_info(&self) -> &super::RoguelikeDungeonActivityDetailInfo::RoguelikeDungeonActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::RoguelikeDungoenInfo(ref v)) => v,
            _ => <super::RoguelikeDungeonActivityDetailInfo::RoguelikeDungeonActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_roguelike_dungoen_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_roguelike_dungoen_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::RoguelikeDungoenInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_roguelike_dungoen_info(&mut self, v: super::RoguelikeDungeonActivityDetailInfo::RoguelikeDungeonActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::RoguelikeDungoenInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_roguelike_dungoen_info(&mut self) -> &mut super::RoguelikeDungeonActivityDetailInfo::RoguelikeDungeonActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::RoguelikeDungoenInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::RoguelikeDungoenInfo(super::RoguelikeDungeonActivityDetailInfo::RoguelikeDungeonActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::RoguelikeDungoenInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_roguelike_dungoen_info(&mut self) -> super::RoguelikeDungeonActivityDetailInfo::RoguelikeDungeonActivityDetailInfo {
        if self.has_roguelike_dungoen_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::RoguelikeDungoenInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RoguelikeDungeonActivityDetailInfo::RoguelikeDungeonActivityDetailInfo::new()
        }
    }

    // .DigActivityDetailInfo dig_info = 1855;

    pub fn dig_info(&self) -> &super::DigActivityDetailInfo::DigActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::DigInfo(ref v)) => v,
            _ => <super::DigActivityDetailInfo::DigActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_dig_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_dig_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::DigInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_dig_info(&mut self, v: super::DigActivityDetailInfo::DigActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::DigInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_dig_info(&mut self) -> &mut super::DigActivityDetailInfo::DigActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::DigInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::DigInfo(super::DigActivityDetailInfo::DigActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::DigInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_dig_info(&mut self) -> super::DigActivityDetailInfo::DigActivityDetailInfo {
        if self.has_dig_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::DigInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DigActivityDetailInfo::DigActivityDetailInfo::new()
        }
    }

    // .HachiActivityDetailInfo hachi_info = 1176;

    pub fn hachi_info(&self) -> &super::HachiActivityDetailInfo::HachiActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::HachiInfo(ref v)) => v,
            _ => <super::HachiActivityDetailInfo::HachiActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_hachi_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_hachi_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::HachiInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hachi_info(&mut self, v: super::HachiActivityDetailInfo::HachiActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::HachiInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_hachi_info(&mut self) -> &mut super::HachiActivityDetailInfo::HachiActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::HachiInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::HachiInfo(super::HachiActivityDetailInfo::HachiActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::HachiInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_hachi_info(&mut self) -> super::HachiActivityDetailInfo::HachiActivityDetailInfo {
        if self.has_hachi_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::HachiInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HachiActivityDetailInfo::HachiActivityDetailInfo::new()
        }
    }

    // .WinterCampActivityDetailInfo winter_camp_info = 2014;

    pub fn winter_camp_info(&self) -> &super::WinterCampActivityDetailInfo::WinterCampActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::WinterCampInfo(ref v)) => v,
            _ => <super::WinterCampActivityDetailInfo::WinterCampActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_winter_camp_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_winter_camp_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::WinterCampInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_winter_camp_info(&mut self, v: super::WinterCampActivityDetailInfo::WinterCampActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::WinterCampInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_winter_camp_info(&mut self) -> &mut super::WinterCampActivityDetailInfo::WinterCampActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::WinterCampInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::WinterCampInfo(super::WinterCampActivityDetailInfo::WinterCampActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::WinterCampInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_winter_camp_info(&mut self) -> super::WinterCampActivityDetailInfo::WinterCampActivityDetailInfo {
        if self.has_winter_camp_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::WinterCampInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::WinterCampActivityDetailInfo::WinterCampActivityDetailInfo::new()
        }
    }

    // .PotionActivityDetailInfo potion_info = 1485;

    pub fn potion_info(&self) -> &super::PotionActivityDetailInfo::PotionActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PotionInfo(ref v)) => v,
            _ => <super::PotionActivityDetailInfo::PotionActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_potion_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_potion_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PotionInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_potion_info(&mut self, v: super::PotionActivityDetailInfo::PotionActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::PotionInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_potion_info(&mut self) -> &mut super::PotionActivityDetailInfo::PotionActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::PotionInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::PotionInfo(super::PotionActivityDetailInfo::PotionActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PotionInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_potion_info(&mut self) -> super::PotionActivityDetailInfo::PotionActivityDetailInfo {
        if self.has_potion_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::PotionInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PotionActivityDetailInfo::PotionActivityDetailInfo::new()
        }
    }

    // .TanukiTravelActivityDetailInfo tanuki_travel_activity_info = 944;

    pub fn tanuki_travel_activity_info(&self) -> &super::TanukiTravelActivityDetailInfo::TanukiTravelActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TanukiTravelActivityInfo(ref v)) => v,
            _ => <super::TanukiTravelActivityDetailInfo::TanukiTravelActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_tanuki_travel_activity_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_tanuki_travel_activity_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TanukiTravelActivityInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tanuki_travel_activity_info(&mut self, v: super::TanukiTravelActivityDetailInfo::TanukiTravelActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::TanukiTravelActivityInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tanuki_travel_activity_info(&mut self) -> &mut super::TanukiTravelActivityDetailInfo::TanukiTravelActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::TanukiTravelActivityInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::TanukiTravelActivityInfo(super::TanukiTravelActivityDetailInfo::TanukiTravelActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TanukiTravelActivityInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tanuki_travel_activity_info(&mut self) -> super::TanukiTravelActivityDetailInfo::TanukiTravelActivityDetailInfo {
        if self.has_tanuki_travel_activity_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::TanukiTravelActivityInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::TanukiTravelActivityDetailInfo::TanukiTravelActivityDetailInfo::new()
        }
    }

    // .LanternRiteActivityDetailInfo lantern_rite_activity_info = 1980;

    pub fn lantern_rite_activity_info(&self) -> &super::LanternRiteActivityDetailInfo::LanternRiteActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::LanternRiteActivityInfo(ref v)) => v,
            _ => <super::LanternRiteActivityDetailInfo::LanternRiteActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_lantern_rite_activity_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_lantern_rite_activity_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::LanternRiteActivityInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_lantern_rite_activity_info(&mut self, v: super::LanternRiteActivityDetailInfo::LanternRiteActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::LanternRiteActivityInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_lantern_rite_activity_info(&mut self) -> &mut super::LanternRiteActivityDetailInfo::LanternRiteActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::LanternRiteActivityInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::LanternRiteActivityInfo(super::LanternRiteActivityDetailInfo::LanternRiteActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::LanternRiteActivityInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_lantern_rite_activity_info(&mut self) -> super::LanternRiteActivityDetailInfo::LanternRiteActivityDetailInfo {
        if self.has_lantern_rite_activity_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::LanternRiteActivityInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LanternRiteActivityDetailInfo::LanternRiteActivityDetailInfo::new()
        }
    }

    // .MichiaeMatsuriActivityDetailInfo michiae_matsuri_info = 114;

    pub fn michiae_matsuri_info(&self) -> &super::MichiaeMatsuriActivityDetailInfo::MichiaeMatsuriActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MichiaeMatsuriInfo(ref v)) => v,
            _ => <super::MichiaeMatsuriActivityDetailInfo::MichiaeMatsuriActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_michiae_matsuri_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_michiae_matsuri_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MichiaeMatsuriInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_michiae_matsuri_info(&mut self, v: super::MichiaeMatsuriActivityDetailInfo::MichiaeMatsuriActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::MichiaeMatsuriInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_michiae_matsuri_info(&mut self) -> &mut super::MichiaeMatsuriActivityDetailInfo::MichiaeMatsuriActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::MichiaeMatsuriInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::MichiaeMatsuriInfo(super::MichiaeMatsuriActivityDetailInfo::MichiaeMatsuriActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MichiaeMatsuriInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_michiae_matsuri_info(&mut self) -> super::MichiaeMatsuriActivityDetailInfo::MichiaeMatsuriActivityDetailInfo {
        if self.has_michiae_matsuri_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::MichiaeMatsuriInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MichiaeMatsuriActivityDetailInfo::MichiaeMatsuriActivityDetailInfo::new()
        }
    }

    // .BartenderActivityDetailInfo bartender_info = 1441;

    pub fn bartender_info(&self) -> &super::BartenderActivityDetailInfo::BartenderActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BartenderInfo(ref v)) => v,
            _ => <super::BartenderActivityDetailInfo::BartenderActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_bartender_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_bartender_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BartenderInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bartender_info(&mut self, v: super::BartenderActivityDetailInfo::BartenderActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::BartenderInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bartender_info(&mut self) -> &mut super::BartenderActivityDetailInfo::BartenderActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::BartenderInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::BartenderInfo(super::BartenderActivityDetailInfo::BartenderActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BartenderInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bartender_info(&mut self) -> super::BartenderActivityDetailInfo::BartenderActivityDetailInfo {
        if self.has_bartender_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::BartenderInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BartenderActivityDetailInfo::BartenderActivityDetailInfo::new()
        }
    }

    // .UgcActivityDetailInfo ugc_info = 1795;

    pub fn ugc_info(&self) -> &super::UgcActivityDetailInfo::UgcActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::UgcInfo(ref v)) => v,
            _ => <super::UgcActivityDetailInfo::UgcActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ugc_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_ugc_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::UgcInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ugc_info(&mut self, v: super::UgcActivityDetailInfo::UgcActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::UgcInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ugc_info(&mut self) -> &mut super::UgcActivityDetailInfo::UgcActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::UgcInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::UgcInfo(super::UgcActivityDetailInfo::UgcActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::UgcInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ugc_info(&mut self) -> super::UgcActivityDetailInfo::UgcActivityDetailInfo {
        if self.has_ugc_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::UgcInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::UgcActivityDetailInfo::UgcActivityDetailInfo::new()
        }
    }

    // .CrystalLinkActivityDetailInfo crystal_link_info = 1301;

    pub fn crystal_link_info(&self) -> &super::CrystalLinkActivityDetailInfo::CrystalLinkActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::CrystalLinkInfo(ref v)) => v,
            _ => <super::CrystalLinkActivityDetailInfo::CrystalLinkActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_crystal_link_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_crystal_link_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::CrystalLinkInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_crystal_link_info(&mut self, v: super::CrystalLinkActivityDetailInfo::CrystalLinkActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::CrystalLinkInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_crystal_link_info(&mut self) -> &mut super::CrystalLinkActivityDetailInfo::CrystalLinkActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::CrystalLinkInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::CrystalLinkInfo(super::CrystalLinkActivityDetailInfo::CrystalLinkActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::CrystalLinkInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_crystal_link_info(&mut self) -> super::CrystalLinkActivityDetailInfo::CrystalLinkActivityDetailInfo {
        if self.has_crystal_link_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::CrystalLinkInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CrystalLinkActivityDetailInfo::CrystalLinkActivityDetailInfo::new()
        }
    }

    // .IrodoriActivityDetailInfo irodori_info = 54;

    pub fn irodori_info(&self) -> &super::IrodoriActivityDetailInfo::IrodoriActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::IrodoriInfo(ref v)) => v,
            _ => <super::IrodoriActivityDetailInfo::IrodoriActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_irodori_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_irodori_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::IrodoriInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_irodori_info(&mut self, v: super::IrodoriActivityDetailInfo::IrodoriActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::IrodoriInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_irodori_info(&mut self) -> &mut super::IrodoriActivityDetailInfo::IrodoriActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::IrodoriInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::IrodoriInfo(super::IrodoriActivityDetailInfo::IrodoriActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::IrodoriInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_irodori_info(&mut self) -> super::IrodoriActivityDetailInfo::IrodoriActivityDetailInfo {
        if self.has_irodori_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::IrodoriInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IrodoriActivityDetailInfo::IrodoriActivityDetailInfo::new()
        }
    }

    // .PhotoActivityDetailInfo photo_info = 1492;

    pub fn photo_info(&self) -> &super::PhotoActivityDetailInfo::PhotoActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PhotoInfo(ref v)) => v,
            _ => <super::PhotoActivityDetailInfo::PhotoActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_photo_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_photo_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PhotoInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_photo_info(&mut self, v: super::PhotoActivityDetailInfo::PhotoActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::PhotoInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_photo_info(&mut self) -> &mut super::PhotoActivityDetailInfo::PhotoActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::PhotoInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::PhotoInfo(super::PhotoActivityDetailInfo::PhotoActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PhotoInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_photo_info(&mut self) -> super::PhotoActivityDetailInfo::PhotoActivityDetailInfo {
        if self.has_photo_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::PhotoInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PhotoActivityDetailInfo::PhotoActivityDetailInfo::new()
        }
    }

    // .SpiceActivityDetailInfo spice_info = 446;

    pub fn spice_info(&self) -> &super::SpiceActivityDetailInfo::SpiceActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SpiceInfo(ref v)) => v,
            _ => <super::SpiceActivityDetailInfo::SpiceActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_spice_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_spice_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SpiceInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_spice_info(&mut self, v: super::SpiceActivityDetailInfo::SpiceActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::SpiceInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_spice_info(&mut self) -> &mut super::SpiceActivityDetailInfo::SpiceActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::SpiceInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::SpiceInfo(super::SpiceActivityDetailInfo::SpiceActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SpiceInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_spice_info(&mut self) -> super::SpiceActivityDetailInfo::SpiceActivityDetailInfo {
        if self.has_spice_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::SpiceInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SpiceActivityDetailInfo::SpiceActivityDetailInfo::new()
        }
    }

    // .GachaActivityDetailInfo gacha_info = 1192;

    pub fn gacha_info(&self) -> &super::GachaActivityDetailInfo::GachaActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GachaInfo(ref v)) => v,
            _ => <super::GachaActivityDetailInfo::GachaActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_gacha_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_gacha_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GachaInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gacha_info(&mut self, v: super::GachaActivityDetailInfo::GachaActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::GachaInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gacha_info(&mut self) -> &mut super::GachaActivityDetailInfo::GachaActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::GachaInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::GachaInfo(super::GachaActivityDetailInfo::GachaActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GachaInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gacha_info(&mut self) -> super::GachaActivityDetailInfo::GachaActivityDetailInfo {
        if self.has_gacha_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::GachaInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GachaActivityDetailInfo::GachaActivityDetailInfo::new()
        }
    }

    // .LuminanceStoneChallengeActivityDetailInfo luminance_stone_challenge_info = 38;

    pub fn luminance_stone_challenge_info(&self) -> &super::LuminanceStoneChallengeActivityDetailInfo::LuminanceStoneChallengeActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::LuminanceStoneChallengeInfo(ref v)) => v,
            _ => <super::LuminanceStoneChallengeActivityDetailInfo::LuminanceStoneChallengeActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_luminance_stone_challenge_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_luminance_stone_challenge_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::LuminanceStoneChallengeInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_luminance_stone_challenge_info(&mut self, v: super::LuminanceStoneChallengeActivityDetailInfo::LuminanceStoneChallengeActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::LuminanceStoneChallengeInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_luminance_stone_challenge_info(&mut self) -> &mut super::LuminanceStoneChallengeActivityDetailInfo::LuminanceStoneChallengeActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::LuminanceStoneChallengeInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::LuminanceStoneChallengeInfo(super::LuminanceStoneChallengeActivityDetailInfo::LuminanceStoneChallengeActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::LuminanceStoneChallengeInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_luminance_stone_challenge_info(&mut self) -> super::LuminanceStoneChallengeActivityDetailInfo::LuminanceStoneChallengeActivityDetailInfo {
        if self.has_luminance_stone_challenge_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::LuminanceStoneChallengeInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LuminanceStoneChallengeActivityDetailInfo::LuminanceStoneChallengeActivityDetailInfo::new()
        }
    }

    // .RogueDiaryActivityDetailInfo rogue_diary_info = 427;

    pub fn rogue_diary_info(&self) -> &super::RogueDiaryActivityDetailInfo::RogueDiaryActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::RogueDiaryInfo(ref v)) => v,
            _ => <super::RogueDiaryActivityDetailInfo::RogueDiaryActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rogue_diary_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_rogue_diary_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::RogueDiaryInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rogue_diary_info(&mut self, v: super::RogueDiaryActivityDetailInfo::RogueDiaryActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::RogueDiaryInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rogue_diary_info(&mut self) -> &mut super::RogueDiaryActivityDetailInfo::RogueDiaryActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::RogueDiaryInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::RogueDiaryInfo(super::RogueDiaryActivityDetailInfo::RogueDiaryActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::RogueDiaryInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rogue_diary_info(&mut self) -> super::RogueDiaryActivityDetailInfo::RogueDiaryActivityDetailInfo {
        if self.has_rogue_diary_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::RogueDiaryInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueDiaryActivityDetailInfo::RogueDiaryActivityDetailInfo::new()
        }
    }

    // .SummerTimeV2DetailInfo summer_time_v2_info = 910;

    pub fn summer_time_v2_info(&self) -> &super::SummerTimeV2DetailInfo::SummerTimeV2DetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SummerTimeV2Info(ref v)) => v,
            _ => <super::SummerTimeV2DetailInfo::SummerTimeV2DetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_summer_time_v2_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_summer_time_v2_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SummerTimeV2Info(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_summer_time_v2_info(&mut self, v: super::SummerTimeV2DetailInfo::SummerTimeV2DetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::SummerTimeV2Info(v))
    }

    // Mutable pointer to the field.
    pub fn mut_summer_time_v2_info(&mut self) -> &mut super::SummerTimeV2DetailInfo::SummerTimeV2DetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::SummerTimeV2Info(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::SummerTimeV2Info(super::SummerTimeV2DetailInfo::SummerTimeV2DetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SummerTimeV2Info(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_summer_time_v2_info(&mut self) -> super::SummerTimeV2DetailInfo::SummerTimeV2DetailInfo {
        if self.has_summer_time_v2_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::SummerTimeV2Info(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SummerTimeV2DetailInfo::SummerTimeV2DetailInfo::new()
        }
    }

    // .IslandPartyDetailInfo island_party_info = 1044;

    pub fn island_party_info(&self) -> &super::IslandPartyDetailInfo::IslandPartyDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::IslandPartyInfo(ref v)) => v,
            _ => <super::IslandPartyDetailInfo::IslandPartyDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_island_party_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_island_party_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::IslandPartyInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_island_party_info(&mut self, v: super::IslandPartyDetailInfo::IslandPartyDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::IslandPartyInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_island_party_info(&mut self) -> &mut super::IslandPartyDetailInfo::IslandPartyDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::IslandPartyInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::IslandPartyInfo(super::IslandPartyDetailInfo::IslandPartyDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::IslandPartyInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_island_party_info(&mut self) -> super::IslandPartyDetailInfo::IslandPartyDetailInfo {
        if self.has_island_party_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::IslandPartyInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IslandPartyDetailInfo::IslandPartyDetailInfo::new()
        }
    }

    // .GearActivityDetailInfo gear_info = 1263;

    pub fn gear_info(&self) -> &super::GearActivityDetailInfo::GearActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GearInfo(ref v)) => v,
            _ => <super::GearActivityDetailInfo::GearActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_gear_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_gear_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GearInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gear_info(&mut self, v: super::GearActivityDetailInfo::GearActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::GearInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gear_info(&mut self) -> &mut super::GearActivityDetailInfo::GearActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::GearInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::GearInfo(super::GearActivityDetailInfo::GearActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GearInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gear_info(&mut self) -> super::GearActivityDetailInfo::GearActivityDetailInfo {
        if self.has_gear_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::GearInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GearActivityDetailInfo::GearActivityDetailInfo::new()
        }
    }

    // .GravenInnocenceDetailInfo graven_innocence_info = 356;

    pub fn graven_innocence_info(&self) -> &super::GravenInnocenceDetailInfo::GravenInnocenceDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GravenInnocenceInfo(ref v)) => v,
            _ => <super::GravenInnocenceDetailInfo::GravenInnocenceDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_graven_innocence_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_graven_innocence_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GravenInnocenceInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_graven_innocence_info(&mut self, v: super::GravenInnocenceDetailInfo::GravenInnocenceDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::GravenInnocenceInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_graven_innocence_info(&mut self) -> &mut super::GravenInnocenceDetailInfo::GravenInnocenceDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::GravenInnocenceInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::GravenInnocenceInfo(super::GravenInnocenceDetailInfo::GravenInnocenceDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GravenInnocenceInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_graven_innocence_info(&mut self) -> super::GravenInnocenceDetailInfo::GravenInnocenceDetailInfo {
        if self.has_graven_innocence_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::GravenInnocenceInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GravenInnocenceDetailInfo::GravenInnocenceDetailInfo::new()
        }
    }

    // .InstableSprayDetailInfo instable_spray_info = 508;

    pub fn instable_spray_info(&self) -> &super::InstableSprayDetailInfo::InstableSprayDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::InstableSprayInfo(ref v)) => v,
            _ => <super::InstableSprayDetailInfo::InstableSprayDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_instable_spray_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_instable_spray_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::InstableSprayInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_instable_spray_info(&mut self, v: super::InstableSprayDetailInfo::InstableSprayDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::InstableSprayInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_instable_spray_info(&mut self) -> &mut super::InstableSprayDetailInfo::InstableSprayDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::InstableSprayInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::InstableSprayInfo(super::InstableSprayDetailInfo::InstableSprayDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::InstableSprayInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_instable_spray_info(&mut self) -> super::InstableSprayDetailInfo::InstableSprayDetailInfo {
        if self.has_instable_spray_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::InstableSprayInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::InstableSprayDetailInfo::InstableSprayDetailInfo::new()
        }
    }

    // .MuqadasPotionActivityDetailInfo muqadas_potion_info = 1474;

    pub fn muqadas_potion_info(&self) -> &super::MuqadasPotionActivityDetailInfo::MuqadasPotionActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MuqadasPotionInfo(ref v)) => v,
            _ => <super::MuqadasPotionActivityDetailInfo::MuqadasPotionActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_muqadas_potion_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_muqadas_potion_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MuqadasPotionInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_muqadas_potion_info(&mut self, v: super::MuqadasPotionActivityDetailInfo::MuqadasPotionActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::MuqadasPotionInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_muqadas_potion_info(&mut self) -> &mut super::MuqadasPotionActivityDetailInfo::MuqadasPotionActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::MuqadasPotionInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::MuqadasPotionInfo(super::MuqadasPotionActivityDetailInfo::MuqadasPotionActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MuqadasPotionInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_muqadas_potion_info(&mut self) -> super::MuqadasPotionActivityDetailInfo::MuqadasPotionActivityDetailInfo {
        if self.has_muqadas_potion_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::MuqadasPotionInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MuqadasPotionActivityDetailInfo::MuqadasPotionActivityDetailInfo::new()
        }
    }

    // .TreasureSeelieActivityDetailInfo treasure_seelie_info = 1251;

    pub fn treasure_seelie_info(&self) -> &super::TreasureSeelieActivityDetailInfo::TreasureSeelieActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TreasureSeelieInfo(ref v)) => v,
            _ => <super::TreasureSeelieActivityDetailInfo::TreasureSeelieActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_treasure_seelie_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_treasure_seelie_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TreasureSeelieInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_treasure_seelie_info(&mut self, v: super::TreasureSeelieActivityDetailInfo::TreasureSeelieActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::TreasureSeelieInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_treasure_seelie_info(&mut self) -> &mut super::TreasureSeelieActivityDetailInfo::TreasureSeelieActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::TreasureSeelieInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::TreasureSeelieInfo(super::TreasureSeelieActivityDetailInfo::TreasureSeelieActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TreasureSeelieInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_treasure_seelie_info(&mut self) -> super::TreasureSeelieActivityDetailInfo::TreasureSeelieActivityDetailInfo {
        if self.has_treasure_seelie_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::TreasureSeelieInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::TreasureSeelieActivityDetailInfo::TreasureSeelieActivityDetailInfo::new()
        }
    }

    // .RockBoardExploreDetailInfo rock_board_explore_info = 1028;

    pub fn rock_board_explore_info(&self) -> &super::RockBoardExploreDetailInfo::RockBoardExploreDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::RockBoardExploreInfo(ref v)) => v,
            _ => <super::RockBoardExploreDetailInfo::RockBoardExploreDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rock_board_explore_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_rock_board_explore_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::RockBoardExploreInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rock_board_explore_info(&mut self, v: super::RockBoardExploreDetailInfo::RockBoardExploreDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::RockBoardExploreInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rock_board_explore_info(&mut self) -> &mut super::RockBoardExploreDetailInfo::RockBoardExploreDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::RockBoardExploreInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::RockBoardExploreInfo(super::RockBoardExploreDetailInfo::RockBoardExploreDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::RockBoardExploreInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rock_board_explore_info(&mut self) -> super::RockBoardExploreDetailInfo::RockBoardExploreDetailInfo {
        if self.has_rock_board_explore_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::RockBoardExploreInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RockBoardExploreDetailInfo::RockBoardExploreDetailInfo::new()
        }
    }

    // .VintageActivityDetailInfo vintage_info = 1465;

    pub fn vintage_info(&self) -> &super::VintageActivityDetailInfo::VintageActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::VintageInfo(ref v)) => v,
            _ => <super::VintageActivityDetailInfo::VintageActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_vintage_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_vintage_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::VintageInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_vintage_info(&mut self, v: super::VintageActivityDetailInfo::VintageActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::VintageInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_vintage_info(&mut self) -> &mut super::VintageActivityDetailInfo::VintageActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::VintageInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::VintageInfo(super::VintageActivityDetailInfo::VintageActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::VintageInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_vintage_info(&mut self) -> super::VintageActivityDetailInfo::VintageActivityDetailInfo {
        if self.has_vintage_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::VintageInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::VintageActivityDetailInfo::VintageActivityDetailInfo::new()
        }
    }

    // .WindFieldDetailInfo wind_field_info = 768;

    pub fn wind_field_info(&self) -> &super::WindFieldDetailInfo::WindFieldDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::WindFieldInfo(ref v)) => v,
            _ => <super::WindFieldDetailInfo::WindFieldDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_wind_field_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_wind_field_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::WindFieldInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_wind_field_info(&mut self, v: super::WindFieldDetailInfo::WindFieldDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::WindFieldInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_wind_field_info(&mut self) -> &mut super::WindFieldDetailInfo::WindFieldDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::WindFieldInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::WindFieldInfo(super::WindFieldDetailInfo::WindFieldDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::WindFieldInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_wind_field_info(&mut self) -> super::WindFieldDetailInfo::WindFieldDetailInfo {
        if self.has_wind_field_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::WindFieldInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::WindFieldDetailInfo::WindFieldDetailInfo::new()
        }
    }

    // .FungusFighterDetailInfo fungus_fighter_info = 834;

    pub fn fungus_fighter_info(&self) -> &super::FungusFighterDetailInfo::FungusFighterDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FungusFighterInfo(ref v)) => v,
            _ => <super::FungusFighterDetailInfo::FungusFighterDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_fungus_fighter_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_fungus_fighter_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FungusFighterInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fungus_fighter_info(&mut self, v: super::FungusFighterDetailInfo::FungusFighterDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::FungusFighterInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fungus_fighter_info(&mut self) -> &mut super::FungusFighterDetailInfo::FungusFighterDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::FungusFighterInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::FungusFighterInfo(super::FungusFighterDetailInfo::FungusFighterDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FungusFighterInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fungus_fighter_info(&mut self) -> super::FungusFighterDetailInfo::FungusFighterDetailInfo {
        if self.has_fungus_fighter_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::FungusFighterInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FungusFighterDetailInfo::FungusFighterDetailInfo::new()
        }
    }

    // .CharAmusementDetailInfo char_amusement_info = 1222;

    pub fn char_amusement_info(&self) -> &super::CharAmusementDetailInfo::CharAmusementDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::CharAmusementInfo(ref v)) => v,
            _ => <super::CharAmusementDetailInfo::CharAmusementDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_char_amusement_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_char_amusement_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::CharAmusementInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_char_amusement_info(&mut self, v: super::CharAmusementDetailInfo::CharAmusementDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::CharAmusementInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_char_amusement_info(&mut self) -> &mut super::CharAmusementDetailInfo::CharAmusementDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::CharAmusementInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::CharAmusementInfo(super::CharAmusementDetailInfo::CharAmusementDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::CharAmusementInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_char_amusement_info(&mut self) -> super::CharAmusementDetailInfo::CharAmusementDetailInfo {
        if self.has_char_amusement_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::CharAmusementInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CharAmusementDetailInfo::CharAmusementDetailInfo::new()
        }
    }

    // .EffigyChallengeV2DetailInfo effigy_challenge_info = 1275;

    pub fn effigy_challenge_info(&self) -> &super::EffigyChallengeV2DetailInfo::EffigyChallengeV2DetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::EffigyChallengeInfo(ref v)) => v,
            _ => <super::EffigyChallengeV2DetailInfo::EffigyChallengeV2DetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_effigy_challenge_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_effigy_challenge_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::EffigyChallengeInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_effigy_challenge_info(&mut self, v: super::EffigyChallengeV2DetailInfo::EffigyChallengeV2DetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::EffigyChallengeInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_effigy_challenge_info(&mut self) -> &mut super::EffigyChallengeV2DetailInfo::EffigyChallengeV2DetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::EffigyChallengeInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::EffigyChallengeInfo(super::EffigyChallengeV2DetailInfo::EffigyChallengeV2DetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::EffigyChallengeInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_effigy_challenge_info(&mut self) -> super::EffigyChallengeV2DetailInfo::EffigyChallengeV2DetailInfo {
        if self.has_effigy_challenge_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::EffigyChallengeInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EffigyChallengeV2DetailInfo::EffigyChallengeV2DetailInfo::new()
        }
    }

    // .CoinCollectDetailInfo coin_collect_info = 839;

    pub fn coin_collect_info(&self) -> &super::CoinCollectDetailInfo::CoinCollectDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::CoinCollectInfo(ref v)) => v,
            _ => <super::CoinCollectDetailInfo::CoinCollectDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_coin_collect_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_coin_collect_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::CoinCollectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_coin_collect_info(&mut self, v: super::CoinCollectDetailInfo::CoinCollectDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::CoinCollectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_coin_collect_info(&mut self) -> &mut super::CoinCollectDetailInfo::CoinCollectDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::CoinCollectInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::CoinCollectInfo(super::CoinCollectDetailInfo::CoinCollectDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::CoinCollectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_coin_collect_info(&mut self) -> super::CoinCollectDetailInfo::CoinCollectDetailInfo {
        if self.has_coin_collect_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::CoinCollectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CoinCollectDetailInfo::CoinCollectDetailInfo::new()
        }
    }

    // .BrickBreakerDetailInfo brick_breaker_info = 551;

    pub fn brick_breaker_info(&self) -> &super::BrickBreakerDetailInfo::BrickBreakerDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BrickBreakerInfo(ref v)) => v,
            _ => <super::BrickBreakerDetailInfo::BrickBreakerDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_brick_breaker_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_brick_breaker_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BrickBreakerInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_brick_breaker_info(&mut self, v: super::BrickBreakerDetailInfo::BrickBreakerDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::BrickBreakerInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_brick_breaker_info(&mut self) -> &mut super::BrickBreakerDetailInfo::BrickBreakerDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::BrickBreakerInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::BrickBreakerInfo(super::BrickBreakerDetailInfo::BrickBreakerDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::BrickBreakerInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_brick_breaker_info(&mut self) -> super::BrickBreakerDetailInfo::BrickBreakerDetailInfo {
        if self.has_brick_breaker_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::BrickBreakerInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BrickBreakerDetailInfo::BrickBreakerDetailInfo::new()
        }
    }

    // .DuelHeartDetailInfo duel_heart_info = 1670;

    pub fn duel_heart_info(&self) -> &super::DuelHeartDetailInfo::DuelHeartDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::DuelHeartInfo(ref v)) => v,
            _ => <super::DuelHeartDetailInfo::DuelHeartDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_duel_heart_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_duel_heart_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::DuelHeartInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_duel_heart_info(&mut self, v: super::DuelHeartDetailInfo::DuelHeartDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::DuelHeartInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_duel_heart_info(&mut self) -> &mut super::DuelHeartDetailInfo::DuelHeartDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::DuelHeartInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::DuelHeartInfo(super::DuelHeartDetailInfo::DuelHeartDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::DuelHeartInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_duel_heart_info(&mut self) -> super::DuelHeartDetailInfo::DuelHeartDetailInfo {
        if self.has_duel_heart_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::DuelHeartInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DuelHeartDetailInfo::DuelHeartDetailInfo::new()
        }
    }

    // .SeaLampV3DetailInfo sea_lamp_v3_info = 833;

    pub fn sea_lamp_v3_info(&self) -> &super::SeaLampV3DetailInfo::SeaLampV3DetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SeaLampV3Info(ref v)) => v,
            _ => <super::SeaLampV3DetailInfo::SeaLampV3DetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sea_lamp_v3_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_sea_lamp_v3_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SeaLampV3Info(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sea_lamp_v3_info(&mut self, v: super::SeaLampV3DetailInfo::SeaLampV3DetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::SeaLampV3Info(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sea_lamp_v3_info(&mut self) -> &mut super::SeaLampV3DetailInfo::SeaLampV3DetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::SeaLampV3Info(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::SeaLampV3Info(super::SeaLampV3DetailInfo::SeaLampV3DetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SeaLampV3Info(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sea_lamp_v3_info(&mut self) -> super::SeaLampV3DetailInfo::SeaLampV3DetailInfo {
        if self.has_sea_lamp_v3_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::SeaLampV3Info(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SeaLampV3DetailInfo::SeaLampV3DetailInfo::new()
        }
    }

    // .TeamChainDetailInfo team_chain_info = 1165;

    pub fn team_chain_info(&self) -> &super::TeamChainDetailInfo::TeamChainDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TeamChainInfo(ref v)) => v,
            _ => <super::TeamChainDetailInfo::TeamChainDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_team_chain_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_team_chain_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TeamChainInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_team_chain_info(&mut self, v: super::TeamChainDetailInfo::TeamChainDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::TeamChainInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_team_chain_info(&mut self) -> &mut super::TeamChainDetailInfo::TeamChainDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::TeamChainInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::TeamChainInfo(super::TeamChainDetailInfo::TeamChainDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::TeamChainInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_team_chain_info(&mut self) -> super::TeamChainDetailInfo::TeamChainDetailInfo {
        if self.has_team_chain_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::TeamChainInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::TeamChainDetailInfo::TeamChainDetailInfo::new()
        }
    }

    // .ElectroherculesBattleDetailInfo electrohercules_battle_info = 981;

    pub fn electrohercules_battle_info(&self) -> &super::ElectroherculesBattleDetailInfo::ElectroherculesBattleDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ElectroherculesBattleInfo(ref v)) => v,
            _ => <super::ElectroherculesBattleDetailInfo::ElectroherculesBattleDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_electrohercules_battle_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_electrohercules_battle_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ElectroherculesBattleInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_electrohercules_battle_info(&mut self, v: super::ElectroherculesBattleDetailInfo::ElectroherculesBattleDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::ElectroherculesBattleInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_electrohercules_battle_info(&mut self) -> &mut super::ElectroherculesBattleDetailInfo::ElectroherculesBattleDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::ElectroherculesBattleInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::ElectroherculesBattleInfo(super::ElectroherculesBattleDetailInfo::ElectroherculesBattleDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ElectroherculesBattleInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_electrohercules_battle_info(&mut self) -> super::ElectroherculesBattleDetailInfo::ElectroherculesBattleDetailInfo {
        if self.has_electrohercules_battle_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::ElectroherculesBattleInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ElectroherculesBattleDetailInfo::ElectroherculesBattleDetailInfo::new()
        }
    }

    // .GCGFestivalDetailInfo gcg_festival_info = 1664;

    pub fn gcg_festival_info(&self) -> &super::GCGFestivalDetailInfo::GCGFestivalDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GcgFestivalInfo(ref v)) => v,
            _ => <super::GCGFestivalDetailInfo::GCGFestivalDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_gcg_festival_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_gcg_festival_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GcgFestivalInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gcg_festival_info(&mut self, v: super::GCGFestivalDetailInfo::GCGFestivalDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::GcgFestivalInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gcg_festival_info(&mut self) -> &mut super::GCGFestivalDetailInfo::GCGFestivalDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::GcgFestivalInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::GcgFestivalInfo(super::GCGFestivalDetailInfo::GCGFestivalDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GcgFestivalInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gcg_festival_info(&mut self) -> super::GCGFestivalDetailInfo::GCGFestivalDetailInfo {
        if self.has_gcg_festival_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::GcgFestivalInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GCGFestivalDetailInfo::GCGFestivalDetailInfo::new()
        }
    }

    // .FleurFairV2DetailInfo fleur_fair_v2_info = 1982;

    pub fn fleur_fair_v2_info(&self) -> &super::FleurFairV2DetailInfo::FleurFairV2DetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FleurFairV2Info(ref v)) => v,
            _ => <super::FleurFairV2DetailInfo::FleurFairV2DetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_fleur_fair_v2_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_fleur_fair_v2_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FleurFairV2Info(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fleur_fair_v2_info(&mut self, v: super::FleurFairV2DetailInfo::FleurFairV2DetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::FleurFairV2Info(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fleur_fair_v2_info(&mut self) -> &mut super::FleurFairV2DetailInfo::FleurFairV2DetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::FleurFairV2Info(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::FleurFairV2Info(super::FleurFairV2DetailInfo::FleurFairV2DetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FleurFairV2Info(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fleur_fair_v2_info(&mut self) -> super::FleurFairV2DetailInfo::FleurFairV2DetailInfo {
        if self.has_fleur_fair_v2_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::FleurFairV2Info(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FleurFairV2DetailInfo::FleurFairV2DetailInfo::new()
        }
    }

    // .FungusFighterV2DetailInfo fungus_fighter_v2_info = 1541;

    pub fn fungus_fighter_v2_info(&self) -> &super::FungusFighterV2DetailInfo::FungusFighterV2DetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FungusFighterV2Info(ref v)) => v,
            _ => <super::FungusFighterV2DetailInfo::FungusFighterV2DetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_fungus_fighter_v2_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_fungus_fighter_v2_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FungusFighterV2Info(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fungus_fighter_v2_info(&mut self, v: super::FungusFighterV2DetailInfo::FungusFighterV2DetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::FungusFighterV2Info(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fungus_fighter_v2_info(&mut self) -> &mut super::FungusFighterV2DetailInfo::FungusFighterV2DetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::FungusFighterV2Info(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::FungusFighterV2Info(super::FungusFighterV2DetailInfo::FungusFighterV2DetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FungusFighterV2Info(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fungus_fighter_v2_info(&mut self) -> super::FungusFighterV2DetailInfo::FungusFighterV2DetailInfo {
        if self.has_fungus_fighter_v2_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::FungusFighterV2Info(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FungusFighterV2DetailInfo::FungusFighterV2DetailInfo::new()
        }
    }

    // .AkaFesDetailInfo aka_fes_info = 1524;

    pub fn aka_fes_info(&self) -> &super::AkaFesDetailInfo::AkaFesDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::AkaFesInfo(ref v)) => v,
            _ => <super::AkaFesDetailInfo::AkaFesDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_aka_fes_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_aka_fes_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::AkaFesInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_aka_fes_info(&mut self, v: super::AkaFesDetailInfo::AkaFesDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::AkaFesInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_aka_fes_info(&mut self) -> &mut super::AkaFesDetailInfo::AkaFesDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::AkaFesInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::AkaFesInfo(super::AkaFesDetailInfo::AkaFesDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::AkaFesInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_aka_fes_info(&mut self) -> super::AkaFesDetailInfo::AkaFesDetailInfo {
        if self.has_aka_fes_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::AkaFesInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AkaFesDetailInfo::AkaFesDetailInfo::new()
        }
    }

    // .SandwormCannonDetailInfo sandworm_cannon_detail_info = 626;

    pub fn sandworm_cannon_detail_info(&self) -> &super::SandwormCannonDetailInfo::SandwormCannonDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SandwormCannonDetailInfo(ref v)) => v,
            _ => <super::SandwormCannonDetailInfo::SandwormCannonDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sandworm_cannon_detail_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_sandworm_cannon_detail_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SandwormCannonDetailInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sandworm_cannon_detail_info(&mut self, v: super::SandwormCannonDetailInfo::SandwormCannonDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::SandwormCannonDetailInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sandworm_cannon_detail_info(&mut self) -> &mut super::SandwormCannonDetailInfo::SandwormCannonDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::SandwormCannonDetailInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::SandwormCannonDetailInfo(super::SandwormCannonDetailInfo::SandwormCannonDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SandwormCannonDetailInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sandworm_cannon_detail_info(&mut self) -> super::SandwormCannonDetailInfo::SandwormCannonDetailInfo {
        if self.has_sandworm_cannon_detail_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::SandwormCannonDetailInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SandwormCannonDetailInfo::SandwormCannonDetailInfo::new()
        }
    }

    // .SorushTrialDetailInfo sorush_trial_info = 1077;

    pub fn sorush_trial_info(&self) -> &super::SorushTrialDetailInfo::SorushTrialDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SorushTrialInfo(ref v)) => v,
            _ => <super::SorushTrialDetailInfo::SorushTrialDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sorush_trial_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_sorush_trial_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SorushTrialInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sorush_trial_info(&mut self, v: super::SorushTrialDetailInfo::SorushTrialDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::SorushTrialInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sorush_trial_info(&mut self) -> &mut super::SorushTrialDetailInfo::SorushTrialDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::SorushTrialInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::SorushTrialInfo(super::SorushTrialDetailInfo::SorushTrialDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::SorushTrialInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sorush_trial_info(&mut self) -> super::SorushTrialDetailInfo::SorushTrialDetailInfo {
        if self.has_sorush_trial_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::SorushTrialInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SorushTrialDetailInfo::SorushTrialDetailInfo::new()
        }
    }

    // .JourneyInfo journey_info = 1869;

    pub fn journey_info(&self) -> &super::JourneyInfo::JourneyInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::JourneyInfo(ref v)) => v,
            _ => <super::JourneyInfo::JourneyInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_journey_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_journey_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::JourneyInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_journey_info(&mut self, v: super::JourneyInfo::JourneyInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::JourneyInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_journey_info(&mut self) -> &mut super::JourneyInfo::JourneyInfo {
        if let ::std::option::Option::Some(activity_info::Detail::JourneyInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::JourneyInfo(super::JourneyInfo::JourneyInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::JourneyInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_journey_info(&mut self) -> super::JourneyInfo::JourneyInfo {
        if self.has_journey_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::JourneyInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JourneyInfo::JourneyInfo::new()
        }
    }

    // .EffigyChallengeV4Info effigy_challenge_v4_info = 1321;

    pub fn effigy_challenge_v4_info(&self) -> &super::EffigyChallengeV4Info::EffigyChallengeV4Info {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::EffigyChallengeV4Info(ref v)) => v,
            _ => <super::EffigyChallengeV4Info::EffigyChallengeV4Info as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_effigy_challenge_v4_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_effigy_challenge_v4_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::EffigyChallengeV4Info(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_effigy_challenge_v4_info(&mut self, v: super::EffigyChallengeV4Info::EffigyChallengeV4Info) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::EffigyChallengeV4Info(v))
    }

    // Mutable pointer to the field.
    pub fn mut_effigy_challenge_v4_info(&mut self) -> &mut super::EffigyChallengeV4Info::EffigyChallengeV4Info {
        if let ::std::option::Option::Some(activity_info::Detail::EffigyChallengeV4Info(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::EffigyChallengeV4Info(super::EffigyChallengeV4Info::EffigyChallengeV4Info::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::EffigyChallengeV4Info(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_effigy_challenge_v4_info(&mut self) -> super::EffigyChallengeV4Info::EffigyChallengeV4Info {
        if self.has_effigy_challenge_v4_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::EffigyChallengeV4Info(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EffigyChallengeV4Info::EffigyChallengeV4Info::new()
        }
    }

    // .GcgPveInfo gcg_pve_info = 1304;

    pub fn gcg_pve_info(&self) -> &super::GcgPveInfo::GcgPveInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GcgPveInfo(ref v)) => v,
            _ => <super::GcgPveInfo::GcgPveInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_gcg_pve_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_gcg_pve_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GcgPveInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gcg_pve_info(&mut self, v: super::GcgPveInfo::GcgPveInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::GcgPveInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gcg_pve_info(&mut self) -> &mut super::GcgPveInfo::GcgPveInfo {
        if let ::std::option::Option::Some(activity_info::Detail::GcgPveInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::GcgPveInfo(super::GcgPveInfo::GcgPveInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GcgPveInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gcg_pve_info(&mut self) -> super::GcgPveInfo::GcgPveInfo {
        if self.has_gcg_pve_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::GcgPveInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GcgPveInfo::GcgPveInfo::new()
        }
    }

    // .UgcV2Info ugc_v2_info = 991;

    pub fn ugc_v2_info(&self) -> &super::UgcV2Info::UgcV2Info {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::UgcV2Info(ref v)) => v,
            _ => <super::UgcV2Info::UgcV2Info as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ugc_v2_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_ugc_v2_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::UgcV2Info(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ugc_v2_info(&mut self, v: super::UgcV2Info::UgcV2Info) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::UgcV2Info(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ugc_v2_info(&mut self) -> &mut super::UgcV2Info::UgcV2Info {
        if let ::std::option::Option::Some(activity_info::Detail::UgcV2Info(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::UgcV2Info(super::UgcV2Info::UgcV2Info::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::UgcV2Info(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ugc_v2_info(&mut self) -> super::UgcV2Info::UgcV2Info {
        if self.has_ugc_v2_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::UgcV2Info(v)) => v,
                _ => panic!(),
            }
        } else {
            super::UgcV2Info::UgcV2Info::new()
        }
    }

    // .PenumbraAdventureInfo penumbra_adventure_info = 306;

    pub fn penumbra_adventure_info(&self) -> &super::PenumbraAdventureInfo::PenumbraAdventureInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PenumbraAdventureInfo(ref v)) => v,
            _ => <super::PenumbraAdventureInfo::PenumbraAdventureInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_penumbra_adventure_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_penumbra_adventure_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PenumbraAdventureInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_penumbra_adventure_info(&mut self, v: super::PenumbraAdventureInfo::PenumbraAdventureInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::PenumbraAdventureInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_penumbra_adventure_info(&mut self) -> &mut super::PenumbraAdventureInfo::PenumbraAdventureInfo {
        if let ::std::option::Option::Some(activity_info::Detail::PenumbraAdventureInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::PenumbraAdventureInfo(super::PenumbraAdventureInfo::PenumbraAdventureInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PenumbraAdventureInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_penumbra_adventure_info(&mut self) -> super::PenumbraAdventureInfo::PenumbraAdventureInfo {
        if self.has_penumbra_adventure_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::PenumbraAdventureInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PenumbraAdventureInfo::PenumbraAdventureInfo::new()
        }
    }

    // .AnimalViewInfo animal_view_info = 947;

    pub fn animal_view_info(&self) -> &super::AnimalViewInfo::AnimalViewInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::AnimalViewInfo(ref v)) => v,
            _ => <super::AnimalViewInfo::AnimalViewInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_animal_view_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_animal_view_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::AnimalViewInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_animal_view_info(&mut self, v: super::AnimalViewInfo::AnimalViewInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::AnimalViewInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_animal_view_info(&mut self) -> &mut super::AnimalViewInfo::AnimalViewInfo {
        if let ::std::option::Option::Some(activity_info::Detail::AnimalViewInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::AnimalViewInfo(super::AnimalViewInfo::AnimalViewInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::AnimalViewInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_animal_view_info(&mut self) -> super::AnimalViewInfo::AnimalViewInfo {
        if self.has_animal_view_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::AnimalViewInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AnimalViewInfo::AnimalViewInfo::new()
        }
    }

    // .ActivityMultiCharacterInfo activity_multi_character_info = 1213;

    pub fn activity_multi_character_info(&self) -> &super::ActivityMultiCharacterInfo::ActivityMultiCharacterInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ActivityMultiCharacterInfo(ref v)) => v,
            _ => <super::ActivityMultiCharacterInfo::ActivityMultiCharacterInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_activity_multi_character_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_activity_multi_character_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ActivityMultiCharacterInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_activity_multi_character_info(&mut self, v: super::ActivityMultiCharacterInfo::ActivityMultiCharacterInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::ActivityMultiCharacterInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_activity_multi_character_info(&mut self) -> &mut super::ActivityMultiCharacterInfo::ActivityMultiCharacterInfo {
        if let ::std::option::Option::Some(activity_info::Detail::ActivityMultiCharacterInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::ActivityMultiCharacterInfo(super::ActivityMultiCharacterInfo::ActivityMultiCharacterInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ActivityMultiCharacterInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_activity_multi_character_info(&mut self) -> super::ActivityMultiCharacterInfo::ActivityMultiCharacterInfo {
        if self.has_activity_multi_character_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::ActivityMultiCharacterInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ActivityMultiCharacterInfo::ActivityMultiCharacterInfo::new()
        }
    }

    // .GcgPveInfiniteInfo gcg_pve_infinite_info = 124;

    pub fn gcg_pve_infinite_info(&self) -> &super::GcgPveInfiniteInfo::GcgPveInfiniteInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GcgPveInfiniteInfo(ref v)) => v,
            _ => <super::GcgPveInfiniteInfo::GcgPveInfiniteInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_gcg_pve_infinite_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_gcg_pve_infinite_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GcgPveInfiniteInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gcg_pve_infinite_info(&mut self, v: super::GcgPveInfiniteInfo::GcgPveInfiniteInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::GcgPveInfiniteInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gcg_pve_infinite_info(&mut self) -> &mut super::GcgPveInfiniteInfo::GcgPveInfiniteInfo {
        if let ::std::option::Option::Some(activity_info::Detail::GcgPveInfiniteInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::GcgPveInfiniteInfo(super::GcgPveInfiniteInfo::GcgPveInfiniteInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GcgPveInfiniteInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gcg_pve_infinite_info(&mut self) -> super::GcgPveInfiniteInfo::GcgPveInfiniteInfo {
        if self.has_gcg_pve_infinite_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::GcgPveInfiniteInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GcgPveInfiniteInfo::GcgPveInfiniteInfo::new()
        }
    }

    // .ToyBattleInfo toy_battle_info = 62;

    pub fn toy_battle_info(&self) -> &super::ToyBattleInfo::ToyBattleInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ToyBattleInfo(ref v)) => v,
            _ => <super::ToyBattleInfo::ToyBattleInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_toy_battle_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_toy_battle_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ToyBattleInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_toy_battle_info(&mut self, v: super::ToyBattleInfo::ToyBattleInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::ToyBattleInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_toy_battle_info(&mut self) -> &mut super::ToyBattleInfo::ToyBattleInfo {
        if let ::std::option::Option::Some(activity_info::Detail::ToyBattleInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::ToyBattleInfo(super::ToyBattleInfo::ToyBattleInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::ToyBattleInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_toy_battle_info(&mut self) -> super::ToyBattleInfo::ToyBattleInfo {
        if self.has_toy_battle_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::ToyBattleInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ToyBattleInfo::ToyBattleInfo::new()
        }
    }

    // .PhotoUnderseaInfo photo_undersea_info = 226;

    pub fn photo_undersea_info(&self) -> &super::PhotoUnderseaInfo::PhotoUnderseaInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PhotoUnderseaInfo(ref v)) => v,
            _ => <super::PhotoUnderseaInfo::PhotoUnderseaInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_photo_undersea_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_photo_undersea_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PhotoUnderseaInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_photo_undersea_info(&mut self, v: super::PhotoUnderseaInfo::PhotoUnderseaInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::PhotoUnderseaInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_photo_undersea_info(&mut self) -> &mut super::PhotoUnderseaInfo::PhotoUnderseaInfo {
        if let ::std::option::Option::Some(activity_info::Detail::PhotoUnderseaInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::PhotoUnderseaInfo(super::PhotoUnderseaInfo::PhotoUnderseaInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::PhotoUnderseaInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_photo_undersea_info(&mut self) -> super::PhotoUnderseaInfo::PhotoUnderseaInfo {
        if self.has_photo_undersea_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::PhotoUnderseaInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PhotoUnderseaInfo::PhotoUnderseaInfo::new()
        }
    }

    // .FontaineGatherInfo fontaine_gather_info = 1035;

    pub fn fontaine_gather_info(&self) -> &super::FontaineGatherInfo::FontaineGatherInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FontaineGatherInfo(ref v)) => v,
            _ => <super::FontaineGatherInfo::FontaineGatherInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_fontaine_gather_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_fontaine_gather_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FontaineGatherInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fontaine_gather_info(&mut self, v: super::FontaineGatherInfo::FontaineGatherInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::FontaineGatherInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fontaine_gather_info(&mut self) -> &mut super::FontaineGatherInfo::FontaineGatherInfo {
        if let ::std::option::Option::Some(activity_info::Detail::FontaineGatherInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::FontaineGatherInfo(super::FontaineGatherInfo::FontaineGatherInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::FontaineGatherInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fontaine_gather_info(&mut self) -> super::FontaineGatherInfo::FontaineGatherInfo {
        if self.has_fontaine_gather_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::FontaineGatherInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FontaineGatherInfo::FontaineGatherInfo::new()
        }
    }

    // .GcgPvePuzzleInfo gcg_pve_puzzle_info = 871;

    pub fn gcg_pve_puzzle_info(&self) -> &super::GcgPvePuzzleInfo::GcgPvePuzzleInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GcgPvePuzzleInfo(ref v)) => v,
            _ => <super::GcgPvePuzzleInfo::GcgPvePuzzleInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_gcg_pve_puzzle_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_gcg_pve_puzzle_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GcgPvePuzzleInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gcg_pve_puzzle_info(&mut self, v: super::GcgPvePuzzleInfo::GcgPvePuzzleInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::GcgPvePuzzleInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gcg_pve_puzzle_info(&mut self) -> &mut super::GcgPvePuzzleInfo::GcgPvePuzzleInfo {
        if let ::std::option::Option::Some(activity_info::Detail::GcgPvePuzzleInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::GcgPvePuzzleInfo(super::GcgPvePuzzleInfo::GcgPvePuzzleInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::GcgPvePuzzleInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gcg_pve_puzzle_info(&mut self) -> super::GcgPvePuzzleInfo::GcgPvePuzzleInfo {
        if self.has_gcg_pve_puzzle_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::GcgPvePuzzleInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GcgPvePuzzleInfo::GcgPvePuzzleInfo::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(110);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "activity_id",
            |m: &ActivityInfo| { &m.activity_id },
            |m: &mut ActivityInfo| { &mut m.activity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DNMOEAFCDGC",
            |m: &ActivityInfo| { &m.DNMOEAFCDGC },
            |m: &mut ActivityInfo| { &mut m.DNMOEAFCDGC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "watcher_info_list",
            |m: &ActivityInfo| { &m.watcher_info_list },
            |m: &mut ActivityInfo| { &mut m.watcher_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_finished",
            |m: &ActivityInfo| { &m.is_finished },
            |m: &mut ActivityInfo| { &mut m.is_finished },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LJLDCLMAMNL",
            |m: &ActivityInfo| { &m.LJLDCLMAMNL },
            |m: &mut ActivityInfo| { &mut m.LJLDCLMAMNL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PJJKJGALLGD",
            |m: &ActivityInfo| { &m.PJJKJGALLGD },
            |m: &mut ActivityInfo| { &mut m.PJJKJGALLGD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "activity_type",
            |m: &ActivityInfo| { &m.activity_type },
            |m: &mut ActivityInfo| { &mut m.activity_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_id",
            |m: &ActivityInfo| { &m.schedule_id },
            |m: &mut ActivityInfo| { &mut m.schedule_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "activity_coin_map",
            |m: &ActivityInfo| { &m.activity_coin_map },
            |m: &mut ActivityInfo| { &mut m.activity_coin_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "meet_cond_list",
            |m: &ActivityInfo| { &m.meet_cond_list },
            |m: &mut ActivityInfo| { &mut m.meet_cond_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DKJDABCNGBP",
            |m: &ActivityInfo| { &m.DKJDABCNGBP },
            |m: &mut ActivityInfo| { &mut m.DKJDABCNGBP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "begin_time",
            |m: &ActivityInfo| { &m.begin_time },
            |m: &mut ActivityInfo| { &mut m.begin_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "INGFNLLCDOL",
            |m: &ActivityInfo| { &m.INGFNLLCDOL },
            |m: &mut ActivityInfo| { &mut m.INGFNLLCDOL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ENNDKMJIMHN",
            |m: &ActivityInfo| { &m.ENNDKMJIMHN },
            |m: &mut ActivityInfo| { &mut m.ENNDKMJIMHN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_score",
            |m: &ActivityInfo| { &m.cur_score },
            |m: &mut ActivityInfo| { &mut m.cur_score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BKJNDLLNAML",
            |m: &ActivityInfo| { &m.BKJNDLLNAML },
            |m: &mut ActivityInfo| { &mut m.BKJNDLLNAML },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "first_day_start_time",
            |m: &ActivityInfo| { &m.first_day_start_time },
            |m: &mut ActivityInfo| { &mut m.first_day_start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ABMOPKOIMPA",
            |m: &ActivityInfo| { &m.ABMOPKOIMPA },
            |m: &mut ActivityInfo| { &mut m.ABMOPKOIMPA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FGFGECAAKJM",
            |m: &ActivityInfo| { &m.FGFGECAAKJM },
            |m: &mut ActivityInfo| { &mut m.FGFGECAAKJM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GFEMIEBKKKL",
            |m: &ActivityInfo| { &m.GFEMIEBKKKL },
            |m: &mut ActivityInfo| { &mut m.GFEMIEBKKKL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CEFIPNKPEKA",
            |m: &ActivityInfo| { &m.CEFIPNKPEKA },
            |m: &mut ActivityInfo| { &mut m.CEFIPNKPEKA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_time",
            |m: &ActivityInfo| { &m.end_time },
            |m: &mut ActivityInfo| { &mut m.end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "wish_gift_num_map",
            |m: &ActivityInfo| { &m.wish_gift_num_map },
            |m: &mut ActivityInfo| { &mut m.wish_gift_num_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PHCOMIFAIJD",
            |m: &ActivityInfo| { &m.PHCOMIFAIJD },
            |m: &mut ActivityInfo| { &mut m.PHCOMIFAIJD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "activity_push_tips_data_list",
            |m: &ActivityInfo| { &m.activity_push_tips_data_list },
            |m: &mut ActivityInfo| { &mut m.activity_push_tips_data_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SeaLampActivityDetailInfo::SeaLampActivityDetailInfo>(
            "sam_lamp_info",
            ActivityInfo::has_sam_lamp_info,
            ActivityInfo::sam_lamp_info,
            ActivityInfo::mut_sam_lamp_info,
            ActivityInfo::set_sam_lamp_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CrucibleActivityDetailInfo::CrucibleActivityDetailInfo>(
            "crucible_info",
            ActivityInfo::has_crucible_info,
            ActivityInfo::crucible_info,
            ActivityInfo::mut_crucible_info,
            ActivityInfo::set_crucible_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SalesmanActivityDetailInfo::SalesmanActivityDetailInfo>(
            "salesman_info",
            ActivityInfo::has_salesman_info,
            ActivityInfo::salesman_info,
            ActivityInfo::mut_salesman_info,
            ActivityInfo::set_salesman_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::TrialAvatarActivityDetailInfo::TrialAvatarActivityDetailInfo>(
            "trial_avatar_info",
            ActivityInfo::has_trial_avatar_info,
            ActivityInfo::trial_avatar_info,
            ActivityInfo::mut_trial_avatar_info,
            ActivityInfo::set_trial_avatar_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DeliveryActivityDetailInfo::DeliveryActivityDetailInfo>(
            "delivery_info",
            ActivityInfo::has_delivery_info,
            ActivityInfo::delivery_info,
            ActivityInfo::mut_delivery_info,
            ActivityInfo::set_delivery_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AsterActivityDetailInfo::AsterActivityDetailInfo>(
            "aster_info",
            ActivityInfo::has_aster_info,
            ActivityInfo::aster_info,
            ActivityInfo::mut_aster_info,
            ActivityInfo::set_aster_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FlightActivityDetailInfo::FlightActivityDetailInfo>(
            "flight_info",
            ActivityInfo::has_flight_info,
            ActivityInfo::flight_info,
            ActivityInfo::mut_flight_info,
            ActivityInfo::set_flight_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DragonSpineActivityDetailInfo::DragonSpineActivityDetailInfo>(
            "dragon_spine_info",
            ActivityInfo::has_dragon_spine_info,
            ActivityInfo::dragon_spine_info,
            ActivityInfo::mut_dragon_spine_info,
            ActivityInfo::set_dragon_spine_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EffigyActivityDetailInfo::EffigyActivityDetailInfo>(
            "effigy_info",
            ActivityInfo::has_effigy_info,
            ActivityInfo::effigy_info,
            ActivityInfo::mut_effigy_info,
            ActivityInfo::set_effigy_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::TreasureMapActivityDetailInfo::TreasureMapActivityDetailInfo>(
            "treasure_map_info",
            ActivityInfo::has_treasure_map_info,
            ActivityInfo::treasure_map_info,
            ActivityInfo::mut_treasure_map_info,
            ActivityInfo::set_treasure_map_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BlessingActivityDetailInfo::BlessingActivityDetailInfo>(
            "blessing_info",
            ActivityInfo::has_blessing_info,
            ActivityInfo::blessing_info,
            ActivityInfo::mut_blessing_info,
            ActivityInfo::set_blessing_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SeaLampActivityInfo::SeaLampActivityInfo>(
            "sea_lamp_info",
            ActivityInfo::has_sea_lamp_info,
            ActivityInfo::sea_lamp_info,
            ActivityInfo::mut_sea_lamp_info,
            ActivityInfo::set_sea_lamp_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ExpeditionActivityDetailInfo::ExpeditionActivityDetailInfo>(
            "expedition_info",
            ActivityInfo::has_expedition_info,
            ActivityInfo::expedition_info,
            ActivityInfo::mut_expedition_info,
            ActivityInfo::set_expedition_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ArenaChallengeActivityDetailInfo::ArenaChallengeActivityDetailInfo>(
            "arena_challenge_info",
            ActivityInfo::has_arena_challenge_info,
            ActivityInfo::arena_challenge_info,
            ActivityInfo::mut_arena_challenge_info,
            ActivityInfo::set_arena_challenge_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FleurFairActivityDetailInfo::FleurFairActivityDetailInfo>(
            "fleur_fair_info",
            ActivityInfo::has_fleur_fair_info,
            ActivityInfo::fleur_fair_info,
            ActivityInfo::mut_fleur_fair_info,
            ActivityInfo::set_fleur_fair_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::WaterSpiritActivityDetailInfo::WaterSpiritActivityDetailInfo>(
            "water_spirit_info",
            ActivityInfo::has_water_spirit_info,
            ActivityInfo::water_spirit_info,
            ActivityInfo::mut_water_spirit_info,
            ActivityInfo::set_water_spirit_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ChannelerSlabActivityDetailInfo::ChannelerSlabActivityDetailInfo>(
            "challneler_slab_info",
            ActivityInfo::has_challneler_slab_info,
            ActivityInfo::challneler_slab_info,
            ActivityInfo::mut_challneler_slab_info,
            ActivityInfo::set_challneler_slab_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MistTrialActivityDetailInfo::MistTrialActivityDetailInfo>(
            "mist_trial_activity_info",
            ActivityInfo::has_mist_trial_activity_info,
            ActivityInfo::mist_trial_activity_info,
            ActivityInfo::mut_mist_trial_activity_info,
            ActivityInfo::set_mist_trial_activity_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HideAndSeekActivityDetailInfo::HideAndSeekActivityDetailInfo>(
            "hide_and_seek_info",
            ActivityInfo::has_hide_and_seek_info,
            ActivityInfo::hide_and_seek_info,
            ActivityInfo::mut_hide_and_seek_info,
            ActivityInfo::set_hide_and_seek_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FindHilichurlDetailInfo::FindHilichurlDetailInfo>(
            "find_hilichurl_info",
            ActivityInfo::has_find_hilichurl_info,
            ActivityInfo::find_hilichurl_info,
            ActivityInfo::mut_find_hilichurl_info,
            ActivityInfo::set_find_hilichurl_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SummerTimeDetailInfo::SummerTimeDetailInfo>(
            "summer_time_info",
            ActivityInfo::has_summer_time_info,
            ActivityInfo::summer_time_info,
            ActivityInfo::mut_summer_time_info,
            ActivityInfo::set_summer_time_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BuoyantCombatDetailInfo::BuoyantCombatDetailInfo>(
            "buoyant_combat_info",
            ActivityInfo::has_buoyant_combat_info,
            ActivityInfo::buoyant_combat_info,
            ActivityInfo::mut_buoyant_combat_info,
            ActivityInfo::set_buoyant_combat_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EchoShellDetailInfo::EchoShellDetailInfo>(
            "echo_shell_info",
            ActivityInfo::has_echo_shell_info,
            ActivityInfo::echo_shell_info,
            ActivityInfo::mut_echo_shell_info,
            ActivityInfo::set_echo_shell_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BounceConjuringActivityDetailInfo::BounceConjuringActivityDetailInfo>(
            "bounce_conjuring_info",
            ActivityInfo::has_bounce_conjuring_info,
            ActivityInfo::bounce_conjuring_info,
            ActivityInfo::mut_bounce_conjuring_info,
            ActivityInfo::set_bounce_conjuring_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BlitzRushActivityDetailInfo::BlitzRushActivityDetailInfo>(
            "blitz_rush_info",
            ActivityInfo::has_blitz_rush_info,
            ActivityInfo::blitz_rush_info,
            ActivityInfo::mut_blitz_rush_info,
            ActivityInfo::set_blitz_rush_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ChessActivityDetailInfo::ChessActivityDetailInfo>(
            "chess_info",
            ActivityInfo::has_chess_info,
            ActivityInfo::chess_info,
            ActivityInfo::mut_chess_info,
            ActivityInfo::set_chess_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SumoActivityDetailInfo::SumoActivityDetailInfo>(
            "sumo_info",
            ActivityInfo::has_sumo_info,
            ActivityInfo::sumo_info,
            ActivityInfo::mut_sumo_info,
            ActivityInfo::set_sumo_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MoonfinTrialActivityDetailInfo::MoonfinTrialActivityDetailInfo>(
            "moonfin_trial_info",
            ActivityInfo::has_moonfin_trial_info,
            ActivityInfo::moonfin_trial_info,
            ActivityInfo::mut_moonfin_trial_info,
            ActivityInfo::set_moonfin_trial_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LunaRiteDetailInfo::LunaRiteDetailInfo>(
            "luna_rite_info",
            ActivityInfo::has_luna_rite_info,
            ActivityInfo::luna_rite_info,
            ActivityInfo::mut_luna_rite_info,
            ActivityInfo::set_luna_rite_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PlantFlowerActivityDetailInfo::PlantFlowerActivityDetailInfo>(
            "plant_flower_info",
            ActivityInfo::has_plant_flower_info,
            ActivityInfo::plant_flower_info,
            ActivityInfo::mut_plant_flower_info,
            ActivityInfo::set_plant_flower_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo>(
            "music_game_info",
            ActivityInfo::has_music_game_info,
            ActivityInfo::music_game_info,
            ActivityInfo::mut_music_game_info,
            ActivityInfo::set_music_game_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RoguelikeDungeonActivityDetailInfo::RoguelikeDungeonActivityDetailInfo>(
            "roguelike_dungoen_info",
            ActivityInfo::has_roguelike_dungoen_info,
            ActivityInfo::roguelike_dungoen_info,
            ActivityInfo::mut_roguelike_dungoen_info,
            ActivityInfo::set_roguelike_dungoen_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DigActivityDetailInfo::DigActivityDetailInfo>(
            "dig_info",
            ActivityInfo::has_dig_info,
            ActivityInfo::dig_info,
            ActivityInfo::mut_dig_info,
            ActivityInfo::set_dig_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HachiActivityDetailInfo::HachiActivityDetailInfo>(
            "hachi_info",
            ActivityInfo::has_hachi_info,
            ActivityInfo::hachi_info,
            ActivityInfo::mut_hachi_info,
            ActivityInfo::set_hachi_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::WinterCampActivityDetailInfo::WinterCampActivityDetailInfo>(
            "winter_camp_info",
            ActivityInfo::has_winter_camp_info,
            ActivityInfo::winter_camp_info,
            ActivityInfo::mut_winter_camp_info,
            ActivityInfo::set_winter_camp_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PotionActivityDetailInfo::PotionActivityDetailInfo>(
            "potion_info",
            ActivityInfo::has_potion_info,
            ActivityInfo::potion_info,
            ActivityInfo::mut_potion_info,
            ActivityInfo::set_potion_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::TanukiTravelActivityDetailInfo::TanukiTravelActivityDetailInfo>(
            "tanuki_travel_activity_info",
            ActivityInfo::has_tanuki_travel_activity_info,
            ActivityInfo::tanuki_travel_activity_info,
            ActivityInfo::mut_tanuki_travel_activity_info,
            ActivityInfo::set_tanuki_travel_activity_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LanternRiteActivityDetailInfo::LanternRiteActivityDetailInfo>(
            "lantern_rite_activity_info",
            ActivityInfo::has_lantern_rite_activity_info,
            ActivityInfo::lantern_rite_activity_info,
            ActivityInfo::mut_lantern_rite_activity_info,
            ActivityInfo::set_lantern_rite_activity_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MichiaeMatsuriActivityDetailInfo::MichiaeMatsuriActivityDetailInfo>(
            "michiae_matsuri_info",
            ActivityInfo::has_michiae_matsuri_info,
            ActivityInfo::michiae_matsuri_info,
            ActivityInfo::mut_michiae_matsuri_info,
            ActivityInfo::set_michiae_matsuri_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BartenderActivityDetailInfo::BartenderActivityDetailInfo>(
            "bartender_info",
            ActivityInfo::has_bartender_info,
            ActivityInfo::bartender_info,
            ActivityInfo::mut_bartender_info,
            ActivityInfo::set_bartender_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::UgcActivityDetailInfo::UgcActivityDetailInfo>(
            "ugc_info",
            ActivityInfo::has_ugc_info,
            ActivityInfo::ugc_info,
            ActivityInfo::mut_ugc_info,
            ActivityInfo::set_ugc_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CrystalLinkActivityDetailInfo::CrystalLinkActivityDetailInfo>(
            "crystal_link_info",
            ActivityInfo::has_crystal_link_info,
            ActivityInfo::crystal_link_info,
            ActivityInfo::mut_crystal_link_info,
            ActivityInfo::set_crystal_link_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IrodoriActivityDetailInfo::IrodoriActivityDetailInfo>(
            "irodori_info",
            ActivityInfo::has_irodori_info,
            ActivityInfo::irodori_info,
            ActivityInfo::mut_irodori_info,
            ActivityInfo::set_irodori_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PhotoActivityDetailInfo::PhotoActivityDetailInfo>(
            "photo_info",
            ActivityInfo::has_photo_info,
            ActivityInfo::photo_info,
            ActivityInfo::mut_photo_info,
            ActivityInfo::set_photo_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SpiceActivityDetailInfo::SpiceActivityDetailInfo>(
            "spice_info",
            ActivityInfo::has_spice_info,
            ActivityInfo::spice_info,
            ActivityInfo::mut_spice_info,
            ActivityInfo::set_spice_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GachaActivityDetailInfo::GachaActivityDetailInfo>(
            "gacha_info",
            ActivityInfo::has_gacha_info,
            ActivityInfo::gacha_info,
            ActivityInfo::mut_gacha_info,
            ActivityInfo::set_gacha_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LuminanceStoneChallengeActivityDetailInfo::LuminanceStoneChallengeActivityDetailInfo>(
            "luminance_stone_challenge_info",
            ActivityInfo::has_luminance_stone_challenge_info,
            ActivityInfo::luminance_stone_challenge_info,
            ActivityInfo::mut_luminance_stone_challenge_info,
            ActivityInfo::set_luminance_stone_challenge_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueDiaryActivityDetailInfo::RogueDiaryActivityDetailInfo>(
            "rogue_diary_info",
            ActivityInfo::has_rogue_diary_info,
            ActivityInfo::rogue_diary_info,
            ActivityInfo::mut_rogue_diary_info,
            ActivityInfo::set_rogue_diary_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SummerTimeV2DetailInfo::SummerTimeV2DetailInfo>(
            "summer_time_v2_info",
            ActivityInfo::has_summer_time_v2_info,
            ActivityInfo::summer_time_v2_info,
            ActivityInfo::mut_summer_time_v2_info,
            ActivityInfo::set_summer_time_v2_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IslandPartyDetailInfo::IslandPartyDetailInfo>(
            "island_party_info",
            ActivityInfo::has_island_party_info,
            ActivityInfo::island_party_info,
            ActivityInfo::mut_island_party_info,
            ActivityInfo::set_island_party_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GearActivityDetailInfo::GearActivityDetailInfo>(
            "gear_info",
            ActivityInfo::has_gear_info,
            ActivityInfo::gear_info,
            ActivityInfo::mut_gear_info,
            ActivityInfo::set_gear_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GravenInnocenceDetailInfo::GravenInnocenceDetailInfo>(
            "graven_innocence_info",
            ActivityInfo::has_graven_innocence_info,
            ActivityInfo::graven_innocence_info,
            ActivityInfo::mut_graven_innocence_info,
            ActivityInfo::set_graven_innocence_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::InstableSprayDetailInfo::InstableSprayDetailInfo>(
            "instable_spray_info",
            ActivityInfo::has_instable_spray_info,
            ActivityInfo::instable_spray_info,
            ActivityInfo::mut_instable_spray_info,
            ActivityInfo::set_instable_spray_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MuqadasPotionActivityDetailInfo::MuqadasPotionActivityDetailInfo>(
            "muqadas_potion_info",
            ActivityInfo::has_muqadas_potion_info,
            ActivityInfo::muqadas_potion_info,
            ActivityInfo::mut_muqadas_potion_info,
            ActivityInfo::set_muqadas_potion_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::TreasureSeelieActivityDetailInfo::TreasureSeelieActivityDetailInfo>(
            "treasure_seelie_info",
            ActivityInfo::has_treasure_seelie_info,
            ActivityInfo::treasure_seelie_info,
            ActivityInfo::mut_treasure_seelie_info,
            ActivityInfo::set_treasure_seelie_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RockBoardExploreDetailInfo::RockBoardExploreDetailInfo>(
            "rock_board_explore_info",
            ActivityInfo::has_rock_board_explore_info,
            ActivityInfo::rock_board_explore_info,
            ActivityInfo::mut_rock_board_explore_info,
            ActivityInfo::set_rock_board_explore_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::VintageActivityDetailInfo::VintageActivityDetailInfo>(
            "vintage_info",
            ActivityInfo::has_vintage_info,
            ActivityInfo::vintage_info,
            ActivityInfo::mut_vintage_info,
            ActivityInfo::set_vintage_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::WindFieldDetailInfo::WindFieldDetailInfo>(
            "wind_field_info",
            ActivityInfo::has_wind_field_info,
            ActivityInfo::wind_field_info,
            ActivityInfo::mut_wind_field_info,
            ActivityInfo::set_wind_field_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FungusFighterDetailInfo::FungusFighterDetailInfo>(
            "fungus_fighter_info",
            ActivityInfo::has_fungus_fighter_info,
            ActivityInfo::fungus_fighter_info,
            ActivityInfo::mut_fungus_fighter_info,
            ActivityInfo::set_fungus_fighter_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CharAmusementDetailInfo::CharAmusementDetailInfo>(
            "char_amusement_info",
            ActivityInfo::has_char_amusement_info,
            ActivityInfo::char_amusement_info,
            ActivityInfo::mut_char_amusement_info,
            ActivityInfo::set_char_amusement_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EffigyChallengeV2DetailInfo::EffigyChallengeV2DetailInfo>(
            "effigy_challenge_info",
            ActivityInfo::has_effigy_challenge_info,
            ActivityInfo::effigy_challenge_info,
            ActivityInfo::mut_effigy_challenge_info,
            ActivityInfo::set_effigy_challenge_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CoinCollectDetailInfo::CoinCollectDetailInfo>(
            "coin_collect_info",
            ActivityInfo::has_coin_collect_info,
            ActivityInfo::coin_collect_info,
            ActivityInfo::mut_coin_collect_info,
            ActivityInfo::set_coin_collect_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BrickBreakerDetailInfo::BrickBreakerDetailInfo>(
            "brick_breaker_info",
            ActivityInfo::has_brick_breaker_info,
            ActivityInfo::brick_breaker_info,
            ActivityInfo::mut_brick_breaker_info,
            ActivityInfo::set_brick_breaker_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DuelHeartDetailInfo::DuelHeartDetailInfo>(
            "duel_heart_info",
            ActivityInfo::has_duel_heart_info,
            ActivityInfo::duel_heart_info,
            ActivityInfo::mut_duel_heart_info,
            ActivityInfo::set_duel_heart_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SeaLampV3DetailInfo::SeaLampV3DetailInfo>(
            "sea_lamp_v3_info",
            ActivityInfo::has_sea_lamp_v3_info,
            ActivityInfo::sea_lamp_v3_info,
            ActivityInfo::mut_sea_lamp_v3_info,
            ActivityInfo::set_sea_lamp_v3_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::TeamChainDetailInfo::TeamChainDetailInfo>(
            "team_chain_info",
            ActivityInfo::has_team_chain_info,
            ActivityInfo::team_chain_info,
            ActivityInfo::mut_team_chain_info,
            ActivityInfo::set_team_chain_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ElectroherculesBattleDetailInfo::ElectroherculesBattleDetailInfo>(
            "electrohercules_battle_info",
            ActivityInfo::has_electrohercules_battle_info,
            ActivityInfo::electrohercules_battle_info,
            ActivityInfo::mut_electrohercules_battle_info,
            ActivityInfo::set_electrohercules_battle_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GCGFestivalDetailInfo::GCGFestivalDetailInfo>(
            "gcg_festival_info",
            ActivityInfo::has_gcg_festival_info,
            ActivityInfo::gcg_festival_info,
            ActivityInfo::mut_gcg_festival_info,
            ActivityInfo::set_gcg_festival_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FleurFairV2DetailInfo::FleurFairV2DetailInfo>(
            "fleur_fair_v2_info",
            ActivityInfo::has_fleur_fair_v2_info,
            ActivityInfo::fleur_fair_v2_info,
            ActivityInfo::mut_fleur_fair_v2_info,
            ActivityInfo::set_fleur_fair_v2_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FungusFighterV2DetailInfo::FungusFighterV2DetailInfo>(
            "fungus_fighter_v2_info",
            ActivityInfo::has_fungus_fighter_v2_info,
            ActivityInfo::fungus_fighter_v2_info,
            ActivityInfo::mut_fungus_fighter_v2_info,
            ActivityInfo::set_fungus_fighter_v2_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AkaFesDetailInfo::AkaFesDetailInfo>(
            "aka_fes_info",
            ActivityInfo::has_aka_fes_info,
            ActivityInfo::aka_fes_info,
            ActivityInfo::mut_aka_fes_info,
            ActivityInfo::set_aka_fes_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SandwormCannonDetailInfo::SandwormCannonDetailInfo>(
            "sandworm_cannon_detail_info",
            ActivityInfo::has_sandworm_cannon_detail_info,
            ActivityInfo::sandworm_cannon_detail_info,
            ActivityInfo::mut_sandworm_cannon_detail_info,
            ActivityInfo::set_sandworm_cannon_detail_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SorushTrialDetailInfo::SorushTrialDetailInfo>(
            "sorush_trial_info",
            ActivityInfo::has_sorush_trial_info,
            ActivityInfo::sorush_trial_info,
            ActivityInfo::mut_sorush_trial_info,
            ActivityInfo::set_sorush_trial_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JourneyInfo::JourneyInfo>(
            "journey_info",
            ActivityInfo::has_journey_info,
            ActivityInfo::journey_info,
            ActivityInfo::mut_journey_info,
            ActivityInfo::set_journey_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EffigyChallengeV4Info::EffigyChallengeV4Info>(
            "effigy_challenge_v4_info",
            ActivityInfo::has_effigy_challenge_v4_info,
            ActivityInfo::effigy_challenge_v4_info,
            ActivityInfo::mut_effigy_challenge_v4_info,
            ActivityInfo::set_effigy_challenge_v4_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GcgPveInfo::GcgPveInfo>(
            "gcg_pve_info",
            ActivityInfo::has_gcg_pve_info,
            ActivityInfo::gcg_pve_info,
            ActivityInfo::mut_gcg_pve_info,
            ActivityInfo::set_gcg_pve_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::UgcV2Info::UgcV2Info>(
            "ugc_v2_info",
            ActivityInfo::has_ugc_v2_info,
            ActivityInfo::ugc_v2_info,
            ActivityInfo::mut_ugc_v2_info,
            ActivityInfo::set_ugc_v2_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PenumbraAdventureInfo::PenumbraAdventureInfo>(
            "penumbra_adventure_info",
            ActivityInfo::has_penumbra_adventure_info,
            ActivityInfo::penumbra_adventure_info,
            ActivityInfo::mut_penumbra_adventure_info,
            ActivityInfo::set_penumbra_adventure_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AnimalViewInfo::AnimalViewInfo>(
            "animal_view_info",
            ActivityInfo::has_animal_view_info,
            ActivityInfo::animal_view_info,
            ActivityInfo::mut_animal_view_info,
            ActivityInfo::set_animal_view_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ActivityMultiCharacterInfo::ActivityMultiCharacterInfo>(
            "activity_multi_character_info",
            ActivityInfo::has_activity_multi_character_info,
            ActivityInfo::activity_multi_character_info,
            ActivityInfo::mut_activity_multi_character_info,
            ActivityInfo::set_activity_multi_character_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GcgPveInfiniteInfo::GcgPveInfiniteInfo>(
            "gcg_pve_infinite_info",
            ActivityInfo::has_gcg_pve_infinite_info,
            ActivityInfo::gcg_pve_infinite_info,
            ActivityInfo::mut_gcg_pve_infinite_info,
            ActivityInfo::set_gcg_pve_infinite_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ToyBattleInfo::ToyBattleInfo>(
            "toy_battle_info",
            ActivityInfo::has_toy_battle_info,
            ActivityInfo::toy_battle_info,
            ActivityInfo::mut_toy_battle_info,
            ActivityInfo::set_toy_battle_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PhotoUnderseaInfo::PhotoUnderseaInfo>(
            "photo_undersea_info",
            ActivityInfo::has_photo_undersea_info,
            ActivityInfo::photo_undersea_info,
            ActivityInfo::mut_photo_undersea_info,
            ActivityInfo::set_photo_undersea_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FontaineGatherInfo::FontaineGatherInfo>(
            "fontaine_gather_info",
            ActivityInfo::has_fontaine_gather_info,
            ActivityInfo::fontaine_gather_info,
            ActivityInfo::mut_fontaine_gather_info,
            ActivityInfo::set_fontaine_gather_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GcgPvePuzzleInfo::GcgPvePuzzleInfo>(
            "gcg_pve_puzzle_info",
            ActivityInfo::has_gcg_pve_puzzle_info,
            ActivityInfo::gcg_pve_puzzle_info,
            ActivityInfo::mut_gcg_pve_puzzle_info,
            ActivityInfo::set_gcg_pve_puzzle_info,
        ));
        oneofs.push(activity_info::Detail::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ActivityInfo>(
            "ActivityInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ActivityInfo {
    const NAME: &'static str = "ActivityInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.activity_id = is.read_uint32()?;
                },
                13890 => {
                    is.read_repeated_packed_uint32_into(&mut self.DNMOEAFCDGC)?;
                },
                13888 => {
                    self.DNMOEAFCDGC.push(is.read_uint32()?);
                },
                74 => {
                    self.watcher_info_list.push(is.read_message()?);
                },
                112 => {
                    self.is_finished = is.read_bool()?;
                },
                3858 => {
                    is.read_repeated_packed_uint32_into(&mut self.LJLDCLMAMNL)?;
                },
                3856 => {
                    self.LJLDCLMAMNL.push(is.read_uint32()?);
                },
                128 => {
                    self.PJJKJGALLGD = is.read_bool()?;
                },
                8 => {
                    self.activity_type = is.read_uint32()?;
                },
                40 => {
                    self.schedule_id = is.read_uint32()?;
                },
                12498 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.activity_coin_map.insert(key, value);
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.meet_cond_list)?;
                },
                96 => {
                    self.meet_cond_list.push(is.read_uint32()?);
                },
                104 => {
                    self.DKJDABCNGBP = is.read_bool()?;
                },
                16 => {
                    self.begin_time = is.read_uint32()?;
                },
                5864 => {
                    self.INGFNLLCDOL = is.read_uint32()?;
                },
                120 => {
                    self.ENNDKMJIMHN = is.read_bool()?;
                },
                12440 => {
                    self.cur_score = is.read_uint32()?;
                },
                14544 => {
                    self.BKJNDLLNAML = is.read_bool()?;
                },
                7824 => {
                    self.first_day_start_time = is.read_uint32()?;
                },
                4200 => {
                    self.ABMOPKOIMPA = is.read_bool()?;
                },
                13624 => {
                    self.FGFGECAAKJM = is.read_uint32()?;
                },
                8936 => {
                    self.GFEMIEBKKKL = is.read_bool()?;
                },
                4968 => {
                    self.CEFIPNKPEKA = is.read_uint32()?;
                },
                88 => {
                    self.end_time = is.read_uint32()?;
                },
                7394 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.wish_gift_num_map.insert(key, value);
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.PHCOMIFAIJD)?;
                },
                32 => {
                    self.PHCOMIFAIJD.push(is.read_uint32()?);
                },
                5146 => {
                    self.activity_push_tips_data_list.push(is.read_message()?);
                },
                82 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::SamLampInfo(is.read_message()?));
                },
                58 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::CrucibleInfo(is.read_message()?));
                },
                66 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::SalesmanInfo(is.read_message()?));
                },
                50 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::TrialAvatarInfo(is.read_message()?));
                },
                14770 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::DeliveryInfo(is.read_message()?));
                },
                2082 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::AsterInfo(is.read_message()?));
                },
                6610 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::FlightInfo(is.read_message()?));
                },
                882 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::DragonSpineInfo(is.read_message()?));
                },
                8082 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::EffigyInfo(is.read_message()?));
                },
                14034 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::TreasureMapInfo(is.read_message()?));
                },
                2650 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::BlessingInfo(is.read_message()?));
                },
                8914 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::SeaLampInfo(is.read_message()?));
                },
                5394 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::ExpeditionInfo(is.read_message()?));
                },
                314 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::ArenaChallengeInfo(is.read_message()?));
                },
                2346 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::FleurFairInfo(is.read_message()?));
                },
                15978 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::WaterSpiritInfo(is.read_message()?));
                },
                14058 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::ChallnelerSlabInfo(is.read_message()?));
                },
                12978 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::MistTrialActivityInfo(is.read_message()?));
                },
                13978 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::HideAndSeekInfo(is.read_message()?));
                },
                10274 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::FindHilichurlInfo(is.read_message()?));
                },
                7602 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::SummerTimeInfo(is.read_message()?));
                },
                4154 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::BuoyantCombatInfo(is.read_message()?));
                },
                2442 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::EchoShellInfo(is.read_message()?));
                },
                14914 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::BounceConjuringInfo(is.read_message()?));
                },
                7322 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::BlitzRushInfo(is.read_message()?));
                },
                8698 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::ChessInfo(is.read_message()?));
                },
                16066 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::SumoInfo(is.read_message()?));
                },
                3114 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::MoonfinTrialInfo(is.read_message()?));
                },
                15770 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::LunaRiteInfo(is.read_message()?));
                },
                14834 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::PlantFlowerInfo(is.read_message()?));
                },
                14778 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(is.read_message()?));
                },
                8202 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::RoguelikeDungoenInfo(is.read_message()?));
                },
                14842 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::DigInfo(is.read_message()?));
                },
                9410 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::HachiInfo(is.read_message()?));
                },
                16114 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::WinterCampInfo(is.read_message()?));
                },
                11882 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::PotionInfo(is.read_message()?));
                },
                7554 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::TanukiTravelActivityInfo(is.read_message()?));
                },
                15842 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::LanternRiteActivityInfo(is.read_message()?));
                },
                914 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::MichiaeMatsuriInfo(is.read_message()?));
                },
                11530 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::BartenderInfo(is.read_message()?));
                },
                14362 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::UgcInfo(is.read_message()?));
                },
                10410 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::CrystalLinkInfo(is.read_message()?));
                },
                434 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::IrodoriInfo(is.read_message()?));
                },
                11938 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::PhotoInfo(is.read_message()?));
                },
                3570 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::SpiceInfo(is.read_message()?));
                },
                9538 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::GachaInfo(is.read_message()?));
                },
                306 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::LuminanceStoneChallengeInfo(is.read_message()?));
                },
                3418 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::RogueDiaryInfo(is.read_message()?));
                },
                7282 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::SummerTimeV2Info(is.read_message()?));
                },
                8354 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::IslandPartyInfo(is.read_message()?));
                },
                10106 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::GearInfo(is.read_message()?));
                },
                2850 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::GravenInnocenceInfo(is.read_message()?));
                },
                4066 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::InstableSprayInfo(is.read_message()?));
                },
                11794 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::MuqadasPotionInfo(is.read_message()?));
                },
                10010 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::TreasureSeelieInfo(is.read_message()?));
                },
                8226 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::RockBoardExploreInfo(is.read_message()?));
                },
                11722 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::VintageInfo(is.read_message()?));
                },
                6146 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::WindFieldInfo(is.read_message()?));
                },
                6674 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::FungusFighterInfo(is.read_message()?));
                },
                9778 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::CharAmusementInfo(is.read_message()?));
                },
                10202 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::EffigyChallengeInfo(is.read_message()?));
                },
                6714 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::CoinCollectInfo(is.read_message()?));
                },
                4410 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::BrickBreakerInfo(is.read_message()?));
                },
                13362 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::DuelHeartInfo(is.read_message()?));
                },
                6666 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::SeaLampV3Info(is.read_message()?));
                },
                9322 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::TeamChainInfo(is.read_message()?));
                },
                7850 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::ElectroherculesBattleInfo(is.read_message()?));
                },
                13314 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::GcgFestivalInfo(is.read_message()?));
                },
                15858 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::FleurFairV2Info(is.read_message()?));
                },
                12330 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::FungusFighterV2Info(is.read_message()?));
                },
                12194 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::AkaFesInfo(is.read_message()?));
                },
                5010 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::SandwormCannonDetailInfo(is.read_message()?));
                },
                8618 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::SorushTrialInfo(is.read_message()?));
                },
                14954 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::JourneyInfo(is.read_message()?));
                },
                10570 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::EffigyChallengeV4Info(is.read_message()?));
                },
                10434 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::GcgPveInfo(is.read_message()?));
                },
                7930 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::UgcV2Info(is.read_message()?));
                },
                2450 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::PenumbraAdventureInfo(is.read_message()?));
                },
                7578 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::AnimalViewInfo(is.read_message()?));
                },
                9706 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::ActivityMultiCharacterInfo(is.read_message()?));
                },
                994 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::GcgPveInfiniteInfo(is.read_message()?));
                },
                498 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::ToyBattleInfo(is.read_message()?));
                },
                1810 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::PhotoUnderseaInfo(is.read_message()?));
                },
                8282 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::FontaineGatherInfo(is.read_message()?));
                },
                6970 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::GcgPvePuzzleInfo(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.activity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.activity_id);
        }
        for value in &self.DNMOEAFCDGC {
            my_size += ::protobuf::rt::uint32_size(1736, *value);
        };
        for value in &self.watcher_info_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.is_finished != false {
            my_size += 1 + 1;
        }
        for value in &self.LJLDCLMAMNL {
            my_size += ::protobuf::rt::uint32_size(482, *value);
        };
        if self.PJJKJGALLGD != false {
            my_size += 2 + 1;
        }
        if self.activity_type != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.activity_type);
        }
        if self.schedule_id != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.schedule_id);
        }
        for (k, v) in &self.activity_coin_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.meet_cond_list {
            my_size += ::protobuf::rt::uint32_size(12, *value);
        };
        if self.DKJDABCNGBP != false {
            my_size += 1 + 1;
        }
        if self.begin_time != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.begin_time);
        }
        if self.INGFNLLCDOL != 0 {
            my_size += ::protobuf::rt::uint32_size(733, self.INGFNLLCDOL);
        }
        if self.ENNDKMJIMHN != false {
            my_size += 1 + 1;
        }
        if self.cur_score != 0 {
            my_size += ::protobuf::rt::uint32_size(1555, self.cur_score);
        }
        if self.BKJNDLLNAML != false {
            my_size += 2 + 1;
        }
        if self.first_day_start_time != 0 {
            my_size += ::protobuf::rt::uint32_size(978, self.first_day_start_time);
        }
        if self.ABMOPKOIMPA != false {
            my_size += 2 + 1;
        }
        if self.FGFGECAAKJM != 0 {
            my_size += ::protobuf::rt::uint32_size(1703, self.FGFGECAAKJM);
        }
        if self.GFEMIEBKKKL != false {
            my_size += 2 + 1;
        }
        if self.CEFIPNKPEKA != 0 {
            my_size += ::protobuf::rt::uint32_size(621, self.CEFIPNKPEKA);
        }
        if self.end_time != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.end_time);
        }
        for (k, v) in &self.wish_gift_num_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.PHCOMIFAIJD {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        for value in &self.activity_push_tips_data_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &activity_info::Detail::SamLampInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::CrucibleInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::SalesmanInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::TrialAvatarInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::DeliveryInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::AsterInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::FlightInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::DragonSpineInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::EffigyInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::TreasureMapInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::BlessingInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::SeaLampInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::ExpeditionInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::ArenaChallengeInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::FleurFairInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::WaterSpiritInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::ChallnelerSlabInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::MistTrialActivityInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::HideAndSeekInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::FindHilichurlInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::SummerTimeInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::BuoyantCombatInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::EchoShellInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::BounceConjuringInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::BlitzRushInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::ChessInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::SumoInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::MoonfinTrialInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::LunaRiteInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::PlantFlowerInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::MusicGameInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::RoguelikeDungoenInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::DigInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::HachiInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::WinterCampInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::PotionInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::TanukiTravelActivityInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::LanternRiteActivityInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::MichiaeMatsuriInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::BartenderInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::UgcInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::CrystalLinkInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::IrodoriInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::PhotoInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::SpiceInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::GachaInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::LuminanceStoneChallengeInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::RogueDiaryInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::SummerTimeV2Info(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::IslandPartyInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::GearInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::GravenInnocenceInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::InstableSprayInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::MuqadasPotionInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::TreasureSeelieInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::RockBoardExploreInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::VintageInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::WindFieldInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::FungusFighterInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::CharAmusementInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::EffigyChallengeInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::CoinCollectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::BrickBreakerInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::DuelHeartInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::SeaLampV3Info(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::TeamChainInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::ElectroherculesBattleInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::GcgFestivalInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::FleurFairV2Info(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::FungusFighterV2Info(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::AkaFesInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::SandwormCannonDetailInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::SorushTrialInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::JourneyInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::EffigyChallengeV4Info(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::GcgPveInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::UgcV2Info(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::PenumbraAdventureInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::AnimalViewInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::ActivityMultiCharacterInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::GcgPveInfiniteInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::ToyBattleInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::PhotoUnderseaInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::FontaineGatherInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &activity_info::Detail::GcgPvePuzzleInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.activity_id != 0 {
            os.write_uint32(3, self.activity_id)?;
        }
        for v in &self.DNMOEAFCDGC {
            os.write_uint32(1736, *v)?;
        };
        for v in &self.watcher_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        if self.is_finished != false {
            os.write_bool(14, self.is_finished)?;
        }
        for v in &self.LJLDCLMAMNL {
            os.write_uint32(482, *v)?;
        };
        if self.PJJKJGALLGD != false {
            os.write_bool(16, self.PJJKJGALLGD)?;
        }
        if self.activity_type != 0 {
            os.write_uint32(1, self.activity_type)?;
        }
        if self.schedule_id != 0 {
            os.write_uint32(5, self.schedule_id)?;
        }
        for (k, v) in &self.activity_coin_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(12498)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        for v in &self.meet_cond_list {
            os.write_uint32(12, *v)?;
        };
        if self.DKJDABCNGBP != false {
            os.write_bool(13, self.DKJDABCNGBP)?;
        }
        if self.begin_time != 0 {
            os.write_uint32(2, self.begin_time)?;
        }
        if self.INGFNLLCDOL != 0 {
            os.write_uint32(733, self.INGFNLLCDOL)?;
        }
        if self.ENNDKMJIMHN != false {
            os.write_bool(15, self.ENNDKMJIMHN)?;
        }
        if self.cur_score != 0 {
            os.write_uint32(1555, self.cur_score)?;
        }
        if self.BKJNDLLNAML != false {
            os.write_bool(1818, self.BKJNDLLNAML)?;
        }
        if self.first_day_start_time != 0 {
            os.write_uint32(978, self.first_day_start_time)?;
        }
        if self.ABMOPKOIMPA != false {
            os.write_bool(525, self.ABMOPKOIMPA)?;
        }
        if self.FGFGECAAKJM != 0 {
            os.write_uint32(1703, self.FGFGECAAKJM)?;
        }
        if self.GFEMIEBKKKL != false {
            os.write_bool(1117, self.GFEMIEBKKKL)?;
        }
        if self.CEFIPNKPEKA != 0 {
            os.write_uint32(621, self.CEFIPNKPEKA)?;
        }
        if self.end_time != 0 {
            os.write_uint32(11, self.end_time)?;
        }
        for (k, v) in &self.wish_gift_num_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(7394)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        for v in &self.PHCOMIFAIJD {
            os.write_uint32(4, *v)?;
        };
        for v in &self.activity_push_tips_data_list {
            ::protobuf::rt::write_message_field_with_cached_size(643, v, os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &activity_info::Detail::SamLampInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &activity_info::Detail::CrucibleInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &activity_info::Detail::SalesmanInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &activity_info::Detail::TrialAvatarInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &activity_info::Detail::DeliveryInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1846, v, os)?;
                },
                &activity_info::Detail::AsterInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(260, v, os)?;
                },
                &activity_info::Detail::FlightInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(826, v, os)?;
                },
                &activity_info::Detail::DragonSpineInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(110, v, os)?;
                },
                &activity_info::Detail::EffigyInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1010, v, os)?;
                },
                &activity_info::Detail::TreasureMapInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1754, v, os)?;
                },
                &activity_info::Detail::BlessingInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(331, v, os)?;
                },
                &activity_info::Detail::SeaLampInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1114, v, os)?;
                },
                &activity_info::Detail::ExpeditionInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(674, v, os)?;
                },
                &activity_info::Detail::ArenaChallengeInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(39, v, os)?;
                },
                &activity_info::Detail::FleurFairInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(293, v, os)?;
                },
                &activity_info::Detail::WaterSpiritInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1997, v, os)?;
                },
                &activity_info::Detail::ChallnelerSlabInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1757, v, os)?;
                },
                &activity_info::Detail::MistTrialActivityInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1622, v, os)?;
                },
                &activity_info::Detail::HideAndSeekInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1747, v, os)?;
                },
                &activity_info::Detail::FindHilichurlInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1284, v, os)?;
                },
                &activity_info::Detail::SummerTimeInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(950, v, os)?;
                },
                &activity_info::Detail::BuoyantCombatInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(519, v, os)?;
                },
                &activity_info::Detail::EchoShellInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(305, v, os)?;
                },
                &activity_info::Detail::BounceConjuringInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1864, v, os)?;
                },
                &activity_info::Detail::BlitzRushInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(915, v, os)?;
                },
                &activity_info::Detail::ChessInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1087, v, os)?;
                },
                &activity_info::Detail::SumoInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2008, v, os)?;
                },
                &activity_info::Detail::MoonfinTrialInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(389, v, os)?;
                },
                &activity_info::Detail::LunaRiteInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1971, v, os)?;
                },
                &activity_info::Detail::PlantFlowerInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1854, v, os)?;
                },
                &activity_info::Detail::MusicGameInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1847, v, os)?;
                },
                &activity_info::Detail::RoguelikeDungoenInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1025, v, os)?;
                },
                &activity_info::Detail::DigInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1855, v, os)?;
                },
                &activity_info::Detail::HachiInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1176, v, os)?;
                },
                &activity_info::Detail::WinterCampInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2014, v, os)?;
                },
                &activity_info::Detail::PotionInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1485, v, os)?;
                },
                &activity_info::Detail::TanukiTravelActivityInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(944, v, os)?;
                },
                &activity_info::Detail::LanternRiteActivityInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1980, v, os)?;
                },
                &activity_info::Detail::MichiaeMatsuriInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(114, v, os)?;
                },
                &activity_info::Detail::BartenderInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1441, v, os)?;
                },
                &activity_info::Detail::UgcInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1795, v, os)?;
                },
                &activity_info::Detail::CrystalLinkInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1301, v, os)?;
                },
                &activity_info::Detail::IrodoriInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(54, v, os)?;
                },
                &activity_info::Detail::PhotoInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1492, v, os)?;
                },
                &activity_info::Detail::SpiceInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(446, v, os)?;
                },
                &activity_info::Detail::GachaInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1192, v, os)?;
                },
                &activity_info::Detail::LuminanceStoneChallengeInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(38, v, os)?;
                },
                &activity_info::Detail::RogueDiaryInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(427, v, os)?;
                },
                &activity_info::Detail::SummerTimeV2Info(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(910, v, os)?;
                },
                &activity_info::Detail::IslandPartyInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1044, v, os)?;
                },
                &activity_info::Detail::GearInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1263, v, os)?;
                },
                &activity_info::Detail::GravenInnocenceInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(356, v, os)?;
                },
                &activity_info::Detail::InstableSprayInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(508, v, os)?;
                },
                &activity_info::Detail::MuqadasPotionInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1474, v, os)?;
                },
                &activity_info::Detail::TreasureSeelieInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1251, v, os)?;
                },
                &activity_info::Detail::RockBoardExploreInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1028, v, os)?;
                },
                &activity_info::Detail::VintageInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1465, v, os)?;
                },
                &activity_info::Detail::WindFieldInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(768, v, os)?;
                },
                &activity_info::Detail::FungusFighterInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(834, v, os)?;
                },
                &activity_info::Detail::CharAmusementInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1222, v, os)?;
                },
                &activity_info::Detail::EffigyChallengeInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1275, v, os)?;
                },
                &activity_info::Detail::CoinCollectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(839, v, os)?;
                },
                &activity_info::Detail::BrickBreakerInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(551, v, os)?;
                },
                &activity_info::Detail::DuelHeartInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1670, v, os)?;
                },
                &activity_info::Detail::SeaLampV3Info(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(833, v, os)?;
                },
                &activity_info::Detail::TeamChainInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1165, v, os)?;
                },
                &activity_info::Detail::ElectroherculesBattleInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(981, v, os)?;
                },
                &activity_info::Detail::GcgFestivalInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1664, v, os)?;
                },
                &activity_info::Detail::FleurFairV2Info(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1982, v, os)?;
                },
                &activity_info::Detail::FungusFighterV2Info(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1541, v, os)?;
                },
                &activity_info::Detail::AkaFesInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1524, v, os)?;
                },
                &activity_info::Detail::SandwormCannonDetailInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(626, v, os)?;
                },
                &activity_info::Detail::SorushTrialInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1077, v, os)?;
                },
                &activity_info::Detail::JourneyInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1869, v, os)?;
                },
                &activity_info::Detail::EffigyChallengeV4Info(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1321, v, os)?;
                },
                &activity_info::Detail::GcgPveInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1304, v, os)?;
                },
                &activity_info::Detail::UgcV2Info(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(991, v, os)?;
                },
                &activity_info::Detail::PenumbraAdventureInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(306, v, os)?;
                },
                &activity_info::Detail::AnimalViewInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(947, v, os)?;
                },
                &activity_info::Detail::ActivityMultiCharacterInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1213, v, os)?;
                },
                &activity_info::Detail::GcgPveInfiniteInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(124, v, os)?;
                },
                &activity_info::Detail::ToyBattleInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(62, v, os)?;
                },
                &activity_info::Detail::PhotoUnderseaInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(226, v, os)?;
                },
                &activity_info::Detail::FontaineGatherInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1035, v, os)?;
                },
                &activity_info::Detail::GcgPvePuzzleInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(871, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ActivityInfo {
        ActivityInfo::new()
    }

    fn clear(&mut self) {
        self.activity_id = 0;
        self.DNMOEAFCDGC.clear();
        self.watcher_info_list.clear();
        self.is_finished = false;
        self.LJLDCLMAMNL.clear();
        self.PJJKJGALLGD = false;
        self.activity_type = 0;
        self.schedule_id = 0;
        self.activity_coin_map.clear();
        self.meet_cond_list.clear();
        self.DKJDABCNGBP = false;
        self.begin_time = 0;
        self.INGFNLLCDOL = 0;
        self.ENNDKMJIMHN = false;
        self.cur_score = 0;
        self.BKJNDLLNAML = false;
        self.first_day_start_time = 0;
        self.ABMOPKOIMPA = false;
        self.FGFGECAAKJM = 0;
        self.GFEMIEBKKKL = false;
        self.CEFIPNKPEKA = 0;
        self.end_time = 0;
        self.wish_gift_num_map.clear();
        self.PHCOMIFAIJD.clear();
        self.activity_push_tips_data_list.clear();
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ActivityInfo {
        static instance: ::protobuf::rt::Lazy<ActivityInfo> = ::protobuf::rt::Lazy::new();
        instance.get(ActivityInfo::new)
    }
}

impl ::protobuf::MessageFull for ActivityInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ActivityInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ActivityInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActivityInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ActivityInfo`
pub mod activity_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ActivityInfo.detail)
    pub enum Detail {
        // @@protoc_insertion_point(oneof_field:ActivityInfo.sam_lamp_info)
        SamLampInfo(super::super::SeaLampActivityDetailInfo::SeaLampActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.crucible_info)
        CrucibleInfo(super::super::CrucibleActivityDetailInfo::CrucibleActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.salesman_info)
        SalesmanInfo(super::super::SalesmanActivityDetailInfo::SalesmanActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.trial_avatar_info)
        TrialAvatarInfo(super::super::TrialAvatarActivityDetailInfo::TrialAvatarActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.delivery_info)
        DeliveryInfo(super::super::DeliveryActivityDetailInfo::DeliveryActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.aster_info)
        AsterInfo(super::super::AsterActivityDetailInfo::AsterActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.flight_info)
        FlightInfo(super::super::FlightActivityDetailInfo::FlightActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.dragon_spine_info)
        DragonSpineInfo(super::super::DragonSpineActivityDetailInfo::DragonSpineActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.effigy_info)
        EffigyInfo(super::super::EffigyActivityDetailInfo::EffigyActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.treasure_map_info)
        TreasureMapInfo(super::super::TreasureMapActivityDetailInfo::TreasureMapActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.blessing_info)
        BlessingInfo(super::super::BlessingActivityDetailInfo::BlessingActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.sea_lamp_info)
        SeaLampInfo(super::super::SeaLampActivityInfo::SeaLampActivityInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.expedition_info)
        ExpeditionInfo(super::super::ExpeditionActivityDetailInfo::ExpeditionActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.arena_challenge_info)
        ArenaChallengeInfo(super::super::ArenaChallengeActivityDetailInfo::ArenaChallengeActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.fleur_fair_info)
        FleurFairInfo(super::super::FleurFairActivityDetailInfo::FleurFairActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.water_spirit_info)
        WaterSpiritInfo(super::super::WaterSpiritActivityDetailInfo::WaterSpiritActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.challneler_slab_info)
        ChallnelerSlabInfo(super::super::ChannelerSlabActivityDetailInfo::ChannelerSlabActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.mist_trial_activity_info)
        MistTrialActivityInfo(super::super::MistTrialActivityDetailInfo::MistTrialActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.hide_and_seek_info)
        HideAndSeekInfo(super::super::HideAndSeekActivityDetailInfo::HideAndSeekActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.find_hilichurl_info)
        FindHilichurlInfo(super::super::FindHilichurlDetailInfo::FindHilichurlDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.summer_time_info)
        SummerTimeInfo(super::super::SummerTimeDetailInfo::SummerTimeDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.buoyant_combat_info)
        BuoyantCombatInfo(super::super::BuoyantCombatDetailInfo::BuoyantCombatDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.echo_shell_info)
        EchoShellInfo(super::super::EchoShellDetailInfo::EchoShellDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.bounce_conjuring_info)
        BounceConjuringInfo(super::super::BounceConjuringActivityDetailInfo::BounceConjuringActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.blitz_rush_info)
        BlitzRushInfo(super::super::BlitzRushActivityDetailInfo::BlitzRushActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.chess_info)
        ChessInfo(super::super::ChessActivityDetailInfo::ChessActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.sumo_info)
        SumoInfo(super::super::SumoActivityDetailInfo::SumoActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.moonfin_trial_info)
        MoonfinTrialInfo(super::super::MoonfinTrialActivityDetailInfo::MoonfinTrialActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.luna_rite_info)
        LunaRiteInfo(super::super::LunaRiteDetailInfo::LunaRiteDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.plant_flower_info)
        PlantFlowerInfo(super::super::PlantFlowerActivityDetailInfo::PlantFlowerActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.music_game_info)
        MusicGameInfo(super::super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.roguelike_dungoen_info)
        RoguelikeDungoenInfo(super::super::RoguelikeDungeonActivityDetailInfo::RoguelikeDungeonActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.dig_info)
        DigInfo(super::super::DigActivityDetailInfo::DigActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.hachi_info)
        HachiInfo(super::super::HachiActivityDetailInfo::HachiActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.winter_camp_info)
        WinterCampInfo(super::super::WinterCampActivityDetailInfo::WinterCampActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.potion_info)
        PotionInfo(super::super::PotionActivityDetailInfo::PotionActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.tanuki_travel_activity_info)
        TanukiTravelActivityInfo(super::super::TanukiTravelActivityDetailInfo::TanukiTravelActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.lantern_rite_activity_info)
        LanternRiteActivityInfo(super::super::LanternRiteActivityDetailInfo::LanternRiteActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.michiae_matsuri_info)
        MichiaeMatsuriInfo(super::super::MichiaeMatsuriActivityDetailInfo::MichiaeMatsuriActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.bartender_info)
        BartenderInfo(super::super::BartenderActivityDetailInfo::BartenderActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.ugc_info)
        UgcInfo(super::super::UgcActivityDetailInfo::UgcActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.crystal_link_info)
        CrystalLinkInfo(super::super::CrystalLinkActivityDetailInfo::CrystalLinkActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.irodori_info)
        IrodoriInfo(super::super::IrodoriActivityDetailInfo::IrodoriActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.photo_info)
        PhotoInfo(super::super::PhotoActivityDetailInfo::PhotoActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.spice_info)
        SpiceInfo(super::super::SpiceActivityDetailInfo::SpiceActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.gacha_info)
        GachaInfo(super::super::GachaActivityDetailInfo::GachaActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.luminance_stone_challenge_info)
        LuminanceStoneChallengeInfo(super::super::LuminanceStoneChallengeActivityDetailInfo::LuminanceStoneChallengeActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.rogue_diary_info)
        RogueDiaryInfo(super::super::RogueDiaryActivityDetailInfo::RogueDiaryActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.summer_time_v2_info)
        SummerTimeV2Info(super::super::SummerTimeV2DetailInfo::SummerTimeV2DetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.island_party_info)
        IslandPartyInfo(super::super::IslandPartyDetailInfo::IslandPartyDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.gear_info)
        GearInfo(super::super::GearActivityDetailInfo::GearActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.graven_innocence_info)
        GravenInnocenceInfo(super::super::GravenInnocenceDetailInfo::GravenInnocenceDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.instable_spray_info)
        InstableSprayInfo(super::super::InstableSprayDetailInfo::InstableSprayDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.muqadas_potion_info)
        MuqadasPotionInfo(super::super::MuqadasPotionActivityDetailInfo::MuqadasPotionActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.treasure_seelie_info)
        TreasureSeelieInfo(super::super::TreasureSeelieActivityDetailInfo::TreasureSeelieActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.rock_board_explore_info)
        RockBoardExploreInfo(super::super::RockBoardExploreDetailInfo::RockBoardExploreDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.vintage_info)
        VintageInfo(super::super::VintageActivityDetailInfo::VintageActivityDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.wind_field_info)
        WindFieldInfo(super::super::WindFieldDetailInfo::WindFieldDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.fungus_fighter_info)
        FungusFighterInfo(super::super::FungusFighterDetailInfo::FungusFighterDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.char_amusement_info)
        CharAmusementInfo(super::super::CharAmusementDetailInfo::CharAmusementDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.effigy_challenge_info)
        EffigyChallengeInfo(super::super::EffigyChallengeV2DetailInfo::EffigyChallengeV2DetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.coin_collect_info)
        CoinCollectInfo(super::super::CoinCollectDetailInfo::CoinCollectDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.brick_breaker_info)
        BrickBreakerInfo(super::super::BrickBreakerDetailInfo::BrickBreakerDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.duel_heart_info)
        DuelHeartInfo(super::super::DuelHeartDetailInfo::DuelHeartDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.sea_lamp_v3_info)
        SeaLampV3Info(super::super::SeaLampV3DetailInfo::SeaLampV3DetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.team_chain_info)
        TeamChainInfo(super::super::TeamChainDetailInfo::TeamChainDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.electrohercules_battle_info)
        ElectroherculesBattleInfo(super::super::ElectroherculesBattleDetailInfo::ElectroherculesBattleDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.gcg_festival_info)
        GcgFestivalInfo(super::super::GCGFestivalDetailInfo::GCGFestivalDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.fleur_fair_v2_info)
        FleurFairV2Info(super::super::FleurFairV2DetailInfo::FleurFairV2DetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.fungus_fighter_v2_info)
        FungusFighterV2Info(super::super::FungusFighterV2DetailInfo::FungusFighterV2DetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.aka_fes_info)
        AkaFesInfo(super::super::AkaFesDetailInfo::AkaFesDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.sandworm_cannon_detail_info)
        SandwormCannonDetailInfo(super::super::SandwormCannonDetailInfo::SandwormCannonDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.sorush_trial_info)
        SorushTrialInfo(super::super::SorushTrialDetailInfo::SorushTrialDetailInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.journey_info)
        JourneyInfo(super::super::JourneyInfo::JourneyInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.effigy_challenge_v4_info)
        EffigyChallengeV4Info(super::super::EffigyChallengeV4Info::EffigyChallengeV4Info),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.gcg_pve_info)
        GcgPveInfo(super::super::GcgPveInfo::GcgPveInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.ugc_v2_info)
        UgcV2Info(super::super::UgcV2Info::UgcV2Info),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.penumbra_adventure_info)
        PenumbraAdventureInfo(super::super::PenumbraAdventureInfo::PenumbraAdventureInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.animal_view_info)
        AnimalViewInfo(super::super::AnimalViewInfo::AnimalViewInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.activity_multi_character_info)
        ActivityMultiCharacterInfo(super::super::ActivityMultiCharacterInfo::ActivityMultiCharacterInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.gcg_pve_infinite_info)
        GcgPveInfiniteInfo(super::super::GcgPveInfiniteInfo::GcgPveInfiniteInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.toy_battle_info)
        ToyBattleInfo(super::super::ToyBattleInfo::ToyBattleInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.photo_undersea_info)
        PhotoUnderseaInfo(super::super::PhotoUnderseaInfo::PhotoUnderseaInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.fontaine_gather_info)
        FontaineGatherInfo(super::super::FontaineGatherInfo::FontaineGatherInfo),
        // @@protoc_insertion_point(oneof_field:ActivityInfo.gcg_pve_puzzle_info)
        GcgPvePuzzleInfo(super::super::GcgPvePuzzleInfo::GcgPvePuzzleInfo),
    }

    impl ::protobuf::Oneof for Detail {
    }

    impl ::protobuf::OneofFull for Detail {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ActivityInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("detail").unwrap()).clone()
        }
    }

    impl Detail {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Detail>("detail")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12ActivityInfo.proto\x1a\x19ActivityWatcherInfo.proto\x1a\x1aActivit\
    yPushTipsData.proto\x1a\x1fSeaLampActivityDetailInfo.proto\x1a\x20Crucib\
    leActivityDetailInfo.proto\x1a\x20SalesmanActivityDetailInfo.proto\x1a#T\
    rialAvatarActivityDetailInfo.proto\x1a\x20DeliveryActivityDetailInfo.pro\
    to\x1a\x1dAsterActivityDetailInfo.proto\x1a\x1eFlightActivityDetailInfo.\
    proto\x1a#DragonSpineActivityDetailInfo.proto\x1a\x1eEffigyActivityDetai\
    lInfo.proto\x1a#TreasureMapActivityDetailInfo.proto\x1a\x20BlessingActiv\
    ityDetailInfo.proto\x1a\x19SeaLampActivityInfo.proto\x1a\"ExpeditionActi\
    vityDetailInfo.proto\x1a&ArenaChallengeActivityDetailInfo.proto\x1a!Fleu\
    rFairActivityDetailInfo.proto\x1a#WaterSpiritActivityDetailInfo.proto\
    \x1a%ChannelerSlabActivityDetailInfo.proto\x1a!MistTrialActivityDetailIn\
    fo.proto\x1a#HideAndSeekActivityDetailInfo.proto\x1a\x1dFindHilichurlDet\
    ailInfo.proto\x1a\x1aSummerTimeDetailInfo.proto\x1a\x1dBuoyantCombatDeta\
    ilInfo.proto\x1a\x19EchoShellDetailInfo.proto\x1a'BounceConjuringActivit\
    yDetailInfo.proto\x1a!BlitzRushActivityDetailInfo.proto\x1a\x1dChessActi\
    vityDetailInfo.proto\x1a\x1cSumoActivityDetailInfo.proto\x1a$MoonfinTria\
    lActivityDetailInfo.proto\x1a\x18LunaRiteDetailInfo.proto\x1a#PlantFlowe\
    rActivityDetailInfo.proto\x1a!MusicGameActivityDetailInfo.proto\x1a(Rogu\
    elikeDungeonActivityDetailInfo.proto\x1a\x1bDigActivityDetailInfo.proto\
    \x1a\x1dHachiActivityDetailInfo.proto\x1a\"WinterCampActivityDetailInfo.\
    proto\x1a\x1ePotionActivityDetailInfo.proto\x1a$TanukiTravelActivityDeta\
    ilInfo.proto\x1a#LanternRiteActivityDetailInfo.proto\x1a&MichiaeMatsuriA\
    ctivityDetailInfo.proto\x1a!BartenderActivityDetailInfo.proto\x1a\x1bUgc\
    ActivityDetailInfo.proto\x1a#CrystalLinkActivityDetailInfo.proto\x1a\x1f\
    IrodoriActivityDetailInfo.proto\x1a\x1dPhotoActivityDetailInfo.proto\x1a\
    \x1dSpiceActivityDetailInfo.proto\x1a\x1dGachaActivityDetailInfo.proto\
    \x1a/LuminanceStoneChallengeActivityDetailInfo.proto\x1a\"RogueDiaryActi\
    vityDetailInfo.proto\x1a\x1cSummerTimeV2DetailInfo.proto\x1a\x1bIslandPa\
    rtyDetailInfo.proto\x1a\x1cGearActivityDetailInfo.proto\x1a\x1fGravenInn\
    ocenceDetailInfo.proto\x1a\x1dInstableSprayDetailInfo.proto\x1a%MuqadasP\
    otionActivityDetailInfo.proto\x1a&TreasureSeelieActivityDetailInfo.proto\
    \x1a\x20RockBoardExploreDetailInfo.proto\x1a\x1fVintageActivityDetailInf\
    o.proto\x1a\x19WindFieldDetailInfo.proto\x1a\x1dFungusFighterDetailInfo.\
    proto\x1a\x1dCharAmusementDetailInfo.proto\x1a!EffigyChallengeV2DetailIn\
    fo.proto\x1a\x1bCoinCollectDetailInfo.proto\x1a\x1cBrickBreakerDetailInf\
    o.proto\x1a\x19DuelHeartDetailInfo.proto\x1a\x19SeaLampV3DetailInfo.prot\
    o\x1a\x19TeamChainDetailInfo.proto\x1a%ElectroherculesBattleDetailInfo.p\
    roto\x1a\x1bGCGFestivalDetailInfo.proto\x1a\x1bFleurFairV2DetailInfo.pro\
    to\x1a\x1fFungusFighterV2DetailInfo.proto\x1a\x16AkaFesDetailInfo.proto\
    \x1a\x1eSandwormCannonDetailInfo.proto\x1a\x1bSorushTrialDetailInfo.prot\
    o\x1a\x11JourneyInfo.proto\x1a\x1bEffigyChallengeV4Info.proto\x1a\x10Gcg\
    PveInfo.proto\x1a\x0fUgcV2Info.proto\x1a\x1bPenumbraAdventureInfo.proto\
    \x1a\x14AnimalViewInfo.proto\x1a\x20ActivityMultiCharacterInfo.proto\x1a\
    \x18GcgPveInfiniteInfo.proto\x1a\x13ToyBattleInfo.proto\x1a\x17PhotoUnde\
    rseaInfo.proto\x1a\x18FontaineGatherInfo.proto\x1a\x16GcgPvePuzzleInfo.p\
    roto\"\x89:\n\x0cActivityInfo\x12\x1f\n\x0bactivity_id\x18\x03\x20\x01(\
    \rR\nactivityId\x12!\n\x0bDNMOEAFCDGC\x18\xc8\r\x20\x03(\rR\x0bDNMOEAFCD\
    GC\x12@\n\x11watcher_info_list\x18\t\x20\x03(\x0b2\x14.ActivityWatcherIn\
    foR\x0fwatcherInfoList\x12\x1f\n\x0bis_finished\x18\x0e\x20\x01(\x08R\ni\
    sFinished\x12!\n\x0bLJLDCLMAMNL\x18\xe2\x03\x20\x03(\rR\x0bLJLDCLMAMNL\
    \x12\x20\n\x0bPJJKJGALLGD\x18\x10\x20\x01(\x08R\x0bPJJKJGALLGD\x12#\n\ra\
    ctivity_type\x18\x01\x20\x01(\rR\x0cactivityType\x12\x1f\n\x0bschedule_i\
    d\x18\x05\x20\x01(\rR\nscheduleId\x12O\n\x11activity_coin_map\x18\x9a\
    \x0c\x20\x03(\x0b2\".ActivityInfo.ActivityCoinMapEntryR\x0factivityCoinM\
    ap\x12$\n\x0emeet_cond_list\x18\x0c\x20\x03(\rR\x0cmeetCondList\x12\x20\
    \n\x0bDKJDABCNGBP\x18\r\x20\x01(\x08R\x0bDKJDABCNGBP\x12\x1d\n\nbegin_ti\
    me\x18\x02\x20\x01(\rR\tbeginTime\x12!\n\x0bINGFNLLCDOL\x18\xdd\x05\x20\
    \x01(\rR\x0bINGFNLLCDOL\x12\x20\n\x0bENNDKMJIMHN\x18\x0f\x20\x01(\x08R\
    \x0bENNDKMJIMHN\x12\x1c\n\tcur_score\x18\x93\x0c\x20\x01(\rR\x08curScore\
    \x12!\n\x0bBKJNDLLNAML\x18\x9a\x0e\x20\x01(\x08R\x0bBKJNDLLNAML\x120\n\
    \x14first_day_start_time\x18\xd2\x07\x20\x01(\rR\x11firstDayStartTime\
    \x12!\n\x0bABMOPKOIMPA\x18\x8d\x04\x20\x01(\x08R\x0bABMOPKOIMPA\x12!\n\
    \x0bFGFGECAAKJM\x18\xa7\r\x20\x01(\rR\x0bFGFGECAAKJM\x12!\n\x0bGFEMIEBKK\
    KL\x18\xdd\x08\x20\x01(\x08R\x0bGFEMIEBKKKL\x12!\n\x0bCEFIPNKPEKA\x18\
    \xed\x04\x20\x01(\rR\x0bCEFIPNKPEKA\x12\x19\n\x08end_time\x18\x0b\x20\
    \x01(\rR\x07endTime\x12M\n\x11wish_gift_num_map\x18\x9c\x07\x20\x03(\x0b\
    2!.ActivityInfo.WishGiftNumMapEntryR\x0ewishGiftNumMap\x12\x20\n\x0bPHCO\
    MIFAIJD\x18\x04\x20\x03(\rR\x0bPHCOMIFAIJD\x12V\n\x1cactivity_push_tips_\
    data_list\x18\x83\x05\x20\x03(\x0b2\x15.ActivityPushTipsDataR\x18activit\
    yPushTipsDataList\x12@\n\rsam_lamp_info\x18\n\x20\x01(\x0b2\x1a.SeaLampA\
    ctivityDetailInfoH\0R\x0bsamLampInfo\x12B\n\rcrucible_info\x18\x07\x20\
    \x01(\x0b2\x1b.CrucibleActivityDetailInfoH\0R\x0ccrucibleInfo\x12B\n\rsa\
    lesman_info\x18\x08\x20\x01(\x0b2\x1b.SalesmanActivityDetailInfoH\0R\x0c\
    salesmanInfo\x12L\n\x11trial_avatar_info\x18\x06\x20\x01(\x0b2\x1e.Trial\
    AvatarActivityDetailInfoH\0R\x0ftrialAvatarInfo\x12C\n\rdelivery_info\
    \x18\xb6\x0e\x20\x01(\x0b2\x1b.DeliveryActivityDetailInfoH\0R\x0cdeliver\
    yInfo\x12:\n\naster_info\x18\x84\x02\x20\x01(\x0b2\x18.AsterActivityDeta\
    ilInfoH\0R\tasterInfo\x12=\n\x0bflight_info\x18\xba\x06\x20\x01(\x0b2\
    \x19.FlightActivityDetailInfoH\0R\nflightInfo\x12L\n\x11dragon_spine_inf\
    o\x18n\x20\x01(\x0b2\x1e.DragonSpineActivityDetailInfoH\0R\x0fdragonSpin\
    eInfo\x12=\n\x0beffigy_info\x18\xf2\x07\x20\x01(\x0b2\x19.EffigyActivity\
    DetailInfoH\0R\neffigyInfo\x12M\n\x11treasure_map_info\x18\xda\r\x20\x01\
    (\x0b2\x1e.TreasureMapActivityDetailInfoH\0R\x0ftreasureMapInfo\x12C\n\r\
    blessing_info\x18\xcb\x02\x20\x01(\x0b2\x1b.BlessingActivityDetailInfoH\
    \0R\x0cblessingInfo\x12;\n\rsea_lamp_info\x18\xda\x08\x20\x01(\x0b2\x14.\
    SeaLampActivityInfoH\0R\x0bseaLampInfo\x12I\n\x0fexpedition_info\x18\xa2\
    \x05\x20\x01(\x0b2\x1d.ExpeditionActivityDetailInfoH\0R\x0eexpeditionInf\
    o\x12U\n\x14arena_challenge_info\x18'\x20\x01(\x0b2!.ArenaChallengeActiv\
    ityDetailInfoH\0R\x12arenaChallengeInfo\x12G\n\x0ffleur_fair_info\x18\
    \xa5\x02\x20\x01(\x0b2\x1c.FleurFairActivityDetailInfoH\0R\rfleurFairInf\
    o\x12M\n\x11water_spirit_info\x18\xcd\x0f\x20\x01(\x0b2\x1e.WaterSpiritA\
    ctivityDetailInfoH\0R\x0fwaterSpiritInfo\x12U\n\x14challneler_slab_info\
    \x18\xdd\r\x20\x01(\x0b2\x20.ChannelerSlabActivityDetailInfoH\0R\x12chal\
    lnelerSlabInfo\x12X\n\x18mist_trial_activity_info\x18\xd6\x0c\x20\x01(\
    \x0b2\x1c.MistTrialActivityDetailInfoH\0R\x15mistTrialActivityInfo\x12N\
    \n\x12hide_and_seek_info\x18\xd3\r\x20\x01(\x0b2\x1e.HideAndSeekActivity\
    DetailInfoH\0R\x0fhideAndSeekInfo\x12K\n\x13find_hilichurl_info\x18\x84\
    \n\x20\x01(\x0b2\x18.FindHilichurlDetailInfoH\0R\x11findHilichurlInfo\
    \x12B\n\x10summer_time_info\x18\xb6\x07\x20\x01(\x0b2\x15.SummerTimeDeta\
    ilInfoH\0R\x0esummerTimeInfo\x12K\n\x13buoyant_combat_info\x18\x87\x04\
    \x20\x01(\x0b2\x18.BuoyantCombatDetailInfoH\0R\x11buoyantCombatInfo\x12?\
    \n\x0fecho_shell_info\x18\xb1\x02\x20\x01(\x0b2\x14.EchoShellDetailInfoH\
    \0R\rechoShellInfo\x12Y\n\x15bounce_conjuring_info\x18\xc8\x0e\x20\x01(\
    \x0b2\".BounceConjuringActivityDetailInfoH\0R\x13bounceConjuringInfo\x12\
    G\n\x0fblitz_rush_info\x18\x93\x07\x20\x01(\x0b2\x1c.BlitzRushActivityDe\
    tailInfoH\0R\rblitzRushInfo\x12:\n\nchess_info\x18\xbf\x08\x20\x01(\x0b2\
    \x18.ChessActivityDetailInfoH\0R\tchessInfo\x127\n\tsumo_info\x18\xd8\
    \x0f\x20\x01(\x0b2\x17.SumoActivityDetailInfoH\0R\x08sumoInfo\x12P\n\x12\
    moonfin_trial_info\x18\x85\x03\x20\x01(\x0b2\x1f.MoonfinTrialActivityDet\
    ailInfoH\0R\x10moonfinTrialInfo\x12<\n\x0eluna_rite_info\x18\xb3\x0f\x20\
    \x01(\x0b2\x13.LunaRiteDetailInfoH\0R\x0clunaRiteInfo\x12M\n\x11plant_fl\
    ower_info\x18\xbe\x0e\x20\x01(\x0b2\x1e.PlantFlowerActivityDetailInfoH\0\
    R\x0fplantFlowerInfo\x12G\n\x0fmusic_game_info\x18\xb7\x0e\x20\x01(\x0b2\
    \x1c.MusicGameActivityDetailInfoH\0R\rmusicGameInfo\x12\\\n\x16roguelike\
    _dungoen_info\x18\x81\x08\x20\x01(\x0b2#.RoguelikeDungeonActivityDetailI\
    nfoH\0R\x14roguelikeDungoenInfo\x124\n\x08dig_info\x18\xbf\x0e\x20\x01(\
    \x0b2\x16.DigActivityDetailInfoH\0R\x07digInfo\x12:\n\nhachi_info\x18\
    \x98\t\x20\x01(\x0b2\x18.HachiActivityDetailInfoH\0R\thachiInfo\x12J\n\
    \x10winter_camp_info\x18\xde\x0f\x20\x01(\x0b2\x1d.WinterCampActivityDet\
    ailInfoH\0R\x0ewinterCampInfo\x12=\n\x0bpotion_info\x18\xcd\x0b\x20\x01(\
    \x0b2\x19.PotionActivityDetailInfoH\0R\npotionInfo\x12a\n\x1btanuki_trav\
    el_activity_info\x18\xb0\x07\x20\x01(\x0b2\x1f.TanukiTravelActivityDetai\
    lInfoH\0R\x18tanukiTravelActivityInfo\x12^\n\x1alantern_rite_activity_in\
    fo\x18\xbc\x0f\x20\x01(\x0b2\x1e.LanternRiteActivityDetailInfoH\0R\x17la\
    nternRiteActivityInfo\x12U\n\x14michiae_matsuri_info\x18r\x20\x01(\x0b2!\
    .MichiaeMatsuriActivityDetailInfoH\0R\x12michiaeMatsuriInfo\x12F\n\x0eba\
    rtender_info\x18\xa1\x0b\x20\x01(\x0b2\x1c.BartenderActivityDetailInfoH\
    \0R\rbartenderInfo\x124\n\x08ugc_info\x18\x83\x0e\x20\x01(\x0b2\x16.UgcA\
    ctivityDetailInfoH\0R\x07ugcInfo\x12M\n\x11crystal_link_info\x18\x95\n\
    \x20\x01(\x0b2\x1e.CrystalLinkActivityDetailInfoH\0R\x0fcrystalLinkInfo\
    \x12?\n\x0cirodori_info\x186\x20\x01(\x0b2\x1a.IrodoriActivityDetailInfo\
    H\0R\x0birodoriInfo\x12:\n\nphoto_info\x18\xd4\x0b\x20\x01(\x0b2\x18.Pho\
    toActivityDetailInfoH\0R\tphotoInfo\x12:\n\nspice_info\x18\xbe\x03\x20\
    \x01(\x0b2\x18.SpiceActivityDetailInfoH\0R\tspiceInfo\x12:\n\ngacha_info\
    \x18\xa8\t\x20\x01(\x0b2\x18.GachaActivityDetailInfoH\0R\tgachaInfo\x12q\
    \n\x1eluminance_stone_challenge_info\x18&\x20\x01(\x0b2*.LuminanceStoneC\
    hallengeActivityDetailInfoH\0R\x1bluminanceStoneChallengeInfo\x12J\n\x10\
    rogue_diary_info\x18\xab\x03\x20\x01(\x0b2\x1d.RogueDiaryActivityDetailI\
    nfoH\0R\x0erogueDiaryInfo\x12I\n\x13summer_time_v2_info\x18\x8e\x07\x20\
    \x01(\x0b2\x17.SummerTimeV2DetailInfoH\0R\x10summerTimeV2Info\x12E\n\x11\
    island_party_info\x18\x94\x08\x20\x01(\x0b2\x16.IslandPartyDetailInfoH\0\
    R\x0fislandPartyInfo\x127\n\tgear_info\x18\xef\t\x20\x01(\x0b2\x17.GearA\
    ctivityDetailInfoH\0R\x08gearInfo\x12Q\n\x15graven_innocence_info\x18\
    \xe4\x02\x20\x01(\x0b2\x1a.GravenInnocenceDetailInfoH\0R\x13gravenInnoce\
    nceInfo\x12K\n\x13instable_spray_info\x18\xfc\x03\x20\x01(\x0b2\x18.Inst\
    ableSprayDetailInfoH\0R\x11instableSprayInfo\x12S\n\x13muqadas_potion_in\
    fo\x18\xc2\x0b\x20\x01(\x0b2\x20.MuqadasPotionActivityDetailInfoH\0R\x11\
    muqadasPotionInfo\x12V\n\x14treasure_seelie_info\x18\xe3\t\x20\x01(\x0b2\
    !.TreasureSeelieActivityDetailInfoH\0R\x12treasureSeelieInfo\x12U\n\x17r\
    ock_board_explore_info\x18\x84\x08\x20\x01(\x0b2\x1b.RockBoardExploreDet\
    ailInfoH\0R\x14rockBoardExploreInfo\x12@\n\x0cvintage_info\x18\xb9\x0b\
    \x20\x01(\x0b2\x1a.VintageActivityDetailInfoH\0R\x0bvintageInfo\x12?\n\
    \x0fwind_field_info\x18\x80\x06\x20\x01(\x0b2\x14.WindFieldDetailInfoH\0\
    R\rwindFieldInfo\x12K\n\x13fungus_fighter_info\x18\xc2\x06\x20\x01(\x0b2\
    \x18.FungusFighterDetailInfoH\0R\x11fungusFighterInfo\x12K\n\x13char_amu\
    sement_info\x18\xc6\t\x20\x01(\x0b2\x18.CharAmusementDetailInfoH\0R\x11c\
    harAmusementInfo\x12S\n\x15effigy_challenge_info\x18\xfb\t\x20\x01(\x0b2\
    \x1c.EffigyChallengeV2DetailInfoH\0R\x13effigyChallengeInfo\x12E\n\x11co\
    in_collect_info\x18\xc7\x06\x20\x01(\x0b2\x16.CoinCollectDetailInfoH\0R\
    \x0fcoinCollectInfo\x12H\n\x12brick_breaker_info\x18\xa7\x04\x20\x01(\
    \x0b2\x17.BrickBreakerDetailInfoH\0R\x10brickBreakerInfo\x12?\n\x0fduel_\
    heart_info\x18\x86\r\x20\x01(\x0b2\x14.DuelHeartDetailInfoH\0R\rduelHear\
    tInfo\x12@\n\x10sea_lamp_v3_info\x18\xc1\x06\x20\x01(\x0b2\x14.SeaLampV3\
    DetailInfoH\0R\rseaLampV3Info\x12?\n\x0fteam_chain_info\x18\x8d\t\x20\
    \x01(\x0b2\x14.TeamChainDetailInfoH\0R\rteamChainInfo\x12c\n\x1belectroh\
    ercules_battle_info\x18\xd5\x07\x20\x01(\x0b2\x20.ElectroherculesBattleD\
    etailInfoH\0R\x19electroherculesBattleInfo\x12E\n\x11gcg_festival_info\
    \x18\x80\r\x20\x01(\x0b2\x16.GCGFestivalDetailInfoH\0R\x0fgcgFestivalInf\
    o\x12F\n\x12fleur_fair_v2_info\x18\xbe\x0f\x20\x01(\x0b2\x16.FleurFairV2\
    DetailInfoH\0R\x0ffleurFairV2Info\x12R\n\x16fungus_fighter_v2_info\x18\
    \x85\x0c\x20\x01(\x0b2\x1a.FungusFighterV2DetailInfoH\0R\x13fungusFighte\
    rV2Info\x126\n\x0caka_fes_info\x18\xf4\x0b\x20\x01(\x0b2\x11.AkaFesDetai\
    lInfoH\0R\nakaFesInfo\x12[\n\x1bsandworm_cannon_detail_info\x18\xf2\x04\
    \x20\x01(\x0b2\x19.SandwormCannonDetailInfoH\0R\x18sandwormCannonDetailI\
    nfo\x12E\n\x11sorush_trial_info\x18\xb5\x08\x20\x01(\x0b2\x16.SorushTria\
    lDetailInfoH\0R\x0fsorushTrialInfo\x122\n\x0cjourney_info\x18\xcd\x0e\
    \x20\x01(\x0b2\x0c.JourneyInfoH\0R\x0bjourneyInfo\x12R\n\x18effigy_chall\
    enge_v4_info\x18\xa9\n\x20\x01(\x0b2\x16.EffigyChallengeV4InfoH\0R\x15ef\
    figyChallengeV4Info\x120\n\x0cgcg_pve_info\x18\x98\n\x20\x01(\x0b2\x0b.G\
    cgPveInfoH\0R\ngcgPveInfo\x12-\n\x0bugc_v2_info\x18\xdf\x07\x20\x01(\x0b\
    2\n.UgcV2InfoH\0R\tugcV2Info\x12Q\n\x17penumbra_adventure_info\x18\xb2\
    \x02\x20\x01(\x0b2\x16.PenumbraAdventureInfoH\0R\x15penumbraAdventureInf\
    o\x12<\n\x10animal_view_info\x18\xb3\x07\x20\x01(\x0b2\x0f.AnimalViewInf\
    oH\0R\x0eanimalViewInfo\x12a\n\x1dactivity_multi_character_info\x18\xbd\
    \t\x20\x01(\x0b2\x1b.ActivityMultiCharacterInfoH\0R\x1aactivityMultiChar\
    acterInfo\x12H\n\x15gcg_pve_infinite_info\x18|\x20\x01(\x0b2\x13.GcgPveI\
    nfiniteInfoH\0R\x12gcgPveInfiniteInfo\x128\n\x0ftoy_battle_info\x18>\x20\
    \x01(\x0b2\x0e.ToyBattleInfoH\0R\rtoyBattleInfo\x12E\n\x13photo_undersea\
    _info\x18\xe2\x01\x20\x01(\x0b2\x12.PhotoUnderseaInfoH\0R\x11photoUnders\
    eaInfo\x12H\n\x14fontaine_gather_info\x18\x8b\x08\x20\x01(\x0b2\x13.Font\
    aineGatherInfoH\0R\x12fontaineGatherInfo\x12C\n\x13gcg_pve_puzzle_info\
    \x18\xe7\x06\x20\x01(\x0b2\x11.GcgPvePuzzleInfoH\0R\x10gcgPvePuzzleInfo\
    \x1aB\n\x14ActivityCoinMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03\
    key\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01\x1aA\n\x13\
    WishGiftNumMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\x14\
    \n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01B\x08\n\x06detailB\x1b\
    \n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(87);
            deps.push(super::ActivityWatcherInfo::file_descriptor().clone());
            deps.push(super::ActivityPushTipsData::file_descriptor().clone());
            deps.push(super::SeaLampActivityDetailInfo::file_descriptor().clone());
            deps.push(super::CrucibleActivityDetailInfo::file_descriptor().clone());
            deps.push(super::SalesmanActivityDetailInfo::file_descriptor().clone());
            deps.push(super::TrialAvatarActivityDetailInfo::file_descriptor().clone());
            deps.push(super::DeliveryActivityDetailInfo::file_descriptor().clone());
            deps.push(super::AsterActivityDetailInfo::file_descriptor().clone());
            deps.push(super::FlightActivityDetailInfo::file_descriptor().clone());
            deps.push(super::DragonSpineActivityDetailInfo::file_descriptor().clone());
            deps.push(super::EffigyActivityDetailInfo::file_descriptor().clone());
            deps.push(super::TreasureMapActivityDetailInfo::file_descriptor().clone());
            deps.push(super::BlessingActivityDetailInfo::file_descriptor().clone());
            deps.push(super::SeaLampActivityInfo::file_descriptor().clone());
            deps.push(super::ExpeditionActivityDetailInfo::file_descriptor().clone());
            deps.push(super::ArenaChallengeActivityDetailInfo::file_descriptor().clone());
            deps.push(super::FleurFairActivityDetailInfo::file_descriptor().clone());
            deps.push(super::WaterSpiritActivityDetailInfo::file_descriptor().clone());
            deps.push(super::ChannelerSlabActivityDetailInfo::file_descriptor().clone());
            deps.push(super::MistTrialActivityDetailInfo::file_descriptor().clone());
            deps.push(super::HideAndSeekActivityDetailInfo::file_descriptor().clone());
            deps.push(super::FindHilichurlDetailInfo::file_descriptor().clone());
            deps.push(super::SummerTimeDetailInfo::file_descriptor().clone());
            deps.push(super::BuoyantCombatDetailInfo::file_descriptor().clone());
            deps.push(super::EchoShellDetailInfo::file_descriptor().clone());
            deps.push(super::BounceConjuringActivityDetailInfo::file_descriptor().clone());
            deps.push(super::BlitzRushActivityDetailInfo::file_descriptor().clone());
            deps.push(super::ChessActivityDetailInfo::file_descriptor().clone());
            deps.push(super::SumoActivityDetailInfo::file_descriptor().clone());
            deps.push(super::MoonfinTrialActivityDetailInfo::file_descriptor().clone());
            deps.push(super::LunaRiteDetailInfo::file_descriptor().clone());
            deps.push(super::PlantFlowerActivityDetailInfo::file_descriptor().clone());
            deps.push(super::MusicGameActivityDetailInfo::file_descriptor().clone());
            deps.push(super::RoguelikeDungeonActivityDetailInfo::file_descriptor().clone());
            deps.push(super::DigActivityDetailInfo::file_descriptor().clone());
            deps.push(super::HachiActivityDetailInfo::file_descriptor().clone());
            deps.push(super::WinterCampActivityDetailInfo::file_descriptor().clone());
            deps.push(super::PotionActivityDetailInfo::file_descriptor().clone());
            deps.push(super::TanukiTravelActivityDetailInfo::file_descriptor().clone());
            deps.push(super::LanternRiteActivityDetailInfo::file_descriptor().clone());
            deps.push(super::MichiaeMatsuriActivityDetailInfo::file_descriptor().clone());
            deps.push(super::BartenderActivityDetailInfo::file_descriptor().clone());
            deps.push(super::UgcActivityDetailInfo::file_descriptor().clone());
            deps.push(super::CrystalLinkActivityDetailInfo::file_descriptor().clone());
            deps.push(super::IrodoriActivityDetailInfo::file_descriptor().clone());
            deps.push(super::PhotoActivityDetailInfo::file_descriptor().clone());
            deps.push(super::SpiceActivityDetailInfo::file_descriptor().clone());
            deps.push(super::GachaActivityDetailInfo::file_descriptor().clone());
            deps.push(super::LuminanceStoneChallengeActivityDetailInfo::file_descriptor().clone());
            deps.push(super::RogueDiaryActivityDetailInfo::file_descriptor().clone());
            deps.push(super::SummerTimeV2DetailInfo::file_descriptor().clone());
            deps.push(super::IslandPartyDetailInfo::file_descriptor().clone());
            deps.push(super::GearActivityDetailInfo::file_descriptor().clone());
            deps.push(super::GravenInnocenceDetailInfo::file_descriptor().clone());
            deps.push(super::InstableSprayDetailInfo::file_descriptor().clone());
            deps.push(super::MuqadasPotionActivityDetailInfo::file_descriptor().clone());
            deps.push(super::TreasureSeelieActivityDetailInfo::file_descriptor().clone());
            deps.push(super::RockBoardExploreDetailInfo::file_descriptor().clone());
            deps.push(super::VintageActivityDetailInfo::file_descriptor().clone());
            deps.push(super::WindFieldDetailInfo::file_descriptor().clone());
            deps.push(super::FungusFighterDetailInfo::file_descriptor().clone());
            deps.push(super::CharAmusementDetailInfo::file_descriptor().clone());
            deps.push(super::EffigyChallengeV2DetailInfo::file_descriptor().clone());
            deps.push(super::CoinCollectDetailInfo::file_descriptor().clone());
            deps.push(super::BrickBreakerDetailInfo::file_descriptor().clone());
            deps.push(super::DuelHeartDetailInfo::file_descriptor().clone());
            deps.push(super::SeaLampV3DetailInfo::file_descriptor().clone());
            deps.push(super::TeamChainDetailInfo::file_descriptor().clone());
            deps.push(super::ElectroherculesBattleDetailInfo::file_descriptor().clone());
            deps.push(super::GCGFestivalDetailInfo::file_descriptor().clone());
            deps.push(super::FleurFairV2DetailInfo::file_descriptor().clone());
            deps.push(super::FungusFighterV2DetailInfo::file_descriptor().clone());
            deps.push(super::AkaFesDetailInfo::file_descriptor().clone());
            deps.push(super::SandwormCannonDetailInfo::file_descriptor().clone());
            deps.push(super::SorushTrialDetailInfo::file_descriptor().clone());
            deps.push(super::JourneyInfo::file_descriptor().clone());
            deps.push(super::EffigyChallengeV4Info::file_descriptor().clone());
            deps.push(super::GcgPveInfo::file_descriptor().clone());
            deps.push(super::UgcV2Info::file_descriptor().clone());
            deps.push(super::PenumbraAdventureInfo::file_descriptor().clone());
            deps.push(super::AnimalViewInfo::file_descriptor().clone());
            deps.push(super::ActivityMultiCharacterInfo::file_descriptor().clone());
            deps.push(super::GcgPveInfiniteInfo::file_descriptor().clone());
            deps.push(super::ToyBattleInfo::file_descriptor().clone());
            deps.push(super::PhotoUnderseaInfo::file_descriptor().clone());
            deps.push(super::FontaineGatherInfo::file_descriptor().clone());
            deps.push(super::GcgPvePuzzleInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ActivityInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
