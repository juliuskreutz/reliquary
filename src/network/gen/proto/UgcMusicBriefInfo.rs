// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `UgcMusicBriefInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:UgcMusicBriefInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UgcMusicBriefInfo {
    // message fields
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.creator_nickname)
    pub creator_nickname: ::std::string::String,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.KNFNFNAEODI)
    pub KNFNFNAEODI: u32,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.PCOJFEOMDBK)
    pub PCOJFEOMDBK: bool,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.IOPMLJEDCEN)
    pub IOPMLJEDCEN: u32,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.KNLGDHEOICD)
    pub KNLGDHEOICD: u32,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.is_psn_platform)
    pub is_psn_platform: bool,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.ugc_guid)
    pub ugc_guid: u64,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.LNLDAMPFKJO)
    pub LNLDAMPFKJO: u32,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.BBIEBFNKIAN)
    pub BBIEBFNKIAN: u32,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.JBMPDKHGANB)
    pub JBMPDKHGANB: u32,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.HEGNHLBBGFL)
    pub HEGNHLBBGFL: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.GCLLDEFJCPH)
    pub GCLLDEFJCPH: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.music_id)
    pub music_id: u32,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.MBJGIACIGJB)
    pub MBJGIACIGJB: u32,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.BKEELEDBHGE)
    pub BKEELEDBHGE: bool,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.KKIHPNJHKEP)
    pub KKIHPNJHKEP: u32,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.import_from_ugc_guid)
    pub import_from_ugc_guid: u64,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.DLEDJPPLMCE)
    pub DLEDJPPLMCE: u32,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.KNDKOLIMFPJ)
    pub KNDKOLIMFPJ: bool,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.max_score)
    pub max_score: u32,
    // @@protoc_insertion_point(field:UgcMusicBriefInfo.version)
    pub version: u32,
    // special fields
    // @@protoc_insertion_point(special_field:UgcMusicBriefInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UgcMusicBriefInfo {
    fn default() -> &'a UgcMusicBriefInfo {
        <UgcMusicBriefInfo as ::protobuf::Message>::default_instance()
    }
}

impl UgcMusicBriefInfo {
    pub fn new() -> UgcMusicBriefInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(21);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "creator_nickname",
            |m: &UgcMusicBriefInfo| { &m.creator_nickname },
            |m: &mut UgcMusicBriefInfo| { &mut m.creator_nickname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KNFNFNAEODI",
            |m: &UgcMusicBriefInfo| { &m.KNFNFNAEODI },
            |m: &mut UgcMusicBriefInfo| { &mut m.KNFNFNAEODI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PCOJFEOMDBK",
            |m: &UgcMusicBriefInfo| { &m.PCOJFEOMDBK },
            |m: &mut UgcMusicBriefInfo| { &mut m.PCOJFEOMDBK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IOPMLJEDCEN",
            |m: &UgcMusicBriefInfo| { &m.IOPMLJEDCEN },
            |m: &mut UgcMusicBriefInfo| { &mut m.IOPMLJEDCEN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KNLGDHEOICD",
            |m: &UgcMusicBriefInfo| { &m.KNLGDHEOICD },
            |m: &mut UgcMusicBriefInfo| { &mut m.KNLGDHEOICD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_psn_platform",
            |m: &UgcMusicBriefInfo| { &m.is_psn_platform },
            |m: &mut UgcMusicBriefInfo| { &mut m.is_psn_platform },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ugc_guid",
            |m: &UgcMusicBriefInfo| { &m.ugc_guid },
            |m: &mut UgcMusicBriefInfo| { &mut m.ugc_guid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LNLDAMPFKJO",
            |m: &UgcMusicBriefInfo| { &m.LNLDAMPFKJO },
            |m: &mut UgcMusicBriefInfo| { &mut m.LNLDAMPFKJO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BBIEBFNKIAN",
            |m: &UgcMusicBriefInfo| { &m.BBIEBFNKIAN },
            |m: &mut UgcMusicBriefInfo| { &mut m.BBIEBFNKIAN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JBMPDKHGANB",
            |m: &UgcMusicBriefInfo| { &m.JBMPDKHGANB },
            |m: &mut UgcMusicBriefInfo| { &mut m.JBMPDKHGANB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HEGNHLBBGFL",
            |m: &UgcMusicBriefInfo| { &m.HEGNHLBBGFL },
            |m: &mut UgcMusicBriefInfo| { &mut m.HEGNHLBBGFL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GCLLDEFJCPH",
            |m: &UgcMusicBriefInfo| { &m.GCLLDEFJCPH },
            |m: &mut UgcMusicBriefInfo| { &mut m.GCLLDEFJCPH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "music_id",
            |m: &UgcMusicBriefInfo| { &m.music_id },
            |m: &mut UgcMusicBriefInfo| { &mut m.music_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MBJGIACIGJB",
            |m: &UgcMusicBriefInfo| { &m.MBJGIACIGJB },
            |m: &mut UgcMusicBriefInfo| { &mut m.MBJGIACIGJB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BKEELEDBHGE",
            |m: &UgcMusicBriefInfo| { &m.BKEELEDBHGE },
            |m: &mut UgcMusicBriefInfo| { &mut m.BKEELEDBHGE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KKIHPNJHKEP",
            |m: &UgcMusicBriefInfo| { &m.KKIHPNJHKEP },
            |m: &mut UgcMusicBriefInfo| { &mut m.KKIHPNJHKEP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "import_from_ugc_guid",
            |m: &UgcMusicBriefInfo| { &m.import_from_ugc_guid },
            |m: &mut UgcMusicBriefInfo| { &mut m.import_from_ugc_guid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DLEDJPPLMCE",
            |m: &UgcMusicBriefInfo| { &m.DLEDJPPLMCE },
            |m: &mut UgcMusicBriefInfo| { &mut m.DLEDJPPLMCE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KNDKOLIMFPJ",
            |m: &UgcMusicBriefInfo| { &m.KNDKOLIMFPJ },
            |m: &mut UgcMusicBriefInfo| { &mut m.KNDKOLIMFPJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_score",
            |m: &UgcMusicBriefInfo| { &m.max_score },
            |m: &mut UgcMusicBriefInfo| { &mut m.max_score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &UgcMusicBriefInfo| { &m.version },
            |m: &mut UgcMusicBriefInfo| { &mut m.version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UgcMusicBriefInfo>(
            "UgcMusicBriefInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UgcMusicBriefInfo {
    const NAME: &'static str = "UgcMusicBriefInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.creator_nickname = is.read_string()?;
                },
                56 => {
                    self.KNFNFNAEODI = is.read_uint32()?;
                },
                24 => {
                    self.PCOJFEOMDBK = is.read_bool()?;
                },
                9032 => {
                    self.IOPMLJEDCEN = is.read_uint32()?;
                },
                64 => {
                    self.KNLGDHEOICD = is.read_uint32()?;
                },
                112 => {
                    self.is_psn_platform = is.read_bool()?;
                },
                40 => {
                    self.ugc_guid = is.read_uint64()?;
                },
                2104 => {
                    self.LNLDAMPFKJO = is.read_uint32()?;
                },
                104 => {
                    self.BBIEBFNKIAN = is.read_uint32()?;
                },
                3104 => {
                    self.JBMPDKHGANB = is.read_uint32()?;
                },
                10922 => {
                    is.read_repeated_packed_uint32_into(&mut self.HEGNHLBBGFL)?;
                },
                10920 => {
                    self.HEGNHLBBGFL.push(is.read_uint32()?);
                },
                6922 => {
                    is.read_repeated_packed_uint32_into(&mut self.GCLLDEFJCPH)?;
                },
                6920 => {
                    self.GCLLDEFJCPH.push(is.read_uint32()?);
                },
                88 => {
                    self.music_id = is.read_uint32()?;
                },
                72 => {
                    self.MBJGIACIGJB = is.read_uint32()?;
                },
                96 => {
                    self.BKEELEDBHGE = is.read_bool()?;
                },
                10816 => {
                    self.KKIHPNJHKEP = is.read_uint32()?;
                },
                80 => {
                    self.import_from_ugc_guid = is.read_uint64()?;
                },
                8 => {
                    self.DLEDJPPLMCE = is.read_uint32()?;
                },
                32 => {
                    self.KNDKOLIMFPJ = is.read_bool()?;
                },
                48 => {
                    self.max_score = is.read_uint32()?;
                },
                120 => {
                    self.version = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.creator_nickname.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.creator_nickname);
        }
        if self.KNFNFNAEODI != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.KNFNFNAEODI);
        }
        if self.PCOJFEOMDBK != false {
            my_size += 1 + 1;
        }
        if self.IOPMLJEDCEN != 0 {
            my_size += ::protobuf::rt::uint32_size(1129, self.IOPMLJEDCEN);
        }
        if self.KNLGDHEOICD != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.KNLGDHEOICD);
        }
        if self.is_psn_platform != false {
            my_size += 1 + 1;
        }
        if self.ugc_guid != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.ugc_guid);
        }
        if self.LNLDAMPFKJO != 0 {
            my_size += ::protobuf::rt::uint32_size(263, self.LNLDAMPFKJO);
        }
        if self.BBIEBFNKIAN != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.BBIEBFNKIAN);
        }
        if self.JBMPDKHGANB != 0 {
            my_size += ::protobuf::rt::uint32_size(388, self.JBMPDKHGANB);
        }
        for value in &self.HEGNHLBBGFL {
            my_size += ::protobuf::rt::uint32_size(1365, *value);
        };
        for value in &self.GCLLDEFJCPH {
            my_size += ::protobuf::rt::uint32_size(865, *value);
        };
        if self.music_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.music_id);
        }
        if self.MBJGIACIGJB != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.MBJGIACIGJB);
        }
        if self.BKEELEDBHGE != false {
            my_size += 1 + 1;
        }
        if self.KKIHPNJHKEP != 0 {
            my_size += ::protobuf::rt::uint32_size(1352, self.KKIHPNJHKEP);
        }
        if self.import_from_ugc_guid != 0 {
            my_size += ::protobuf::rt::uint64_size(10, self.import_from_ugc_guid);
        }
        if self.DLEDJPPLMCE != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.DLEDJPPLMCE);
        }
        if self.KNDKOLIMFPJ != false {
            my_size += 1 + 1;
        }
        if self.max_score != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.max_score);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.creator_nickname.is_empty() {
            os.write_string(2, &self.creator_nickname)?;
        }
        if self.KNFNFNAEODI != 0 {
            os.write_uint32(7, self.KNFNFNAEODI)?;
        }
        if self.PCOJFEOMDBK != false {
            os.write_bool(3, self.PCOJFEOMDBK)?;
        }
        if self.IOPMLJEDCEN != 0 {
            os.write_uint32(1129, self.IOPMLJEDCEN)?;
        }
        if self.KNLGDHEOICD != 0 {
            os.write_uint32(8, self.KNLGDHEOICD)?;
        }
        if self.is_psn_platform != false {
            os.write_bool(14, self.is_psn_platform)?;
        }
        if self.ugc_guid != 0 {
            os.write_uint64(5, self.ugc_guid)?;
        }
        if self.LNLDAMPFKJO != 0 {
            os.write_uint32(263, self.LNLDAMPFKJO)?;
        }
        if self.BBIEBFNKIAN != 0 {
            os.write_uint32(13, self.BBIEBFNKIAN)?;
        }
        if self.JBMPDKHGANB != 0 {
            os.write_uint32(388, self.JBMPDKHGANB)?;
        }
        for v in &self.HEGNHLBBGFL {
            os.write_uint32(1365, *v)?;
        };
        for v in &self.GCLLDEFJCPH {
            os.write_uint32(865, *v)?;
        };
        if self.music_id != 0 {
            os.write_uint32(11, self.music_id)?;
        }
        if self.MBJGIACIGJB != 0 {
            os.write_uint32(9, self.MBJGIACIGJB)?;
        }
        if self.BKEELEDBHGE != false {
            os.write_bool(12, self.BKEELEDBHGE)?;
        }
        if self.KKIHPNJHKEP != 0 {
            os.write_uint32(1352, self.KKIHPNJHKEP)?;
        }
        if self.import_from_ugc_guid != 0 {
            os.write_uint64(10, self.import_from_ugc_guid)?;
        }
        if self.DLEDJPPLMCE != 0 {
            os.write_uint32(1, self.DLEDJPPLMCE)?;
        }
        if self.KNDKOLIMFPJ != false {
            os.write_bool(4, self.KNDKOLIMFPJ)?;
        }
        if self.max_score != 0 {
            os.write_uint32(6, self.max_score)?;
        }
        if self.version != 0 {
            os.write_uint32(15, self.version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UgcMusicBriefInfo {
        UgcMusicBriefInfo::new()
    }

    fn clear(&mut self) {
        self.creator_nickname.clear();
        self.KNFNFNAEODI = 0;
        self.PCOJFEOMDBK = false;
        self.IOPMLJEDCEN = 0;
        self.KNLGDHEOICD = 0;
        self.is_psn_platform = false;
        self.ugc_guid = 0;
        self.LNLDAMPFKJO = 0;
        self.BBIEBFNKIAN = 0;
        self.JBMPDKHGANB = 0;
        self.HEGNHLBBGFL.clear();
        self.GCLLDEFJCPH.clear();
        self.music_id = 0;
        self.MBJGIACIGJB = 0;
        self.BKEELEDBHGE = false;
        self.KKIHPNJHKEP = 0;
        self.import_from_ugc_guid = 0;
        self.DLEDJPPLMCE = 0;
        self.KNDKOLIMFPJ = false;
        self.max_score = 0;
        self.version = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UgcMusicBriefInfo {
        static instance: UgcMusicBriefInfo = UgcMusicBriefInfo {
            creator_nickname: ::std::string::String::new(),
            KNFNFNAEODI: 0,
            PCOJFEOMDBK: false,
            IOPMLJEDCEN: 0,
            KNLGDHEOICD: 0,
            is_psn_platform: false,
            ugc_guid: 0,
            LNLDAMPFKJO: 0,
            BBIEBFNKIAN: 0,
            JBMPDKHGANB: 0,
            HEGNHLBBGFL: ::std::vec::Vec::new(),
            GCLLDEFJCPH: ::std::vec::Vec::new(),
            music_id: 0,
            MBJGIACIGJB: 0,
            BKEELEDBHGE: false,
            KKIHPNJHKEP: 0,
            import_from_ugc_guid: 0,
            DLEDJPPLMCE: 0,
            KNDKOLIMFPJ: false,
            max_score: 0,
            version: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UgcMusicBriefInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UgcMusicBriefInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UgcMusicBriefInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UgcMusicBriefInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17UgcMusicBriefInfo.proto\"\xe6\x05\n\x11UgcMusicBriefInfo\x12)\n\
    \x10creator_nickname\x18\x02\x20\x01(\tR\x0fcreatorNickname\x12\x20\n\
    \x0bKNFNFNAEODI\x18\x07\x20\x01(\rR\x0bKNFNFNAEODI\x12\x20\n\x0bPCOJFEOM\
    DBK\x18\x03\x20\x01(\x08R\x0bPCOJFEOMDBK\x12!\n\x0bIOPMLJEDCEN\x18\xe9\
    \x08\x20\x01(\rR\x0bIOPMLJEDCEN\x12\x20\n\x0bKNLGDHEOICD\x18\x08\x20\x01\
    (\rR\x0bKNLGDHEOICD\x12&\n\x0fis_psn_platform\x18\x0e\x20\x01(\x08R\risP\
    snPlatform\x12\x19\n\x08ugc_guid\x18\x05\x20\x01(\x04R\x07ugcGuid\x12!\n\
    \x0bLNLDAMPFKJO\x18\x87\x02\x20\x01(\rR\x0bLNLDAMPFKJO\x12\x20\n\x0bBBIE\
    BFNKIAN\x18\r\x20\x01(\rR\x0bBBIEBFNKIAN\x12!\n\x0bJBMPDKHGANB\x18\x84\
    \x03\x20\x01(\rR\x0bJBMPDKHGANB\x12!\n\x0bHEGNHLBBGFL\x18\xd5\n\x20\x03(\
    \rR\x0bHEGNHLBBGFL\x12!\n\x0bGCLLDEFJCPH\x18\xe1\x06\x20\x03(\rR\x0bGCLL\
    DEFJCPH\x12\x19\n\x08music_id\x18\x0b\x20\x01(\rR\x07musicId\x12\x20\n\
    \x0bMBJGIACIGJB\x18\t\x20\x01(\rR\x0bMBJGIACIGJB\x12\x20\n\x0bBKEELEDBHG\
    E\x18\x0c\x20\x01(\x08R\x0bBKEELEDBHGE\x12!\n\x0bKKIHPNJHKEP\x18\xc8\n\
    \x20\x01(\rR\x0bKKIHPNJHKEP\x12/\n\x14import_from_ugc_guid\x18\n\x20\x01\
    (\x04R\x11importFromUgcGuid\x12\x20\n\x0bDLEDJPPLMCE\x18\x01\x20\x01(\rR\
    \x0bDLEDJPPLMCE\x12\x20\n\x0bKNDKOLIMFPJ\x18\x04\x20\x01(\x08R\x0bKNDKOL\
    IMFPJ\x12\x1b\n\tmax_score\x18\x06\x20\x01(\rR\x08maxScore\x12\x18\n\x07\
    version\x18\x0f\x20\x01(\rR\x07versionB\x1b\n\x19emu.grasscutter.net.pro\
    tob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(UgcMusicBriefInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
