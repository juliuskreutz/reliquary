// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AkaFesDetailInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AkaFesDetailInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AkaFesDetailInfo {
    // message fields
    // @@protoc_insertion_point(field:AkaFesDetailInfo.IEKAJGGJEFD)
    pub IEKAJGGJEFD: ::protobuf::MessageField<super::IHLKALJJCFJ::IHLKALJJCFJ>,
    // @@protoc_insertion_point(field:AkaFesDetailInfo.KIJKCBOBFIM)
    pub KIJKCBOBFIM: ::protobuf::MessageField<super::BCIBGJPGJNH::BCIBGJPGJNH>,
    // @@protoc_insertion_point(field:AkaFesDetailInfo.EPBBHCIHJOB)
    pub EPBBHCIHJOB: ::protobuf::MessageField<super::ONGCBHPILNP::ONGCBHPILNP>,
    // @@protoc_insertion_point(field:AkaFesDetailInfo.potion_info)
    pub potion_info: ::protobuf::MessageField<super::MEJPJACBPIG::MEJPJACBPIG>,
    // @@protoc_insertion_point(field:AkaFesDetailInfo.NJALPDCPMOL)
    pub NJALPDCPMOL: ::protobuf::MessageField<super::FHLNPLFEFFO::FHLNPLFEFFO>,
    // @@protoc_insertion_point(field:AkaFesDetailInfo.JFHPDMPHDKG)
    pub JFHPDMPHDKG: ::protobuf::MessageField<super::GLCFFFILFGK::GLCFFFILFGK>,
    // special fields
    // @@protoc_insertion_point(special_field:AkaFesDetailInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AkaFesDetailInfo {
    fn default() -> &'a AkaFesDetailInfo {
        <AkaFesDetailInfo as ::protobuf::Message>::default_instance()
    }
}

impl AkaFesDetailInfo {
    pub fn new() -> AkaFesDetailInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::IHLKALJJCFJ::IHLKALJJCFJ>(
            "IEKAJGGJEFD",
            |m: &AkaFesDetailInfo| { &m.IEKAJGGJEFD },
            |m: &mut AkaFesDetailInfo| { &mut m.IEKAJGGJEFD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BCIBGJPGJNH::BCIBGJPGJNH>(
            "KIJKCBOBFIM",
            |m: &AkaFesDetailInfo| { &m.KIJKCBOBFIM },
            |m: &mut AkaFesDetailInfo| { &mut m.KIJKCBOBFIM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ONGCBHPILNP::ONGCBHPILNP>(
            "EPBBHCIHJOB",
            |m: &AkaFesDetailInfo| { &m.EPBBHCIHJOB },
            |m: &mut AkaFesDetailInfo| { &mut m.EPBBHCIHJOB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MEJPJACBPIG::MEJPJACBPIG>(
            "potion_info",
            |m: &AkaFesDetailInfo| { &m.potion_info },
            |m: &mut AkaFesDetailInfo| { &mut m.potion_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FHLNPLFEFFO::FHLNPLFEFFO>(
            "NJALPDCPMOL",
            |m: &AkaFesDetailInfo| { &m.NJALPDCPMOL },
            |m: &mut AkaFesDetailInfo| { &mut m.NJALPDCPMOL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GLCFFFILFGK::GLCFFFILFGK>(
            "JFHPDMPHDKG",
            |m: &AkaFesDetailInfo| { &m.JFHPDMPHDKG },
            |m: &mut AkaFesDetailInfo| { &mut m.JFHPDMPHDKG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AkaFesDetailInfo>(
            "AkaFesDetailInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AkaFesDetailInfo {
    const NAME: &'static str = "AkaFesDetailInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IEKAJGGJEFD)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.KIJKCBOBFIM)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EPBBHCIHJOB)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.potion_info)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NJALPDCPMOL)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JFHPDMPHDKG)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.IEKAJGGJEFD.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.KIJKCBOBFIM.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.EPBBHCIHJOB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.potion_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.NJALPDCPMOL.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.JFHPDMPHDKG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.IEKAJGGJEFD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.KIJKCBOBFIM.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.EPBBHCIHJOB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.potion_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.NJALPDCPMOL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.JFHPDMPHDKG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AkaFesDetailInfo {
        AkaFesDetailInfo::new()
    }

    fn clear(&mut self) {
        self.IEKAJGGJEFD.clear();
        self.KIJKCBOBFIM.clear();
        self.EPBBHCIHJOB.clear();
        self.potion_info.clear();
        self.NJALPDCPMOL.clear();
        self.JFHPDMPHDKG.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AkaFesDetailInfo {
        static instance: AkaFesDetailInfo = AkaFesDetailInfo {
            IEKAJGGJEFD: ::protobuf::MessageField::none(),
            KIJKCBOBFIM: ::protobuf::MessageField::none(),
            EPBBHCIHJOB: ::protobuf::MessageField::none(),
            potion_info: ::protobuf::MessageField::none(),
            NJALPDCPMOL: ::protobuf::MessageField::none(),
            JFHPDMPHDKG: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AkaFesDetailInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AkaFesDetailInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AkaFesDetailInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AkaFesDetailInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16AkaFesDetailInfo.proto\x1a\x11IHLKALJJCFJ.proto\x1a\x11BCIBGJPGJNH\
    .proto\x1a\x11ONGCBHPILNP.proto\x1a\x11MEJPJACBPIG.proto\x1a\x11FHLNPLFE\
    FFO.proto\x1a\x11GLCFFFILFGK.proto\"\xb1\x02\n\x10AkaFesDetailInfo\x12.\
    \n\x0bIEKAJGGJEFD\x18\x0c\x20\x01(\x0b2\x0c.IHLKALJJCFJR\x0bIEKAJGGJEFD\
    \x12.\n\x0bKIJKCBOBFIM\x18\n\x20\x01(\x0b2\x0c.BCIBGJPGJNHR\x0bKIJKCBOBF\
    IM\x12.\n\x0bEPBBHCIHJOB\x18\x0b\x20\x01(\x0b2\x0c.ONGCBHPILNPR\x0bEPBBH\
    CIHJOB\x12-\n\x0bpotion_info\x18\x01\x20\x01(\x0b2\x0c.MEJPJACBPIGR\npot\
    ionInfo\x12.\n\x0bNJALPDCPMOL\x18\x05\x20\x01(\x0b2\x0c.FHLNPLFEFFOR\x0b\
    NJALPDCPMOL\x12.\n\x0bJFHPDMPHDKG\x18\r\x20\x01(\x0b2\x0c.GLCFFFILFGKR\
    \x0bJFHPDMPHDKGB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::IHLKALJJCFJ::file_descriptor().clone());
            deps.push(super::BCIBGJPGJNH::file_descriptor().clone());
            deps.push(super::ONGCBHPILNP::file_descriptor().clone());
            deps.push(super::MEJPJACBPIG::file_descriptor().clone());
            deps.push(super::FHLNPLFEFFO::file_descriptor().clone());
            deps.push(super::GLCFFFILFGK::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AkaFesDetailInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
