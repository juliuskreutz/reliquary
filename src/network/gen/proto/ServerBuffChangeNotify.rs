// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ServerBuffChangeNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ServerBuffChangeNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerBuffChangeNotify {
    // message fields
    // @@protoc_insertion_point(field:ServerBuffChangeNotify.is_creature_buff)
    pub is_creature_buff: bool,
    // @@protoc_insertion_point(field:ServerBuffChangeNotify.entity_id_list)
    pub entity_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ServerBuffChangeNotify.avatar_guid_list)
    pub avatar_guid_list: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:ServerBuffChangeNotify.server_buff_list)
    pub server_buff_list: ::std::vec::Vec<super::ServerBuff::ServerBuff>,
    // @@protoc_insertion_point(field:ServerBuffChangeNotify.server_buff_change_type)
    pub server_buff_change_type: ::protobuf::EnumOrUnknown<server_buff_change_notify::ServerBuffChangeType>,
    // special fields
    // @@protoc_insertion_point(special_field:ServerBuffChangeNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServerBuffChangeNotify {
    fn default() -> &'a ServerBuffChangeNotify {
        <ServerBuffChangeNotify as ::protobuf::Message>::default_instance()
    }
}

impl ServerBuffChangeNotify {
    pub fn new() -> ServerBuffChangeNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_creature_buff",
            |m: &ServerBuffChangeNotify| { &m.is_creature_buff },
            |m: &mut ServerBuffChangeNotify| { &mut m.is_creature_buff },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entity_id_list",
            |m: &ServerBuffChangeNotify| { &m.entity_id_list },
            |m: &mut ServerBuffChangeNotify| { &mut m.entity_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_guid_list",
            |m: &ServerBuffChangeNotify| { &m.avatar_guid_list },
            |m: &mut ServerBuffChangeNotify| { &mut m.avatar_guid_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "server_buff_list",
            |m: &ServerBuffChangeNotify| { &m.server_buff_list },
            |m: &mut ServerBuffChangeNotify| { &mut m.server_buff_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "server_buff_change_type",
            |m: &ServerBuffChangeNotify| { &m.server_buff_change_type },
            |m: &mut ServerBuffChangeNotify| { &mut m.server_buff_change_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServerBuffChangeNotify>(
            "ServerBuffChangeNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ServerBuffChangeNotify {
    const NAME: &'static str = "ServerBuffChangeNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.is_creature_buff = is.read_bool()?;
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.entity_id_list)?;
                },
                32 => {
                    self.entity_id_list.push(is.read_uint32()?);
                },
                50 => {
                    is.read_repeated_packed_uint64_into(&mut self.avatar_guid_list)?;
                },
                48 => {
                    self.avatar_guid_list.push(is.read_uint64()?);
                },
                58 => {
                    self.server_buff_list.push(is.read_message()?);
                },
                80 => {
                    self.server_buff_change_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.is_creature_buff != false {
            my_size += 1 + 1;
        }
        for value in &self.entity_id_list {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        for value in &self.avatar_guid_list {
            my_size += ::protobuf::rt::uint64_size(6, *value);
        };
        for value in &self.server_buff_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.server_buff_change_type != ::protobuf::EnumOrUnknown::new(server_buff_change_notify::ServerBuffChangeType::SERVER_BUFF_CHANGE_TYPE_ADD_SERVER_BUFF) {
            my_size += ::protobuf::rt::int32_size(10, self.server_buff_change_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.is_creature_buff != false {
            os.write_bool(2, self.is_creature_buff)?;
        }
        for v in &self.entity_id_list {
            os.write_uint32(4, *v)?;
        };
        for v in &self.avatar_guid_list {
            os.write_uint64(6, *v)?;
        };
        for v in &self.server_buff_list {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.server_buff_change_type != ::protobuf::EnumOrUnknown::new(server_buff_change_notify::ServerBuffChangeType::SERVER_BUFF_CHANGE_TYPE_ADD_SERVER_BUFF) {
            os.write_enum(10, ::protobuf::EnumOrUnknown::value(&self.server_buff_change_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ServerBuffChangeNotify {
        ServerBuffChangeNotify::new()
    }

    fn clear(&mut self) {
        self.is_creature_buff = false;
        self.entity_id_list.clear();
        self.avatar_guid_list.clear();
        self.server_buff_list.clear();
        self.server_buff_change_type = ::protobuf::EnumOrUnknown::new(server_buff_change_notify::ServerBuffChangeType::SERVER_BUFF_CHANGE_TYPE_ADD_SERVER_BUFF);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServerBuffChangeNotify {
        static instance: ServerBuffChangeNotify = ServerBuffChangeNotify {
            is_creature_buff: false,
            entity_id_list: ::std::vec::Vec::new(),
            avatar_guid_list: ::std::vec::Vec::new(),
            server_buff_list: ::std::vec::Vec::new(),
            server_buff_change_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServerBuffChangeNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServerBuffChangeNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServerBuffChangeNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerBuffChangeNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ServerBuffChangeNotify`
pub mod server_buff_change_notify {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:ServerBuffChangeNotify.ServerBuffChangeType)
    pub enum ServerBuffChangeType {
        // @@protoc_insertion_point(enum_value:ServerBuffChangeNotify.ServerBuffChangeType.SERVER_BUFF_CHANGE_TYPE_ADD_SERVER_BUFF)
        SERVER_BUFF_CHANGE_TYPE_ADD_SERVER_BUFF = 0,
        // @@protoc_insertion_point(enum_value:ServerBuffChangeNotify.ServerBuffChangeType.SERVER_BUFF_CHANGE_TYPE_DEL_SERVER_BUFF)
        SERVER_BUFF_CHANGE_TYPE_DEL_SERVER_BUFF = 1,
    }

    impl ::protobuf::Enum for ServerBuffChangeType {
        const NAME: &'static str = "ServerBuffChangeType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ServerBuffChangeType> {
            match value {
                0 => ::std::option::Option::Some(ServerBuffChangeType::SERVER_BUFF_CHANGE_TYPE_ADD_SERVER_BUFF),
                1 => ::std::option::Option::Some(ServerBuffChangeType::SERVER_BUFF_CHANGE_TYPE_DEL_SERVER_BUFF),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ServerBuffChangeType> {
            match str {
                "SERVER_BUFF_CHANGE_TYPE_ADD_SERVER_BUFF" => ::std::option::Option::Some(ServerBuffChangeType::SERVER_BUFF_CHANGE_TYPE_ADD_SERVER_BUFF),
                "SERVER_BUFF_CHANGE_TYPE_DEL_SERVER_BUFF" => ::std::option::Option::Some(ServerBuffChangeType::SERVER_BUFF_CHANGE_TYPE_DEL_SERVER_BUFF),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ServerBuffChangeType] = &[
            ServerBuffChangeType::SERVER_BUFF_CHANGE_TYPE_ADD_SERVER_BUFF,
            ServerBuffChangeType::SERVER_BUFF_CHANGE_TYPE_DEL_SERVER_BUFF,
        ];
    }

    impl ::protobuf::EnumFull for ServerBuffChangeType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ServerBuffChangeNotify.ServerBuffChangeType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ServerBuffChangeType {
        fn default() -> Self {
            ServerBuffChangeType::SERVER_BUFF_CHANGE_TYPE_ADD_SERVER_BUFF
        }
    }

    impl ServerBuffChangeType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ServerBuffChangeType>("ServerBuffChangeNotify.ServerBuffChangeType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cServerBuffChangeNotify.proto\x1a\x10ServerBuff.proto\"\xa0\x03\n\
    \x16ServerBuffChangeNotify\x12(\n\x10is_creature_buff\x18\x02\x20\x01(\
    \x08R\x0eisCreatureBuff\x12$\n\x0eentity_id_list\x18\x04\x20\x03(\rR\x0c\
    entityIdList\x12(\n\x10avatar_guid_list\x18\x06\x20\x03(\x04R\x0eavatarG\
    uidList\x125\n\x10server_buff_list\x18\x07\x20\x03(\x0b2\x0b.ServerBuffR\
    \x0eserverBuffList\x12c\n\x17server_buff_change_type\x18\n\x20\x01(\x0e2\
    ,.ServerBuffChangeNotify.ServerBuffChangeTypeR\x14serverBuffChangeType\"\
    p\n\x14ServerBuffChangeType\x12+\n'SERVER_BUFF_CHANGE_TYPE_ADD_SERVER_BU\
    FF\x10\0\x12+\n'SERVER_BUFF_CHANGE_TYPE_DEL_SERVER_BUFF\x10\x01B\x1b\n\
    \x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ServerBuff::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ServerBuffChangeNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(server_buff_change_notify::ServerBuffChangeType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
