// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `OtherPlayerEnterHomeNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:OtherPlayerEnterHomeNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OtherPlayerEnterHomeNotify {
    // message fields
    // @@protoc_insertion_point(field:OtherPlayerEnterHomeNotify.reason)
    pub reason: ::protobuf::EnumOrUnknown<other_player_enter_home_notify::Reason>,
    // @@protoc_insertion_point(field:OtherPlayerEnterHomeNotify.nickname)
    pub nickname: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:OtherPlayerEnterHomeNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OtherPlayerEnterHomeNotify {
    fn default() -> &'a OtherPlayerEnterHomeNotify {
        <OtherPlayerEnterHomeNotify as ::protobuf::Message>::default_instance()
    }
}

impl OtherPlayerEnterHomeNotify {
    pub fn new() -> OtherPlayerEnterHomeNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reason",
            |m: &OtherPlayerEnterHomeNotify| { &m.reason },
            |m: &mut OtherPlayerEnterHomeNotify| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nickname",
            |m: &OtherPlayerEnterHomeNotify| { &m.nickname },
            |m: &mut OtherPlayerEnterHomeNotify| { &mut m.nickname },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OtherPlayerEnterHomeNotify>(
            "OtherPlayerEnterHomeNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OtherPlayerEnterHomeNotify {
    const NAME: &'static str = "OtherPlayerEnterHomeNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.reason = is.read_enum_or_unknown()?;
                },
                58 => {
                    self.nickname = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.reason != ::protobuf::EnumOrUnknown::new(other_player_enter_home_notify::Reason::INVALID) {
            my_size += ::protobuf::rt::int32_size(4, self.reason.value());
        }
        if !self.nickname.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.nickname);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.reason != ::protobuf::EnumOrUnknown::new(other_player_enter_home_notify::Reason::INVALID) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.reason))?;
        }
        if !self.nickname.is_empty() {
            os.write_string(7, &self.nickname)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OtherPlayerEnterHomeNotify {
        OtherPlayerEnterHomeNotify::new()
    }

    fn clear(&mut self) {
        self.reason = ::protobuf::EnumOrUnknown::new(other_player_enter_home_notify::Reason::INVALID);
        self.nickname.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OtherPlayerEnterHomeNotify {
        static instance: OtherPlayerEnterHomeNotify = OtherPlayerEnterHomeNotify {
            reason: ::protobuf::EnumOrUnknown::from_i32(0),
            nickname: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OtherPlayerEnterHomeNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OtherPlayerEnterHomeNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OtherPlayerEnterHomeNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OtherPlayerEnterHomeNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OtherPlayerEnterHomeNotify`
pub mod other_player_enter_home_notify {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:OtherPlayerEnterHomeNotify.Reason)
    pub enum Reason {
        // @@protoc_insertion_point(enum_value:OtherPlayerEnterHomeNotify.Reason.INVALID)
        INVALID = 0,
        // @@protoc_insertion_point(enum_value:OtherPlayerEnterHomeNotify.Reason.ENTER)
        ENTER = 1,
        // @@protoc_insertion_point(enum_value:OtherPlayerEnterHomeNotify.Reason.LEAVE)
        LEAVE = 2,
    }

    impl ::protobuf::Enum for Reason {
        const NAME: &'static str = "Reason";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Reason> {
            match value {
                0 => ::std::option::Option::Some(Reason::INVALID),
                1 => ::std::option::Option::Some(Reason::ENTER),
                2 => ::std::option::Option::Some(Reason::LEAVE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Reason> {
            match str {
                "INVALID" => ::std::option::Option::Some(Reason::INVALID),
                "ENTER" => ::std::option::Option::Some(Reason::ENTER),
                "LEAVE" => ::std::option::Option::Some(Reason::LEAVE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Reason] = &[
            Reason::INVALID,
            Reason::ENTER,
            Reason::LEAVE,
        ];
    }

    impl ::protobuf::EnumFull for Reason {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("OtherPlayerEnterHomeNotify.Reason").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Reason {
        fn default() -> Self {
            Reason::INVALID
        }
    }

    impl Reason {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Reason>("OtherPlayerEnterHomeNotify.Reason")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20OtherPlayerEnterHomeNotify.proto\"\xa1\x01\n\x1aOtherPlayerEnterHo\
    meNotify\x12:\n\x06reason\x18\x04\x20\x01(\x0e2\".OtherPlayerEnterHomeNo\
    tify.ReasonR\x06reason\x12\x1a\n\x08nickname\x18\x07\x20\x01(\tR\x08nick\
    name\"+\n\x06Reason\x12\x0b\n\x07INVALID\x10\0\x12\t\n\x05ENTER\x10\x01\
    \x12\t\n\x05LEAVE\x10\x02B\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OtherPlayerEnterHomeNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(other_player_enter_home_notify::Reason::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
