// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `TowerLevelEndNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:TowerLevelEndNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TowerLevelEndNotify {
    // message fields
    // @@protoc_insertion_point(field:TowerLevelEndNotify.finished_star_cond_list)
    pub finished_star_cond_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:TowerLevelEndNotify.reward_item_list)
    pub reward_item_list: ::std::vec::Vec<super::ItemParam::ItemParam>,
    // @@protoc_insertion_point(field:TowerLevelEndNotify.next_floor_id)
    pub next_floor_id: u32,
    // @@protoc_insertion_point(field:TowerLevelEndNotify.is_success)
    pub is_success: bool,
    // @@protoc_insertion_point(field:TowerLevelEndNotify.continue_state)
    pub continue_state: u32,
    // special fields
    // @@protoc_insertion_point(special_field:TowerLevelEndNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TowerLevelEndNotify {
    fn default() -> &'a TowerLevelEndNotify {
        <TowerLevelEndNotify as ::protobuf::Message>::default_instance()
    }
}

impl TowerLevelEndNotify {
    pub fn new() -> TowerLevelEndNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "finished_star_cond_list",
            |m: &TowerLevelEndNotify| { &m.finished_star_cond_list },
            |m: &mut TowerLevelEndNotify| { &mut m.finished_star_cond_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "reward_item_list",
            |m: &TowerLevelEndNotify| { &m.reward_item_list },
            |m: &mut TowerLevelEndNotify| { &mut m.reward_item_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next_floor_id",
            |m: &TowerLevelEndNotify| { &m.next_floor_id },
            |m: &mut TowerLevelEndNotify| { &mut m.next_floor_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_success",
            |m: &TowerLevelEndNotify| { &m.is_success },
            |m: &mut TowerLevelEndNotify| { &mut m.is_success },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "continue_state",
            |m: &TowerLevelEndNotify| { &m.continue_state },
            |m: &mut TowerLevelEndNotify| { &mut m.continue_state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TowerLevelEndNotify>(
            "TowerLevelEndNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TowerLevelEndNotify {
    const NAME: &'static str = "TowerLevelEndNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.finished_star_cond_list)?;
                },
                24 => {
                    self.finished_star_cond_list.push(is.read_uint32()?);
                },
                58 => {
                    self.reward_item_list.push(is.read_message()?);
                },
                72 => {
                    self.next_floor_id = is.read_uint32()?;
                },
                104 => {
                    self.is_success = is.read_bool()?;
                },
                120 => {
                    self.continue_state = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.finished_star_cond_list {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        for value in &self.reward_item_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.next_floor_id != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.next_floor_id);
        }
        if self.is_success != false {
            my_size += 1 + 1;
        }
        if self.continue_state != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.continue_state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.finished_star_cond_list {
            os.write_uint32(3, *v)?;
        };
        for v in &self.reward_item_list {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.next_floor_id != 0 {
            os.write_uint32(9, self.next_floor_id)?;
        }
        if self.is_success != false {
            os.write_bool(13, self.is_success)?;
        }
        if self.continue_state != 0 {
            os.write_uint32(15, self.continue_state)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TowerLevelEndNotify {
        TowerLevelEndNotify::new()
    }

    fn clear(&mut self) {
        self.finished_star_cond_list.clear();
        self.reward_item_list.clear();
        self.next_floor_id = 0;
        self.is_success = false;
        self.continue_state = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TowerLevelEndNotify {
        static instance: TowerLevelEndNotify = TowerLevelEndNotify {
            finished_star_cond_list: ::std::vec::Vec::new(),
            reward_item_list: ::std::vec::Vec::new(),
            next_floor_id: 0,
            is_success: false,
            continue_state: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TowerLevelEndNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TowerLevelEndNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TowerLevelEndNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TowerLevelEndNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `TowerLevelEndNotify`
pub mod tower_level_end_notify {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:TowerLevelEndNotify.ContinueStateType)
    pub enum ContinueStateType {
        // @@protoc_insertion_point(enum_value:TowerLevelEndNotify.ContinueStateType.CONTINUE_STATE_TYPE_CAN_NOT_CONTINUE)
        CONTINUE_STATE_TYPE_CAN_NOT_CONTINUE = 0,
        // @@protoc_insertion_point(enum_value:TowerLevelEndNotify.ContinueStateType.CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_LEVEL)
        CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_LEVEL = 1,
        // @@protoc_insertion_point(enum_value:TowerLevelEndNotify.ContinueStateType.CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_FLOOR)
        CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_FLOOR = 2,
    }

    impl ::protobuf::Enum for ContinueStateType {
        const NAME: &'static str = "ContinueStateType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ContinueStateType> {
            match value {
                0 => ::std::option::Option::Some(ContinueStateType::CONTINUE_STATE_TYPE_CAN_NOT_CONTINUE),
                1 => ::std::option::Option::Some(ContinueStateType::CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_LEVEL),
                2 => ::std::option::Option::Some(ContinueStateType::CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_FLOOR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ContinueStateType> {
            match str {
                "CONTINUE_STATE_TYPE_CAN_NOT_CONTINUE" => ::std::option::Option::Some(ContinueStateType::CONTINUE_STATE_TYPE_CAN_NOT_CONTINUE),
                "CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_LEVEL" => ::std::option::Option::Some(ContinueStateType::CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_LEVEL),
                "CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_FLOOR" => ::std::option::Option::Some(ContinueStateType::CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_FLOOR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ContinueStateType] = &[
            ContinueStateType::CONTINUE_STATE_TYPE_CAN_NOT_CONTINUE,
            ContinueStateType::CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_LEVEL,
            ContinueStateType::CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_FLOOR,
        ];
    }

    impl ::protobuf::EnumFull for ContinueStateType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("TowerLevelEndNotify.ContinueStateType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ContinueStateType {
        fn default() -> Self {
            ContinueStateType::CONTINUE_STATE_TYPE_CAN_NOT_CONTINUE
        }
    }

    impl ContinueStateType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ContinueStateType>("TowerLevelEndNotify.ContinueStateType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19TowerLevelEndNotify.proto\x1a\x0fItemParam.proto\"\x88\x03\n\x13To\
    werLevelEndNotify\x125\n\x17finished_star_cond_list\x18\x03\x20\x03(\rR\
    \x14finishedStarCondList\x124\n\x10reward_item_list\x18\x07\x20\x03(\x0b\
    2\n.ItemParamR\x0erewardItemList\x12\"\n\rnext_floor_id\x18\t\x20\x01(\r\
    R\x0bnextFloorId\x12\x1d\n\nis_success\x18\r\x20\x01(\x08R\tisSuccess\
    \x12%\n\x0econtinue_state\x18\x0f\x20\x01(\rR\rcontinueState\"\x99\x01\n\
    \x11ContinueStateType\x12(\n$CONTINUE_STATE_TYPE_CAN_NOT_CONTINUE\x10\0\
    \x12,\n(CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_LEVEL\x10\x01\x12,\n(CONTINUE\
    _STATE_TYPE_CAN_ENTER_NEXT_FLOOR\x10\x02B\x1b\n\x19emu.grasscutter.net.p\
    rotob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ItemParam::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(TowerLevelEndNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(tower_level_end_notify::ContinueStateType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
