// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `VintageMarketInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:VintageMarketInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VintageMarketInfo {
    // message fields
    // @@protoc_insertion_point(field:VintageMarketInfo.GLAMFOFAGHB)
    pub GLAMFOFAGHB: bool,
    // @@protoc_insertion_point(field:VintageMarketInfo.AAHAODOBJKM)
    pub AAHAODOBJKM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:VintageMarketInfo.IIMBAGFEFPG)
    pub IIMBAGFEFPG: bool,
    // @@protoc_insertion_point(field:VintageMarketInfo.MHBEIKFONOC)
    pub MHBEIKFONOC: u32,
    // @@protoc_insertion_point(field:VintageMarketInfo.PJDGIHDIPFP)
    pub PJDGIHDIPFP: bool,
    // @@protoc_insertion_point(field:VintageMarketInfo.bargain_info_map)
    pub bargain_info_map: ::std::collections::HashMap<u32, bool>,
    // @@protoc_insertion_point(field:VintageMarketInfo.NNPCKHPIBEC)
    pub NNPCKHPIBEC: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:VintageMarketInfo.open_store_list)
    pub open_store_list: ::std::vec::Vec<super::VintageMarketStoreInfo::VintageMarketStoreInfo>,
    // @@protoc_insertion_point(field:VintageMarketInfo.BPGHMOFCODI)
    pub BPGHMOFCODI: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:VintageMarketInfo.IEPLKANKPPD)
    pub IEPLKANKPPD: bool,
    // @@protoc_insertion_point(field:VintageMarketInfo.deal_info)
    pub deal_info: ::protobuf::MessageField<super::VintageMarketDealInfo::VintageMarketDealInfo>,
    // @@protoc_insertion_point(field:VintageMarketInfo.BJFKPOGKOMD)
    pub BJFKPOGKOMD: u32,
    // @@protoc_insertion_point(field:VintageMarketInfo.NBHJKLCJFKH)
    pub NBHJKLCJFKH: u32,
    // @@protoc_insertion_point(field:VintageMarketInfo.store_round)
    pub store_round: u32,
    // @@protoc_insertion_point(field:VintageMarketInfo.unlock_strategy_list)
    pub unlock_strategy_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:VintageMarketInfo.CEFFFAKMCDE)
    pub CEFFFAKMCDE: bool,
    // @@protoc_insertion_point(field:VintageMarketInfo.IBDPMPBMDOJ)
    pub IBDPMPBMDOJ: bool,
    // @@protoc_insertion_point(field:VintageMarketInfo.FELLANIIDOF)
    pub FELLANIIDOF: bool,
    // @@protoc_insertion_point(field:VintageMarketInfo.CFFLPFMIIIG)
    pub CFFLPFMIIIG: u32,
    // @@protoc_insertion_point(field:VintageMarketInfo.JNBINOIMACB)
    pub JNBINOIMACB: u32,
    // @@protoc_insertion_point(field:VintageMarketInfo.EGJLAHOIPJD)
    pub EGJLAHOIPJD: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:VintageMarketInfo.AANHIOBNPKF)
    pub AANHIOBNPKF: bool,
    // special fields
    // @@protoc_insertion_point(special_field:VintageMarketInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VintageMarketInfo {
    fn default() -> &'a VintageMarketInfo {
        <VintageMarketInfo as ::protobuf::Message>::default_instance()
    }
}

impl VintageMarketInfo {
    pub fn new() -> VintageMarketInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(22);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GLAMFOFAGHB",
            |m: &VintageMarketInfo| { &m.GLAMFOFAGHB },
            |m: &mut VintageMarketInfo| { &mut m.GLAMFOFAGHB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AAHAODOBJKM",
            |m: &VintageMarketInfo| { &m.AAHAODOBJKM },
            |m: &mut VintageMarketInfo| { &mut m.AAHAODOBJKM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IIMBAGFEFPG",
            |m: &VintageMarketInfo| { &m.IIMBAGFEFPG },
            |m: &mut VintageMarketInfo| { &mut m.IIMBAGFEFPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MHBEIKFONOC",
            |m: &VintageMarketInfo| { &m.MHBEIKFONOC },
            |m: &mut VintageMarketInfo| { &mut m.MHBEIKFONOC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PJDGIHDIPFP",
            |m: &VintageMarketInfo| { &m.PJDGIHDIPFP },
            |m: &mut VintageMarketInfo| { &mut m.PJDGIHDIPFP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "bargain_info_map",
            |m: &VintageMarketInfo| { &m.bargain_info_map },
            |m: &mut VintageMarketInfo| { &mut m.bargain_info_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NNPCKHPIBEC",
            |m: &VintageMarketInfo| { &m.NNPCKHPIBEC },
            |m: &mut VintageMarketInfo| { &mut m.NNPCKHPIBEC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "open_store_list",
            |m: &VintageMarketInfo| { &m.open_store_list },
            |m: &mut VintageMarketInfo| { &mut m.open_store_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BPGHMOFCODI",
            |m: &VintageMarketInfo| { &m.BPGHMOFCODI },
            |m: &mut VintageMarketInfo| { &mut m.BPGHMOFCODI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IEPLKANKPPD",
            |m: &VintageMarketInfo| { &m.IEPLKANKPPD },
            |m: &mut VintageMarketInfo| { &mut m.IEPLKANKPPD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::VintageMarketDealInfo::VintageMarketDealInfo>(
            "deal_info",
            |m: &VintageMarketInfo| { &m.deal_info },
            |m: &mut VintageMarketInfo| { &mut m.deal_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BJFKPOGKOMD",
            |m: &VintageMarketInfo| { &m.BJFKPOGKOMD },
            |m: &mut VintageMarketInfo| { &mut m.BJFKPOGKOMD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NBHJKLCJFKH",
            |m: &VintageMarketInfo| { &m.NBHJKLCJFKH },
            |m: &mut VintageMarketInfo| { &mut m.NBHJKLCJFKH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "store_round",
            |m: &VintageMarketInfo| { &m.store_round },
            |m: &mut VintageMarketInfo| { &mut m.store_round },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "unlock_strategy_list",
            |m: &VintageMarketInfo| { &m.unlock_strategy_list },
            |m: &mut VintageMarketInfo| { &mut m.unlock_strategy_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CEFFFAKMCDE",
            |m: &VintageMarketInfo| { &m.CEFFFAKMCDE },
            |m: &mut VintageMarketInfo| { &mut m.CEFFFAKMCDE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IBDPMPBMDOJ",
            |m: &VintageMarketInfo| { &m.IBDPMPBMDOJ },
            |m: &mut VintageMarketInfo| { &mut m.IBDPMPBMDOJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FELLANIIDOF",
            |m: &VintageMarketInfo| { &m.FELLANIIDOF },
            |m: &mut VintageMarketInfo| { &mut m.FELLANIIDOF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CFFLPFMIIIG",
            |m: &VintageMarketInfo| { &m.CFFLPFMIIIG },
            |m: &mut VintageMarketInfo| { &mut m.CFFLPFMIIIG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JNBINOIMACB",
            |m: &VintageMarketInfo| { &m.JNBINOIMACB },
            |m: &mut VintageMarketInfo| { &mut m.JNBINOIMACB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EGJLAHOIPJD",
            |m: &VintageMarketInfo| { &m.EGJLAHOIPJD },
            |m: &mut VintageMarketInfo| { &mut m.EGJLAHOIPJD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AANHIOBNPKF",
            |m: &VintageMarketInfo| { &m.AANHIOBNPKF },
            |m: &mut VintageMarketInfo| { &mut m.AANHIOBNPKF },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VintageMarketInfo>(
            "VintageMarketInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VintageMarketInfo {
    const NAME: &'static str = "VintageMarketInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                88 => {
                    self.GLAMFOFAGHB = is.read_bool()?;
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.AAHAODOBJKM)?;
                },
                24 => {
                    self.AAHAODOBJKM.push(is.read_uint32()?);
                },
                9832 => {
                    self.IIMBAGFEFPG = is.read_bool()?;
                },
                72 => {
                    self.MHBEIKFONOC = is.read_uint32()?;
                },
                40 => {
                    self.PJDGIHDIPFP = is.read_bool()?;
                },
                34 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_bool()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.bargain_info_map.insert(key, value);
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.NNPCKHPIBEC)?;
                },
                96 => {
                    self.NNPCKHPIBEC.push(is.read_uint32()?);
                },
                82 => {
                    self.open_store_list.push(is.read_message()?);
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.BPGHMOFCODI)?;
                },
                56 => {
                    self.BPGHMOFCODI.push(is.read_uint32()?);
                },
                10480 => {
                    self.IEPLKANKPPD = is.read_bool()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.deal_info)?;
                },
                13632 => {
                    self.BJFKPOGKOMD = is.read_uint32()?;
                },
                8904 => {
                    self.NBHJKLCJFKH = is.read_uint32()?;
                },
                8 => {
                    self.store_round = is.read_uint32()?;
                },
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.unlock_strategy_list)?;
                },
                104 => {
                    self.unlock_strategy_list.push(is.read_uint32()?);
                },
                112 => {
                    self.CEFFFAKMCDE = is.read_bool()?;
                },
                16 => {
                    self.IBDPMPBMDOJ = is.read_bool()?;
                },
                120 => {
                    self.FELLANIIDOF = is.read_bool()?;
                },
                64 => {
                    self.CFFLPFMIIIG = is.read_uint32()?;
                },
                1256 => {
                    self.JNBINOIMACB = is.read_uint32()?;
                },
                12002 => {
                    is.read_repeated_packed_uint32_into(&mut self.EGJLAHOIPJD)?;
                },
                12000 => {
                    self.EGJLAHOIPJD.push(is.read_uint32()?);
                },
                664 => {
                    self.AANHIOBNPKF = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.GLAMFOFAGHB != false {
            my_size += 1 + 1;
        }
        for value in &self.AAHAODOBJKM {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        if self.IIMBAGFEFPG != false {
            my_size += 2 + 1;
        }
        if self.MHBEIKFONOC != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.MHBEIKFONOC);
        }
        if self.PJDGIHDIPFP != false {
            my_size += 1 + 1;
        }
        for (k, v) in &self.bargain_info_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += 1 + 1;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.NNPCKHPIBEC {
            my_size += ::protobuf::rt::uint32_size(12, *value);
        };
        for value in &self.open_store_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.BPGHMOFCODI {
            my_size += ::protobuf::rt::uint32_size(7, *value);
        };
        if self.IEPLKANKPPD != false {
            my_size += 2 + 1;
        }
        if let Some(v) = self.deal_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.BJFKPOGKOMD != 0 {
            my_size += ::protobuf::rt::uint32_size(1704, self.BJFKPOGKOMD);
        }
        if self.NBHJKLCJFKH != 0 {
            my_size += ::protobuf::rt::uint32_size(1113, self.NBHJKLCJFKH);
        }
        if self.store_round != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.store_round);
        }
        for value in &self.unlock_strategy_list {
            my_size += ::protobuf::rt::uint32_size(13, *value);
        };
        if self.CEFFFAKMCDE != false {
            my_size += 1 + 1;
        }
        if self.IBDPMPBMDOJ != false {
            my_size += 1 + 1;
        }
        if self.FELLANIIDOF != false {
            my_size += 1 + 1;
        }
        if self.CFFLPFMIIIG != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.CFFLPFMIIIG);
        }
        if self.JNBINOIMACB != 0 {
            my_size += ::protobuf::rt::uint32_size(157, self.JNBINOIMACB);
        }
        for value in &self.EGJLAHOIPJD {
            my_size += ::protobuf::rt::uint32_size(1500, *value);
        };
        if self.AANHIOBNPKF != false {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.GLAMFOFAGHB != false {
            os.write_bool(11, self.GLAMFOFAGHB)?;
        }
        for v in &self.AAHAODOBJKM {
            os.write_uint32(3, *v)?;
        };
        if self.IIMBAGFEFPG != false {
            os.write_bool(1229, self.IIMBAGFEFPG)?;
        }
        if self.MHBEIKFONOC != 0 {
            os.write_uint32(9, self.MHBEIKFONOC)?;
        }
        if self.PJDGIHDIPFP != false {
            os.write_bool(5, self.PJDGIHDIPFP)?;
        }
        for (k, v) in &self.bargain_info_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += 1 + 1;
            os.write_raw_varint32(34)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_bool(2, *v)?;
        };
        for v in &self.NNPCKHPIBEC {
            os.write_uint32(12, *v)?;
        };
        for v in &self.open_store_list {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        for v in &self.BPGHMOFCODI {
            os.write_uint32(7, *v)?;
        };
        if self.IEPLKANKPPD != false {
            os.write_bool(1310, self.IEPLKANKPPD)?;
        }
        if let Some(v) = self.deal_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.BJFKPOGKOMD != 0 {
            os.write_uint32(1704, self.BJFKPOGKOMD)?;
        }
        if self.NBHJKLCJFKH != 0 {
            os.write_uint32(1113, self.NBHJKLCJFKH)?;
        }
        if self.store_round != 0 {
            os.write_uint32(1, self.store_round)?;
        }
        for v in &self.unlock_strategy_list {
            os.write_uint32(13, *v)?;
        };
        if self.CEFFFAKMCDE != false {
            os.write_bool(14, self.CEFFFAKMCDE)?;
        }
        if self.IBDPMPBMDOJ != false {
            os.write_bool(2, self.IBDPMPBMDOJ)?;
        }
        if self.FELLANIIDOF != false {
            os.write_bool(15, self.FELLANIIDOF)?;
        }
        if self.CFFLPFMIIIG != 0 {
            os.write_uint32(8, self.CFFLPFMIIIG)?;
        }
        if self.JNBINOIMACB != 0 {
            os.write_uint32(157, self.JNBINOIMACB)?;
        }
        for v in &self.EGJLAHOIPJD {
            os.write_uint32(1500, *v)?;
        };
        if self.AANHIOBNPKF != false {
            os.write_bool(83, self.AANHIOBNPKF)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VintageMarketInfo {
        VintageMarketInfo::new()
    }

    fn clear(&mut self) {
        self.GLAMFOFAGHB = false;
        self.AAHAODOBJKM.clear();
        self.IIMBAGFEFPG = false;
        self.MHBEIKFONOC = 0;
        self.PJDGIHDIPFP = false;
        self.bargain_info_map.clear();
        self.NNPCKHPIBEC.clear();
        self.open_store_list.clear();
        self.BPGHMOFCODI.clear();
        self.IEPLKANKPPD = false;
        self.deal_info.clear();
        self.BJFKPOGKOMD = 0;
        self.NBHJKLCJFKH = 0;
        self.store_round = 0;
        self.unlock_strategy_list.clear();
        self.CEFFFAKMCDE = false;
        self.IBDPMPBMDOJ = false;
        self.FELLANIIDOF = false;
        self.CFFLPFMIIIG = 0;
        self.JNBINOIMACB = 0;
        self.EGJLAHOIPJD.clear();
        self.AANHIOBNPKF = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VintageMarketInfo {
        static instance: ::protobuf::rt::Lazy<VintageMarketInfo> = ::protobuf::rt::Lazy::new();
        instance.get(VintageMarketInfo::new)
    }
}

impl ::protobuf::MessageFull for VintageMarketInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VintageMarketInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VintageMarketInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VintageMarketInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17VintageMarketInfo.proto\x1a\x1cVintageMarketStoreInfo.proto\x1a\
    \x1bVintageMarketDealInfo.proto\"\xb9\x07\n\x11VintageMarketInfo\x12\x20\
    \n\x0bGLAMFOFAGHB\x18\x0b\x20\x01(\x08R\x0bGLAMFOFAGHB\x12\x20\n\x0bAAHA\
    ODOBJKM\x18\x03\x20\x03(\rR\x0bAAHAODOBJKM\x12!\n\x0bIIMBAGFEFPG\x18\xcd\
    \t\x20\x01(\x08R\x0bIIMBAGFEFPG\x12\x20\n\x0bMHBEIKFONOC\x18\t\x20\x01(\
    \rR\x0bMHBEIKFONOC\x12\x20\n\x0bPJDGIHDIPFP\x18\x05\x20\x01(\x08R\x0bPJD\
    GIHDIPFP\x12P\n\x10bargain_info_map\x18\x04\x20\x03(\x0b2&.VintageMarket\
    Info.BargainInfoMapEntryR\x0ebargainInfoMap\x12\x20\n\x0bNNPCKHPIBEC\x18\
    \x0c\x20\x03(\rR\x0bNNPCKHPIBEC\x12?\n\x0fopen_store_list\x18\n\x20\x03(\
    \x0b2\x17.VintageMarketStoreInfoR\ropenStoreList\x12\x20\n\x0bBPGHMOFCOD\
    I\x18\x07\x20\x03(\rR\x0bBPGHMOFCODI\x12!\n\x0bIEPLKANKPPD\x18\x9e\n\x20\
    \x01(\x08R\x0bIEPLKANKPPD\x123\n\tdeal_info\x18\x06\x20\x01(\x0b2\x16.Vi\
    ntageMarketDealInfoR\x08dealInfo\x12!\n\x0bBJFKPOGKOMD\x18\xa8\r\x20\x01\
    (\rR\x0bBJFKPOGKOMD\x12!\n\x0bNBHJKLCJFKH\x18\xd9\x08\x20\x01(\rR\x0bNBH\
    JKLCJFKH\x12\x1f\n\x0bstore_round\x18\x01\x20\x01(\rR\nstoreRound\x120\n\
    \x14unlock_strategy_list\x18\r\x20\x03(\rR\x12unlockStrategyList\x12\x20\
    \n\x0bCEFFFAKMCDE\x18\x0e\x20\x01(\x08R\x0bCEFFFAKMCDE\x12\x20\n\x0bIBDP\
    MPBMDOJ\x18\x02\x20\x01(\x08R\x0bIBDPMPBMDOJ\x12\x20\n\x0bFELLANIIDOF\
    \x18\x0f\x20\x01(\x08R\x0bFELLANIIDOF\x12\x20\n\x0bCFFLPFMIIIG\x18\x08\
    \x20\x01(\rR\x0bCFFLPFMIIIG\x12!\n\x0bJNBINOIMACB\x18\x9d\x01\x20\x01(\r\
    R\x0bJNBINOIMACB\x12!\n\x0bEGJLAHOIPJD\x18\xdc\x0b\x20\x03(\rR\x0bEGJLAH\
    OIPJD\x12\x20\n\x0bAANHIOBNPKF\x18S\x20\x01(\x08R\x0bAANHIOBNPKF\x1aA\n\
    \x13BargainInfoMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\x08R\x05value:\x028\x01B\x1b\n\x19emu.g\
    rasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::VintageMarketStoreInfo::file_descriptor().clone());
            deps.push(super::VintageMarketDealInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(VintageMarketInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
