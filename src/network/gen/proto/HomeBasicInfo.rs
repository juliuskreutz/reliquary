// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HomeBasicInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:HomeBasicInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HomeBasicInfo {
    // message fields
    // @@protoc_insertion_point(field:HomeBasicInfo.cur_room_scene_id)
    pub cur_room_scene_id: u32,
    // @@protoc_insertion_point(field:HomeBasicInfo.level)
    pub level: u32,
    // @@protoc_insertion_point(field:HomeBasicInfo.limited_shop_info)
    pub limited_shop_info: ::protobuf::MessageField<super::HomeLimitedShopInfo::HomeLimitedShopInfo>,
    // @@protoc_insertion_point(field:HomeBasicInfo.cur_module_id)
    pub cur_module_id: u32,
    // @@protoc_insertion_point(field:HomeBasicInfo.is_in_edit_mode)
    pub is_in_edit_mode: bool,
    // @@protoc_insertion_point(field:HomeBasicInfo.exp)
    pub exp: u64,
    // @@protoc_insertion_point(field:HomeBasicInfo.KFBPCHPPMEM)
    pub KFBPCHPPMEM: u32,
    // @@protoc_insertion_point(field:HomeBasicInfo.home_owner_uid)
    pub home_owner_uid: u32,
    // @@protoc_insertion_point(field:HomeBasicInfo.owner_nick_name)
    pub owner_nick_name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:HomeBasicInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HomeBasicInfo {
    fn default() -> &'a HomeBasicInfo {
        <HomeBasicInfo as ::protobuf::Message>::default_instance()
    }
}

impl HomeBasicInfo {
    pub fn new() -> HomeBasicInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_room_scene_id",
            |m: &HomeBasicInfo| { &m.cur_room_scene_id },
            |m: &mut HomeBasicInfo| { &mut m.cur_room_scene_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &HomeBasicInfo| { &m.level },
            |m: &mut HomeBasicInfo| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HomeLimitedShopInfo::HomeLimitedShopInfo>(
            "limited_shop_info",
            |m: &HomeBasicInfo| { &m.limited_shop_info },
            |m: &mut HomeBasicInfo| { &mut m.limited_shop_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_module_id",
            |m: &HomeBasicInfo| { &m.cur_module_id },
            |m: &mut HomeBasicInfo| { &mut m.cur_module_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_in_edit_mode",
            |m: &HomeBasicInfo| { &m.is_in_edit_mode },
            |m: &mut HomeBasicInfo| { &mut m.is_in_edit_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exp",
            |m: &HomeBasicInfo| { &m.exp },
            |m: &mut HomeBasicInfo| { &mut m.exp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KFBPCHPPMEM",
            |m: &HomeBasicInfo| { &m.KFBPCHPPMEM },
            |m: &mut HomeBasicInfo| { &mut m.KFBPCHPPMEM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "home_owner_uid",
            |m: &HomeBasicInfo| { &m.home_owner_uid },
            |m: &mut HomeBasicInfo| { &mut m.home_owner_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_nick_name",
            |m: &HomeBasicInfo| { &m.owner_nick_name },
            |m: &mut HomeBasicInfo| { &mut m.owner_nick_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HomeBasicInfo>(
            "HomeBasicInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HomeBasicInfo {
    const NAME: &'static str = "HomeBasicInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.cur_room_scene_id = is.read_uint32()?;
                },
                24 => {
                    self.level = is.read_uint32()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.limited_shop_info)?;
                },
                40 => {
                    self.cur_module_id = is.read_uint32()?;
                },
                72 => {
                    self.is_in_edit_mode = is.read_bool()?;
                },
                80 => {
                    self.exp = is.read_uint64()?;
                },
                88 => {
                    self.KFBPCHPPMEM = is.read_uint32()?;
                },
                96 => {
                    self.home_owner_uid = is.read_uint32()?;
                },
                106 => {
                    self.owner_nick_name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.cur_room_scene_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.cur_room_scene_id);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.level);
        }
        if let Some(v) = self.limited_shop_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.cur_module_id != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.cur_module_id);
        }
        if self.is_in_edit_mode != false {
            my_size += 1 + 1;
        }
        if self.exp != 0 {
            my_size += ::protobuf::rt::uint64_size(10, self.exp);
        }
        if self.KFBPCHPPMEM != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.KFBPCHPPMEM);
        }
        if self.home_owner_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.home_owner_uid);
        }
        if !self.owner_nick_name.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.owner_nick_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.cur_room_scene_id != 0 {
            os.write_uint32(2, self.cur_room_scene_id)?;
        }
        if self.level != 0 {
            os.write_uint32(3, self.level)?;
        }
        if let Some(v) = self.limited_shop_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.cur_module_id != 0 {
            os.write_uint32(5, self.cur_module_id)?;
        }
        if self.is_in_edit_mode != false {
            os.write_bool(9, self.is_in_edit_mode)?;
        }
        if self.exp != 0 {
            os.write_uint64(10, self.exp)?;
        }
        if self.KFBPCHPPMEM != 0 {
            os.write_uint32(11, self.KFBPCHPPMEM)?;
        }
        if self.home_owner_uid != 0 {
            os.write_uint32(12, self.home_owner_uid)?;
        }
        if !self.owner_nick_name.is_empty() {
            os.write_string(13, &self.owner_nick_name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HomeBasicInfo {
        HomeBasicInfo::new()
    }

    fn clear(&mut self) {
        self.cur_room_scene_id = 0;
        self.level = 0;
        self.limited_shop_info.clear();
        self.cur_module_id = 0;
        self.is_in_edit_mode = false;
        self.exp = 0;
        self.KFBPCHPPMEM = 0;
        self.home_owner_uid = 0;
        self.owner_nick_name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HomeBasicInfo {
        static instance: HomeBasicInfo = HomeBasicInfo {
            cur_room_scene_id: 0,
            level: 0,
            limited_shop_info: ::protobuf::MessageField::none(),
            cur_module_id: 0,
            is_in_edit_mode: false,
            exp: 0,
            KFBPCHPPMEM: 0,
            home_owner_uid: 0,
            owner_nick_name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HomeBasicInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HomeBasicInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HomeBasicInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HomeBasicInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13HomeBasicInfo.proto\x1a\x19HomeLimitedShopInfo.proto\"\xdf\x02\n\r\
    HomeBasicInfo\x12)\n\x11cur_room_scene_id\x18\x02\x20\x01(\rR\x0ecurRoom\
    SceneId\x12\x14\n\x05level\x18\x03\x20\x01(\rR\x05level\x12@\n\x11limite\
    d_shop_info\x18\x04\x20\x01(\x0b2\x14.HomeLimitedShopInfoR\x0flimitedSho\
    pInfo\x12\"\n\rcur_module_id\x18\x05\x20\x01(\rR\x0bcurModuleId\x12%\n\
    \x0fis_in_edit_mode\x18\t\x20\x01(\x08R\x0cisInEditMode\x12\x10\n\x03exp\
    \x18\n\x20\x01(\x04R\x03exp\x12\x20\n\x0bKFBPCHPPMEM\x18\x0b\x20\x01(\rR\
    \x0bKFBPCHPPMEM\x12$\n\x0ehome_owner_uid\x18\x0c\x20\x01(\rR\x0chomeOwne\
    rUid\x12&\n\x0fowner_nick_name\x18\r\x20\x01(\tR\rownerNickNameB\x1b\n\
    \x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::HomeLimitedShopInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HomeBasicInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
