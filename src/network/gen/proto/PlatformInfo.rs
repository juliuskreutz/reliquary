// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlatformInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:PlatformInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlatformInfo {
    // message fields
    // @@protoc_insertion_point(field:PlatformInfo.route_id)
    pub route_id: u32,
    // @@protoc_insertion_point(field:PlatformInfo.start_index)
    pub start_index: i32,
    // @@protoc_insertion_point(field:PlatformInfo.start_route_time)
    pub start_route_time: u32,
    // @@protoc_insertion_point(field:PlatformInfo.start_scene_time)
    pub start_scene_time: u32,
    // @@protoc_insertion_point(field:PlatformInfo.start_pos)
    pub start_pos: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:PlatformInfo.is_started)
    pub is_started: bool,
    // @@protoc_insertion_point(field:PlatformInfo.start_rot)
    pub start_rot: ::protobuf::MessageField<super::MathQuaternion::MathQuaternion>,
    // @@protoc_insertion_point(field:PlatformInfo.stop_scene_time)
    pub stop_scene_time: u32,
    // @@protoc_insertion_point(field:PlatformInfo.pos_offset)
    pub pos_offset: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:PlatformInfo.rot_offset)
    pub rot_offset: ::protobuf::MessageField<super::MathQuaternion::MathQuaternion>,
    // @@protoc_insertion_point(field:PlatformInfo.moving_platform_type)
    pub moving_platform_type: ::protobuf::EnumOrUnknown<super::MovingPlatformType::MovingPlatformType>,
    // @@protoc_insertion_point(field:PlatformInfo.is_active)
    pub is_active: bool,
    // @@protoc_insertion_point(field:PlatformInfo.route)
    pub route: ::protobuf::MessageField<super::Route::Route>,
    // @@protoc_insertion_point(field:PlatformInfo.point_id)
    pub point_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:PlatformInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlatformInfo {
    fn default() -> &'a PlatformInfo {
        <PlatformInfo as ::protobuf::Message>::default_instance()
    }
}

impl PlatformInfo {
    pub fn new() -> PlatformInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "route_id",
            |m: &PlatformInfo| { &m.route_id },
            |m: &mut PlatformInfo| { &mut m.route_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_index",
            |m: &PlatformInfo| { &m.start_index },
            |m: &mut PlatformInfo| { &mut m.start_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_route_time",
            |m: &PlatformInfo| { &m.start_route_time },
            |m: &mut PlatformInfo| { &mut m.start_route_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_scene_time",
            |m: &PlatformInfo| { &m.start_scene_time },
            |m: &mut PlatformInfo| { &mut m.start_scene_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "start_pos",
            |m: &PlatformInfo| { &m.start_pos },
            |m: &mut PlatformInfo| { &mut m.start_pos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_started",
            |m: &PlatformInfo| { &m.is_started },
            |m: &mut PlatformInfo| { &mut m.is_started },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MathQuaternion::MathQuaternion>(
            "start_rot",
            |m: &PlatformInfo| { &m.start_rot },
            |m: &mut PlatformInfo| { &mut m.start_rot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stop_scene_time",
            |m: &PlatformInfo| { &m.stop_scene_time },
            |m: &mut PlatformInfo| { &mut m.stop_scene_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "pos_offset",
            |m: &PlatformInfo| { &m.pos_offset },
            |m: &mut PlatformInfo| { &mut m.pos_offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MathQuaternion::MathQuaternion>(
            "rot_offset",
            |m: &PlatformInfo| { &m.rot_offset },
            |m: &mut PlatformInfo| { &mut m.rot_offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "moving_platform_type",
            |m: &PlatformInfo| { &m.moving_platform_type },
            |m: &mut PlatformInfo| { &mut m.moving_platform_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_active",
            |m: &PlatformInfo| { &m.is_active },
            |m: &mut PlatformInfo| { &mut m.is_active },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Route::Route>(
            "route",
            |m: &PlatformInfo| { &m.route },
            |m: &mut PlatformInfo| { &mut m.route },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "point_id",
            |m: &PlatformInfo| { &m.point_id },
            |m: &mut PlatformInfo| { &mut m.point_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlatformInfo>(
            "PlatformInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlatformInfo {
    const NAME: &'static str = "PlatformInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.route_id = is.read_uint32()?;
                },
                16 => {
                    self.start_index = is.read_int32()?;
                },
                24 => {
                    self.start_route_time = is.read_uint32()?;
                },
                32 => {
                    self.start_scene_time = is.read_uint32()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.start_pos)?;
                },
                64 => {
                    self.is_started = is.read_bool()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.start_rot)?;
                },
                80 => {
                    self.stop_scene_time = is.read_uint32()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pos_offset)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rot_offset)?;
                },
                104 => {
                    self.moving_platform_type = is.read_enum_or_unknown()?;
                },
                112 => {
                    self.is_active = is.read_bool()?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.route)?;
                },
                128 => {
                    self.point_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.route_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.route_id);
        }
        if self.start_index != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.start_index);
        }
        if self.start_route_time != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.start_route_time);
        }
        if self.start_scene_time != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.start_scene_time);
        }
        if let Some(v) = self.start_pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.is_started != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.start_rot.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.stop_scene_time != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.stop_scene_time);
        }
        if let Some(v) = self.pos_offset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.rot_offset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.moving_platform_type != ::protobuf::EnumOrUnknown::new(super::MovingPlatformType::MovingPlatformType::MOVING_PLATFORM_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(13, self.moving_platform_type.value());
        }
        if self.is_active != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.route.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.point_id != 0 {
            my_size += ::protobuf::rt::uint32_size(16, self.point_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.route_id != 0 {
            os.write_uint32(1, self.route_id)?;
        }
        if self.start_index != 0 {
            os.write_int32(2, self.start_index)?;
        }
        if self.start_route_time != 0 {
            os.write_uint32(3, self.start_route_time)?;
        }
        if self.start_scene_time != 0 {
            os.write_uint32(4, self.start_scene_time)?;
        }
        if let Some(v) = self.start_pos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if self.is_started != false {
            os.write_bool(8, self.is_started)?;
        }
        if let Some(v) = self.start_rot.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if self.stop_scene_time != 0 {
            os.write_uint32(10, self.stop_scene_time)?;
        }
        if let Some(v) = self.pos_offset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.rot_offset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if self.moving_platform_type != ::protobuf::EnumOrUnknown::new(super::MovingPlatformType::MovingPlatformType::MOVING_PLATFORM_TYPE_NONE) {
            os.write_enum(13, ::protobuf::EnumOrUnknown::value(&self.moving_platform_type))?;
        }
        if self.is_active != false {
            os.write_bool(14, self.is_active)?;
        }
        if let Some(v) = self.route.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if self.point_id != 0 {
            os.write_uint32(16, self.point_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlatformInfo {
        PlatformInfo::new()
    }

    fn clear(&mut self) {
        self.route_id = 0;
        self.start_index = 0;
        self.start_route_time = 0;
        self.start_scene_time = 0;
        self.start_pos.clear();
        self.is_started = false;
        self.start_rot.clear();
        self.stop_scene_time = 0;
        self.pos_offset.clear();
        self.rot_offset.clear();
        self.moving_platform_type = ::protobuf::EnumOrUnknown::new(super::MovingPlatformType::MovingPlatformType::MOVING_PLATFORM_TYPE_NONE);
        self.is_active = false;
        self.route.clear();
        self.point_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlatformInfo {
        static instance: PlatformInfo = PlatformInfo {
            route_id: 0,
            start_index: 0,
            start_route_time: 0,
            start_scene_time: 0,
            start_pos: ::protobuf::MessageField::none(),
            is_started: false,
            start_rot: ::protobuf::MessageField::none(),
            stop_scene_time: 0,
            pos_offset: ::protobuf::MessageField::none(),
            rot_offset: ::protobuf::MessageField::none(),
            moving_platform_type: ::protobuf::EnumOrUnknown::from_i32(0),
            is_active: false,
            route: ::protobuf::MessageField::none(),
            point_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlatformInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlatformInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlatformInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlatformInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12PlatformInfo.proto\x1a\x0cVector.proto\x1a\x14MathQuaternion.proto\
    \x1a\x18MovingPlatformType.proto\x1a\x0bRoute.proto\"\xae\x04\n\x0cPlatf\
    ormInfo\x12\x19\n\x08route_id\x18\x01\x20\x01(\rR\x07routeId\x12\x1f\n\
    \x0bstart_index\x18\x02\x20\x01(\x05R\nstartIndex\x12(\n\x10start_route_\
    time\x18\x03\x20\x01(\rR\x0estartRouteTime\x12(\n\x10start_scene_time\
    \x18\x04\x20\x01(\rR\x0estartSceneTime\x12$\n\tstart_pos\x18\x07\x20\x01\
    (\x0b2\x07.VectorR\x08startPos\x12\x1d\n\nis_started\x18\x08\x20\x01(\
    \x08R\tisStarted\x12,\n\tstart_rot\x18\t\x20\x01(\x0b2\x0f.MathQuaternio\
    nR\x08startRot\x12&\n\x0fstop_scene_time\x18\n\x20\x01(\rR\rstopSceneTim\
    e\x12&\n\npos_offset\x18\x0b\x20\x01(\x0b2\x07.VectorR\tposOffset\x12.\n\
    \nrot_offset\x18\x0c\x20\x01(\x0b2\x0f.MathQuaternionR\trotOffset\x12E\n\
    \x14moving_platform_type\x18\r\x20\x01(\x0e2\x13.MovingPlatformTypeR\x12\
    movingPlatformType\x12\x1b\n\tis_active\x18\x0e\x20\x01(\x08R\x08isActiv\
    e\x12\x1c\n\x05route\x18\x0f\x20\x01(\x0b2\x06.RouteR\x05route\x12\x19\n\
    \x08point_id\x18\x10\x20\x01(\rR\x07pointIdB\x1b\n\x19emu.grasscutter.ne\
    t.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::Vector::file_descriptor().clone());
            deps.push(super::MathQuaternion::file_descriptor().clone());
            deps.push(super::MovingPlatformType::file_descriptor().clone());
            deps.push(super::Route::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PlatformInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
