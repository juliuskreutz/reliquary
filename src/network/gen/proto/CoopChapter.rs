// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CoopChapter.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CoopChapter)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CoopChapter {
    // message fields
    // @@protoc_insertion_point(field:CoopChapter.state)
    pub state: ::protobuf::EnumOrUnknown<coop_chapter::State>,
    // @@protoc_insertion_point(field:CoopChapter.LAAOIEBFJKP)
    pub LAAOIEBFJKP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CoopChapter.seen_ending_map)
    pub seen_ending_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:CoopChapter.coop_point_list)
    pub coop_point_list: ::std::vec::Vec<super::CoopPoint::CoopPoint>,
    // @@protoc_insertion_point(field:CoopChapter.coop_reward_list)
    pub coop_reward_list: ::std::vec::Vec<super::CoopReward::CoopReward>,
    // @@protoc_insertion_point(field:CoopChapter.coop_cg_list)
    pub coop_cg_list: ::std::vec::Vec<super::CoopCg::CoopCg>,
    // @@protoc_insertion_point(field:CoopChapter.id)
    pub id: u32,
    // @@protoc_insertion_point(field:CoopChapter.JDENGALMPJN)
    pub JDENGALMPJN: u32,
    // @@protoc_insertion_point(field:CoopChapter.EOMGDNCEACF)
    pub EOMGDNCEACF: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CoopChapter.HKOAKJNBIIO)
    pub HKOAKJNBIIO: u32,
    // special fields
    // @@protoc_insertion_point(special_field:CoopChapter.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CoopChapter {
    fn default() -> &'a CoopChapter {
        <CoopChapter as ::protobuf::Message>::default_instance()
    }
}

impl CoopChapter {
    pub fn new() -> CoopChapter {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &CoopChapter| { &m.state },
            |m: &mut CoopChapter| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LAAOIEBFJKP",
            |m: &CoopChapter| { &m.LAAOIEBFJKP },
            |m: &mut CoopChapter| { &mut m.LAAOIEBFJKP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "seen_ending_map",
            |m: &CoopChapter| { &m.seen_ending_map },
            |m: &mut CoopChapter| { &mut m.seen_ending_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "coop_point_list",
            |m: &CoopChapter| { &m.coop_point_list },
            |m: &mut CoopChapter| { &mut m.coop_point_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "coop_reward_list",
            |m: &CoopChapter| { &m.coop_reward_list },
            |m: &mut CoopChapter| { &mut m.coop_reward_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "coop_cg_list",
            |m: &CoopChapter| { &m.coop_cg_list },
            |m: &mut CoopChapter| { &mut m.coop_cg_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &CoopChapter| { &m.id },
            |m: &mut CoopChapter| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JDENGALMPJN",
            |m: &CoopChapter| { &m.JDENGALMPJN },
            |m: &mut CoopChapter| { &mut m.JDENGALMPJN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EOMGDNCEACF",
            |m: &CoopChapter| { &m.EOMGDNCEACF },
            |m: &mut CoopChapter| { &mut m.EOMGDNCEACF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HKOAKJNBIIO",
            |m: &CoopChapter| { &m.HKOAKJNBIIO },
            |m: &mut CoopChapter| { &mut m.HKOAKJNBIIO },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CoopChapter>(
            "CoopChapter",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CoopChapter {
    const NAME: &'static str = "CoopChapter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.LAAOIEBFJKP)?;
                },
                72 => {
                    self.LAAOIEBFJKP.push(is.read_uint32()?);
                },
                122 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.seen_ending_map.insert(key, value);
                },
                50 => {
                    self.coop_point_list.push(is.read_message()?);
                },
                90 => {
                    self.coop_reward_list.push(is.read_message()?);
                },
                66 => {
                    self.coop_cg_list.push(is.read_message()?);
                },
                112 => {
                    self.id = is.read_uint32()?;
                },
                104 => {
                    self.JDENGALMPJN = is.read_uint32()?;
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.EOMGDNCEACF)?;
                },
                56 => {
                    self.EOMGDNCEACF.push(is.read_uint32()?);
                },
                40 => {
                    self.HKOAKJNBIIO = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.state != ::protobuf::EnumOrUnknown::new(coop_chapter::State::STATE_CLOSE) {
            my_size += ::protobuf::rt::int32_size(3, self.state.value());
        }
        for value in &self.LAAOIEBFJKP {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        for (k, v) in &self.seen_ending_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.coop_point_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.coop_reward_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.coop_cg_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.id);
        }
        if self.JDENGALMPJN != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.JDENGALMPJN);
        }
        for value in &self.EOMGDNCEACF {
            my_size += ::protobuf::rt::uint32_size(7, *value);
        };
        if self.HKOAKJNBIIO != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.HKOAKJNBIIO);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.state != ::protobuf::EnumOrUnknown::new(coop_chapter::State::STATE_CLOSE) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        for v in &self.LAAOIEBFJKP {
            os.write_uint32(9, *v)?;
        };
        for (k, v) in &self.seen_ending_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(122)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        for v in &self.coop_point_list {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.coop_reward_list {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        for v in &self.coop_cg_list {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.id != 0 {
            os.write_uint32(14, self.id)?;
        }
        if self.JDENGALMPJN != 0 {
            os.write_uint32(13, self.JDENGALMPJN)?;
        }
        for v in &self.EOMGDNCEACF {
            os.write_uint32(7, *v)?;
        };
        if self.HKOAKJNBIIO != 0 {
            os.write_uint32(5, self.HKOAKJNBIIO)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CoopChapter {
        CoopChapter::new()
    }

    fn clear(&mut self) {
        self.state = ::protobuf::EnumOrUnknown::new(coop_chapter::State::STATE_CLOSE);
        self.LAAOIEBFJKP.clear();
        self.seen_ending_map.clear();
        self.coop_point_list.clear();
        self.coop_reward_list.clear();
        self.coop_cg_list.clear();
        self.id = 0;
        self.JDENGALMPJN = 0;
        self.EOMGDNCEACF.clear();
        self.HKOAKJNBIIO = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CoopChapter {
        static instance: ::protobuf::rt::Lazy<CoopChapter> = ::protobuf::rt::Lazy::new();
        instance.get(CoopChapter::new)
    }
}

impl ::protobuf::MessageFull for CoopChapter {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CoopChapter").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CoopChapter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoopChapter {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CoopChapter`
pub mod coop_chapter {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CoopChapter.State)
    pub enum State {
        // @@protoc_insertion_point(enum_value:CoopChapter.State.STATE_CLOSE)
        STATE_CLOSE = 0,
        // @@protoc_insertion_point(enum_value:CoopChapter.State.STATE_COND_NOT_MEET)
        STATE_COND_NOT_MEET = 1,
        // @@protoc_insertion_point(enum_value:CoopChapter.State.STATE_COND_MEET)
        STATE_COND_MEET = 2,
        // @@protoc_insertion_point(enum_value:CoopChapter.State.STATE_ACCEPT)
        STATE_ACCEPT = 3,
    }

    impl ::protobuf::Enum for State {
        const NAME: &'static str = "State";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<State> {
            match value {
                0 => ::std::option::Option::Some(State::STATE_CLOSE),
                1 => ::std::option::Option::Some(State::STATE_COND_NOT_MEET),
                2 => ::std::option::Option::Some(State::STATE_COND_MEET),
                3 => ::std::option::Option::Some(State::STATE_ACCEPT),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<State> {
            match str {
                "STATE_CLOSE" => ::std::option::Option::Some(State::STATE_CLOSE),
                "STATE_COND_NOT_MEET" => ::std::option::Option::Some(State::STATE_COND_NOT_MEET),
                "STATE_COND_MEET" => ::std::option::Option::Some(State::STATE_COND_MEET),
                "STATE_ACCEPT" => ::std::option::Option::Some(State::STATE_ACCEPT),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [State] = &[
            State::STATE_CLOSE,
            State::STATE_COND_NOT_MEET,
            State::STATE_COND_MEET,
            State::STATE_ACCEPT,
        ];
    }

    impl ::protobuf::EnumFull for State {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CoopChapter.State").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for State {
        fn default() -> Self {
            State::STATE_CLOSE
        }
    }

    impl State {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<State>("CoopChapter.State")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11CoopChapter.proto\x1a\x0fCoopPoint.proto\x1a\x10CoopReward.proto\
    \x1a\x0cCoopCg.proto\"\xca\x04\n\x0bCoopChapter\x12(\n\x05state\x18\x03\
    \x20\x01(\x0e2\x12.CoopChapter.StateR\x05state\x12\x20\n\x0bLAAOIEBFJKP\
    \x18\t\x20\x03(\rR\x0bLAAOIEBFJKP\x12G\n\x0fseen_ending_map\x18\x0f\x20\
    \x03(\x0b2\x1f.CoopChapter.SeenEndingMapEntryR\rseenEndingMap\x122\n\x0f\
    coop_point_list\x18\x06\x20\x03(\x0b2\n.CoopPointR\rcoopPointList\x125\n\
    \x10coop_reward_list\x18\x0b\x20\x03(\x0b2\x0b.CoopRewardR\x0ecoopReward\
    List\x12)\n\x0ccoop_cg_list\x18\x08\x20\x03(\x0b2\x07.CoopCgR\ncoopCgLis\
    t\x12\x0e\n\x02id\x18\x0e\x20\x01(\rR\x02id\x12\x20\n\x0bJDENGALMPJN\x18\
    \r\x20\x01(\rR\x0bJDENGALMPJN\x12\x20\n\x0bEOMGDNCEACF\x18\x07\x20\x03(\
    \rR\x0bEOMGDNCEACF\x12\x20\n\x0bHKOAKJNBIIO\x18\x05\x20\x01(\rR\x0bHKOAK\
    JNBIIO\x1a@\n\x12SeenEndingMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\
    \x03key\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01\"X\n\
    \x05State\x12\x0f\n\x0bSTATE_CLOSE\x10\0\x12\x17\n\x13STATE_COND_NOT_MEE\
    T\x10\x01\x12\x13\n\x0fSTATE_COND_MEET\x10\x02\x12\x10\n\x0cSTATE_ACCEPT\
    \x10\x03B\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::CoopPoint::file_descriptor().clone());
            deps.push(super::CoopReward::file_descriptor().clone());
            deps.push(super::CoopCg::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CoopChapter::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(coop_chapter::State::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
