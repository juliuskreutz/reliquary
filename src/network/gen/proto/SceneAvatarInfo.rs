// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `SceneAvatarInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:SceneAvatarInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SceneAvatarInfo {
    // message fields
    // @@protoc_insertion_point(field:SceneAvatarInfo.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:SceneAvatarInfo.avatar_id)
    pub avatar_id: u32,
    // @@protoc_insertion_point(field:SceneAvatarInfo.guid)
    pub guid: u64,
    // @@protoc_insertion_point(field:SceneAvatarInfo.peer_id)
    pub peer_id: u32,
    // @@protoc_insertion_point(field:SceneAvatarInfo.equip_id_list)
    pub equip_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SceneAvatarInfo.skill_depot_id)
    pub skill_depot_id: u32,
    // @@protoc_insertion_point(field:SceneAvatarInfo.talent_id_list)
    pub talent_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SceneAvatarInfo.weapon)
    pub weapon: ::protobuf::MessageField<super::SceneWeaponInfo::SceneWeaponInfo>,
    // @@protoc_insertion_point(field:SceneAvatarInfo.reliquary_list)
    pub reliquary_list: ::std::vec::Vec<super::SceneReliquaryInfo::SceneReliquaryInfo>,
    // @@protoc_insertion_point(field:SceneAvatarInfo.core_proud_skill_level)
    pub core_proud_skill_level: u32,
    // @@protoc_insertion_point(field:SceneAvatarInfo.inherent_proud_skill_list)
    pub inherent_proud_skill_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SceneAvatarInfo.skill_level_map)
    pub skill_level_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:SceneAvatarInfo.proud_skill_extra_level_map)
    pub proud_skill_extra_level_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:SceneAvatarInfo.server_buff_list)
    pub server_buff_list: ::std::vec::Vec<super::ServerBuff::ServerBuff>,
    // @@protoc_insertion_point(field:SceneAvatarInfo.team_resonance_list)
    pub team_resonance_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SceneAvatarInfo.wearing_flycloak_id)
    pub wearing_flycloak_id: u32,
    // @@protoc_insertion_point(field:SceneAvatarInfo.born_time)
    pub born_time: u32,
    // @@protoc_insertion_point(field:SceneAvatarInfo.costume_id)
    pub costume_id: u32,
    // @@protoc_insertion_point(field:SceneAvatarInfo.cur_vehicle_info)
    pub cur_vehicle_info: ::protobuf::MessageField<super::CurVehicleInfo::CurVehicleInfo>,
    // @@protoc_insertion_point(field:SceneAvatarInfo.excel_info)
    pub excel_info: ::protobuf::MessageField<super::AvatarExcelInfo::AvatarExcelInfo>,
    // @@protoc_insertion_point(field:SceneAvatarInfo.anim_hash)
    pub anim_hash: u32,
    // special fields
    // @@protoc_insertion_point(special_field:SceneAvatarInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SceneAvatarInfo {
    fn default() -> &'a SceneAvatarInfo {
        <SceneAvatarInfo as ::protobuf::Message>::default_instance()
    }
}

impl SceneAvatarInfo {
    pub fn new() -> SceneAvatarInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(21);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &SceneAvatarInfo| { &m.uid },
            |m: &mut SceneAvatarInfo| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_id",
            |m: &SceneAvatarInfo| { &m.avatar_id },
            |m: &mut SceneAvatarInfo| { &mut m.avatar_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "guid",
            |m: &SceneAvatarInfo| { &m.guid },
            |m: &mut SceneAvatarInfo| { &mut m.guid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "peer_id",
            |m: &SceneAvatarInfo| { &m.peer_id },
            |m: &mut SceneAvatarInfo| { &mut m.peer_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "equip_id_list",
            |m: &SceneAvatarInfo| { &m.equip_id_list },
            |m: &mut SceneAvatarInfo| { &mut m.equip_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "skill_depot_id",
            |m: &SceneAvatarInfo| { &m.skill_depot_id },
            |m: &mut SceneAvatarInfo| { &mut m.skill_depot_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "talent_id_list",
            |m: &SceneAvatarInfo| { &m.talent_id_list },
            |m: &mut SceneAvatarInfo| { &mut m.talent_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::SceneWeaponInfo::SceneWeaponInfo>(
            "weapon",
            |m: &SceneAvatarInfo| { &m.weapon },
            |m: &mut SceneAvatarInfo| { &mut m.weapon },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "reliquary_list",
            |m: &SceneAvatarInfo| { &m.reliquary_list },
            |m: &mut SceneAvatarInfo| { &mut m.reliquary_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "core_proud_skill_level",
            |m: &SceneAvatarInfo| { &m.core_proud_skill_level },
            |m: &mut SceneAvatarInfo| { &mut m.core_proud_skill_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "inherent_proud_skill_list",
            |m: &SceneAvatarInfo| { &m.inherent_proud_skill_list },
            |m: &mut SceneAvatarInfo| { &mut m.inherent_proud_skill_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "skill_level_map",
            |m: &SceneAvatarInfo| { &m.skill_level_map },
            |m: &mut SceneAvatarInfo| { &mut m.skill_level_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "proud_skill_extra_level_map",
            |m: &SceneAvatarInfo| { &m.proud_skill_extra_level_map },
            |m: &mut SceneAvatarInfo| { &mut m.proud_skill_extra_level_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "server_buff_list",
            |m: &SceneAvatarInfo| { &m.server_buff_list },
            |m: &mut SceneAvatarInfo| { &mut m.server_buff_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "team_resonance_list",
            |m: &SceneAvatarInfo| { &m.team_resonance_list },
            |m: &mut SceneAvatarInfo| { &mut m.team_resonance_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wearing_flycloak_id",
            |m: &SceneAvatarInfo| { &m.wearing_flycloak_id },
            |m: &mut SceneAvatarInfo| { &mut m.wearing_flycloak_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "born_time",
            |m: &SceneAvatarInfo| { &m.born_time },
            |m: &mut SceneAvatarInfo| { &mut m.born_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "costume_id",
            |m: &SceneAvatarInfo| { &m.costume_id },
            |m: &mut SceneAvatarInfo| { &mut m.costume_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CurVehicleInfo::CurVehicleInfo>(
            "cur_vehicle_info",
            |m: &SceneAvatarInfo| { &m.cur_vehicle_info },
            |m: &mut SceneAvatarInfo| { &mut m.cur_vehicle_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AvatarExcelInfo::AvatarExcelInfo>(
            "excel_info",
            |m: &SceneAvatarInfo| { &m.excel_info },
            |m: &mut SceneAvatarInfo| { &mut m.excel_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "anim_hash",
            |m: &SceneAvatarInfo| { &m.anim_hash },
            |m: &mut SceneAvatarInfo| { &mut m.anim_hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SceneAvatarInfo>(
            "SceneAvatarInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SceneAvatarInfo {
    const NAME: &'static str = "SceneAvatarInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.uid = is.read_uint32()?;
                },
                16 => {
                    self.avatar_id = is.read_uint32()?;
                },
                24 => {
                    self.guid = is.read_uint64()?;
                },
                32 => {
                    self.peer_id = is.read_uint32()?;
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.equip_id_list)?;
                },
                40 => {
                    self.equip_id_list.push(is.read_uint32()?);
                },
                48 => {
                    self.skill_depot_id = is.read_uint32()?;
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.talent_id_list)?;
                },
                56 => {
                    self.talent_id_list.push(is.read_uint32()?);
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.weapon)?;
                },
                74 => {
                    self.reliquary_list.push(is.read_message()?);
                },
                88 => {
                    self.core_proud_skill_level = is.read_uint32()?;
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.inherent_proud_skill_list)?;
                },
                96 => {
                    self.inherent_proud_skill_list.push(is.read_uint32()?);
                },
                106 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.skill_level_map.insert(key, value);
                },
                114 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.proud_skill_extra_level_map.insert(key, value);
                },
                122 => {
                    self.server_buff_list.push(is.read_message()?);
                },
                130 => {
                    is.read_repeated_packed_uint32_into(&mut self.team_resonance_list)?;
                },
                128 => {
                    self.team_resonance_list.push(is.read_uint32()?);
                },
                136 => {
                    self.wearing_flycloak_id = is.read_uint32()?;
                },
                144 => {
                    self.born_time = is.read_uint32()?;
                },
                152 => {
                    self.costume_id = is.read_uint32()?;
                },
                162 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cur_vehicle_info)?;
                },
                170 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.excel_info)?;
                },
                176 => {
                    self.anim_hash = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.uid);
        }
        if self.avatar_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.avatar_id);
        }
        if self.guid != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.guid);
        }
        if self.peer_id != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.peer_id);
        }
        for value in &self.equip_id_list {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        if self.skill_depot_id != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.skill_depot_id);
        }
        for value in &self.talent_id_list {
            my_size += ::protobuf::rt::uint32_size(7, *value);
        };
        if let Some(v) = self.weapon.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.reliquary_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.core_proud_skill_level != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.core_proud_skill_level);
        }
        for value in &self.inherent_proud_skill_list {
            my_size += ::protobuf::rt::uint32_size(12, *value);
        };
        for (k, v) in &self.skill_level_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for (k, v) in &self.proud_skill_extra_level_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.server_buff_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.team_resonance_list {
            my_size += ::protobuf::rt::uint32_size(16, *value);
        };
        if self.wearing_flycloak_id != 0 {
            my_size += ::protobuf::rt::uint32_size(17, self.wearing_flycloak_id);
        }
        if self.born_time != 0 {
            my_size += ::protobuf::rt::uint32_size(18, self.born_time);
        }
        if self.costume_id != 0 {
            my_size += ::protobuf::rt::uint32_size(19, self.costume_id);
        }
        if let Some(v) = self.cur_vehicle_info.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.excel_info.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.anim_hash != 0 {
            my_size += ::protobuf::rt::uint32_size(22, self.anim_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.uid != 0 {
            os.write_uint32(1, self.uid)?;
        }
        if self.avatar_id != 0 {
            os.write_uint32(2, self.avatar_id)?;
        }
        if self.guid != 0 {
            os.write_uint64(3, self.guid)?;
        }
        if self.peer_id != 0 {
            os.write_uint32(4, self.peer_id)?;
        }
        for v in &self.equip_id_list {
            os.write_uint32(5, *v)?;
        };
        if self.skill_depot_id != 0 {
            os.write_uint32(6, self.skill_depot_id)?;
        }
        for v in &self.talent_id_list {
            os.write_uint32(7, *v)?;
        };
        if let Some(v) = self.weapon.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        for v in &self.reliquary_list {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        if self.core_proud_skill_level != 0 {
            os.write_uint32(11, self.core_proud_skill_level)?;
        }
        for v in &self.inherent_proud_skill_list {
            os.write_uint32(12, *v)?;
        };
        for (k, v) in &self.skill_level_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(106)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        for (k, v) in &self.proud_skill_extra_level_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(114)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        for v in &self.server_buff_list {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        for v in &self.team_resonance_list {
            os.write_uint32(16, *v)?;
        };
        if self.wearing_flycloak_id != 0 {
            os.write_uint32(17, self.wearing_flycloak_id)?;
        }
        if self.born_time != 0 {
            os.write_uint32(18, self.born_time)?;
        }
        if self.costume_id != 0 {
            os.write_uint32(19, self.costume_id)?;
        }
        if let Some(v) = self.cur_vehicle_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
        }
        if let Some(v) = self.excel_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
        }
        if self.anim_hash != 0 {
            os.write_uint32(22, self.anim_hash)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SceneAvatarInfo {
        SceneAvatarInfo::new()
    }

    fn clear(&mut self) {
        self.uid = 0;
        self.avatar_id = 0;
        self.guid = 0;
        self.peer_id = 0;
        self.equip_id_list.clear();
        self.skill_depot_id = 0;
        self.talent_id_list.clear();
        self.weapon.clear();
        self.reliquary_list.clear();
        self.core_proud_skill_level = 0;
        self.inherent_proud_skill_list.clear();
        self.skill_level_map.clear();
        self.proud_skill_extra_level_map.clear();
        self.server_buff_list.clear();
        self.team_resonance_list.clear();
        self.wearing_flycloak_id = 0;
        self.born_time = 0;
        self.costume_id = 0;
        self.cur_vehicle_info.clear();
        self.excel_info.clear();
        self.anim_hash = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SceneAvatarInfo {
        static instance: ::protobuf::rt::Lazy<SceneAvatarInfo> = ::protobuf::rt::Lazy::new();
        instance.get(SceneAvatarInfo::new)
    }
}

impl ::protobuf::MessageFull for SceneAvatarInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SceneAvatarInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SceneAvatarInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SceneAvatarInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15SceneAvatarInfo.proto\x1a\x15SceneWeaponInfo.proto\x1a\x18SceneRel\
    iquaryInfo.proto\x1a\x10ServerBuff.proto\x1a\x14CurVehicleInfo.proto\x1a\
    \x15AvatarExcelInfo.proto\"\xd7\x08\n\x0fSceneAvatarInfo\x12\x10\n\x03ui\
    d\x18\x01\x20\x01(\rR\x03uid\x12\x1b\n\tavatar_id\x18\x02\x20\x01(\rR\
    \x08avatarId\x12\x12\n\x04guid\x18\x03\x20\x01(\x04R\x04guid\x12\x17\n\
    \x07peer_id\x18\x04\x20\x01(\rR\x06peerId\x12\"\n\requip_id_list\x18\x05\
    \x20\x03(\rR\x0bequipIdList\x12$\n\x0eskill_depot_id\x18\x06\x20\x01(\rR\
    \x0cskillDepotId\x12$\n\x0etalent_id_list\x18\x07\x20\x03(\rR\x0ctalentI\
    dList\x12(\n\x06weapon\x18\x08\x20\x01(\x0b2\x10.SceneWeaponInfoR\x06wea\
    pon\x12:\n\x0ereliquary_list\x18\t\x20\x03(\x0b2\x13.SceneReliquaryInfoR\
    \rreliquaryList\x123\n\x16core_proud_skill_level\x18\x0b\x20\x01(\rR\x13\
    coreProudSkillLevel\x129\n\x19inherent_proud_skill_list\x18\x0c\x20\x03(\
    \rR\x16inherentProudSkillList\x12K\n\x0fskill_level_map\x18\r\x20\x03(\
    \x0b2#.SceneAvatarInfo.SkillLevelMapEntryR\rskillLevelMap\x12k\n\x1bprou\
    d_skill_extra_level_map\x18\x0e\x20\x03(\x0b2-.SceneAvatarInfo.ProudSkil\
    lExtraLevelMapEntryR\x17proudSkillExtraLevelMap\x125\n\x10server_buff_li\
    st\x18\x0f\x20\x03(\x0b2\x0b.ServerBuffR\x0eserverBuffList\x12.\n\x13tea\
    m_resonance_list\x18\x10\x20\x03(\rR\x11teamResonanceList\x12.\n\x13wear\
    ing_flycloak_id\x18\x11\x20\x01(\rR\x11wearingFlycloakId\x12\x1b\n\tborn\
    _time\x18\x12\x20\x01(\rR\x08bornTime\x12\x1d\n\ncostume_id\x18\x13\x20\
    \x01(\rR\tcostumeId\x129\n\x10cur_vehicle_info\x18\x14\x20\x01(\x0b2\x0f\
    .CurVehicleInfoR\x0ecurVehicleInfo\x12/\n\nexcel_info\x18\x15\x20\x01(\
    \x0b2\x10.AvatarExcelInfoR\texcelInfo\x12\x1b\n\tanim_hash\x18\x16\x20\
    \x01(\rR\x08animHash\x1a@\n\x12SkillLevelMapEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\rR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\
    \x028\x01\x1aJ\n\x1cProudSkillExtraLevelMapEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\rR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\
    \x028\x01B\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::SceneWeaponInfo::file_descriptor().clone());
            deps.push(super::SceneReliquaryInfo::file_descriptor().clone());
            deps.push(super::ServerBuff::file_descriptor().clone());
            deps.push(super::CurVehicleInfo::file_descriptor().clone());
            deps.push(super::AvatarExcelInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SceneAvatarInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
