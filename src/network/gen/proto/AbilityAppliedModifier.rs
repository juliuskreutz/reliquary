// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AbilityAppliedModifier.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AbilityAppliedModifier)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AbilityAppliedModifier {
    // message fields
    // @@protoc_insertion_point(field:AbilityAppliedModifier.modifier_local_id)
    pub modifier_local_id: i32,
    // @@protoc_insertion_point(field:AbilityAppliedModifier.parent_ability_entity_id)
    pub parent_ability_entity_id: u32,
    // @@protoc_insertion_point(field:AbilityAppliedModifier.parent_ability_name)
    pub parent_ability_name: ::protobuf::MessageField<super::AbilityString::AbilityString>,
    // @@protoc_insertion_point(field:AbilityAppliedModifier.parent_ability_override)
    pub parent_ability_override: ::protobuf::MessageField<super::AbilityString::AbilityString>,
    // @@protoc_insertion_point(field:AbilityAppliedModifier.instanced_ability_id)
    pub instanced_ability_id: u32,
    // @@protoc_insertion_point(field:AbilityAppliedModifier.instanced_modifier_id)
    pub instanced_modifier_id: u32,
    // @@protoc_insertion_point(field:AbilityAppliedModifier.exist_duration)
    pub exist_duration: f32,
    // @@protoc_insertion_point(field:AbilityAppliedModifier.attached_instanced_modifier)
    pub attached_instanced_modifier: ::protobuf::MessageField<super::AbilityAttachedModifier::AbilityAttachedModifier>,
    // @@protoc_insertion_point(field:AbilityAppliedModifier.apply_entity_id)
    pub apply_entity_id: u32,
    // @@protoc_insertion_point(field:AbilityAppliedModifier.is_attached_parent_ability)
    pub is_attached_parent_ability: bool,
    // @@protoc_insertion_point(field:AbilityAppliedModifier.modifier_durability)
    pub modifier_durability: ::protobuf::MessageField<super::ModifierDurability::ModifierDurability>,
    // @@protoc_insertion_point(field:AbilityAppliedModifier.sbuff_uid)
    pub sbuff_uid: u32,
    // @@protoc_insertion_point(field:AbilityAppliedModifier.is_serverbuff_modifier)
    pub is_serverbuff_modifier: bool,
    // @@protoc_insertion_point(field:AbilityAppliedModifier.IILBHFODNKJ)
    pub IILBHFODNKJ: bool,
    // special fields
    // @@protoc_insertion_point(special_field:AbilityAppliedModifier.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AbilityAppliedModifier {
    fn default() -> &'a AbilityAppliedModifier {
        <AbilityAppliedModifier as ::protobuf::Message>::default_instance()
    }
}

impl AbilityAppliedModifier {
    pub fn new() -> AbilityAppliedModifier {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "modifier_local_id",
            |m: &AbilityAppliedModifier| { &m.modifier_local_id },
            |m: &mut AbilityAppliedModifier| { &mut m.modifier_local_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent_ability_entity_id",
            |m: &AbilityAppliedModifier| { &m.parent_ability_entity_id },
            |m: &mut AbilityAppliedModifier| { &mut m.parent_ability_entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AbilityString::AbilityString>(
            "parent_ability_name",
            |m: &AbilityAppliedModifier| { &m.parent_ability_name },
            |m: &mut AbilityAppliedModifier| { &mut m.parent_ability_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AbilityString::AbilityString>(
            "parent_ability_override",
            |m: &AbilityAppliedModifier| { &m.parent_ability_override },
            |m: &mut AbilityAppliedModifier| { &mut m.parent_ability_override },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "instanced_ability_id",
            |m: &AbilityAppliedModifier| { &m.instanced_ability_id },
            |m: &mut AbilityAppliedModifier| { &mut m.instanced_ability_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "instanced_modifier_id",
            |m: &AbilityAppliedModifier| { &m.instanced_modifier_id },
            |m: &mut AbilityAppliedModifier| { &mut m.instanced_modifier_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exist_duration",
            |m: &AbilityAppliedModifier| { &m.exist_duration },
            |m: &mut AbilityAppliedModifier| { &mut m.exist_duration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AbilityAttachedModifier::AbilityAttachedModifier>(
            "attached_instanced_modifier",
            |m: &AbilityAppliedModifier| { &m.attached_instanced_modifier },
            |m: &mut AbilityAppliedModifier| { &mut m.attached_instanced_modifier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "apply_entity_id",
            |m: &AbilityAppliedModifier| { &m.apply_entity_id },
            |m: &mut AbilityAppliedModifier| { &mut m.apply_entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_attached_parent_ability",
            |m: &AbilityAppliedModifier| { &m.is_attached_parent_ability },
            |m: &mut AbilityAppliedModifier| { &mut m.is_attached_parent_ability },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ModifierDurability::ModifierDurability>(
            "modifier_durability",
            |m: &AbilityAppliedModifier| { &m.modifier_durability },
            |m: &mut AbilityAppliedModifier| { &mut m.modifier_durability },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sbuff_uid",
            |m: &AbilityAppliedModifier| { &m.sbuff_uid },
            |m: &mut AbilityAppliedModifier| { &mut m.sbuff_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_serverbuff_modifier",
            |m: &AbilityAppliedModifier| { &m.is_serverbuff_modifier },
            |m: &mut AbilityAppliedModifier| { &mut m.is_serverbuff_modifier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IILBHFODNKJ",
            |m: &AbilityAppliedModifier| { &m.IILBHFODNKJ },
            |m: &mut AbilityAppliedModifier| { &mut m.IILBHFODNKJ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AbilityAppliedModifier>(
            "AbilityAppliedModifier",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AbilityAppliedModifier {
    const NAME: &'static str = "AbilityAppliedModifier";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.modifier_local_id = is.read_int32()?;
                },
                16 => {
                    self.parent_ability_entity_id = is.read_uint32()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.parent_ability_name)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.parent_ability_override)?;
                },
                40 => {
                    self.instanced_ability_id = is.read_uint32()?;
                },
                48 => {
                    self.instanced_modifier_id = is.read_uint32()?;
                },
                61 => {
                    self.exist_duration = is.read_float()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.attached_instanced_modifier)?;
                },
                72 => {
                    self.apply_entity_id = is.read_uint32()?;
                },
                80 => {
                    self.is_attached_parent_ability = is.read_bool()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.modifier_durability)?;
                },
                96 => {
                    self.sbuff_uid = is.read_uint32()?;
                },
                104 => {
                    self.is_serverbuff_modifier = is.read_bool()?;
                },
                112 => {
                    self.IILBHFODNKJ = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.modifier_local_id != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.modifier_local_id);
        }
        if self.parent_ability_entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.parent_ability_entity_id);
        }
        if let Some(v) = self.parent_ability_name.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.parent_ability_override.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.instanced_ability_id != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.instanced_ability_id);
        }
        if self.instanced_modifier_id != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.instanced_modifier_id);
        }
        if self.exist_duration != 0. {
            my_size += 1 + 4;
        }
        if let Some(v) = self.attached_instanced_modifier.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.apply_entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.apply_entity_id);
        }
        if self.is_attached_parent_ability != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.modifier_durability.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.sbuff_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.sbuff_uid);
        }
        if self.is_serverbuff_modifier != false {
            my_size += 1 + 1;
        }
        if self.IILBHFODNKJ != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.modifier_local_id != 0 {
            os.write_int32(1, self.modifier_local_id)?;
        }
        if self.parent_ability_entity_id != 0 {
            os.write_uint32(2, self.parent_ability_entity_id)?;
        }
        if let Some(v) = self.parent_ability_name.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.parent_ability_override.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.instanced_ability_id != 0 {
            os.write_uint32(5, self.instanced_ability_id)?;
        }
        if self.instanced_modifier_id != 0 {
            os.write_uint32(6, self.instanced_modifier_id)?;
        }
        if self.exist_duration != 0. {
            os.write_float(7, self.exist_duration)?;
        }
        if let Some(v) = self.attached_instanced_modifier.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if self.apply_entity_id != 0 {
            os.write_uint32(9, self.apply_entity_id)?;
        }
        if self.is_attached_parent_ability != false {
            os.write_bool(10, self.is_attached_parent_ability)?;
        }
        if let Some(v) = self.modifier_durability.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if self.sbuff_uid != 0 {
            os.write_uint32(12, self.sbuff_uid)?;
        }
        if self.is_serverbuff_modifier != false {
            os.write_bool(13, self.is_serverbuff_modifier)?;
        }
        if self.IILBHFODNKJ != false {
            os.write_bool(14, self.IILBHFODNKJ)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AbilityAppliedModifier {
        AbilityAppliedModifier::new()
    }

    fn clear(&mut self) {
        self.modifier_local_id = 0;
        self.parent_ability_entity_id = 0;
        self.parent_ability_name.clear();
        self.parent_ability_override.clear();
        self.instanced_ability_id = 0;
        self.instanced_modifier_id = 0;
        self.exist_duration = 0.;
        self.attached_instanced_modifier.clear();
        self.apply_entity_id = 0;
        self.is_attached_parent_ability = false;
        self.modifier_durability.clear();
        self.sbuff_uid = 0;
        self.is_serverbuff_modifier = false;
        self.IILBHFODNKJ = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AbilityAppliedModifier {
        static instance: AbilityAppliedModifier = AbilityAppliedModifier {
            modifier_local_id: 0,
            parent_ability_entity_id: 0,
            parent_ability_name: ::protobuf::MessageField::none(),
            parent_ability_override: ::protobuf::MessageField::none(),
            instanced_ability_id: 0,
            instanced_modifier_id: 0,
            exist_duration: 0.,
            attached_instanced_modifier: ::protobuf::MessageField::none(),
            apply_entity_id: 0,
            is_attached_parent_ability: false,
            modifier_durability: ::protobuf::MessageField::none(),
            sbuff_uid: 0,
            is_serverbuff_modifier: false,
            IILBHFODNKJ: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AbilityAppliedModifier {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AbilityAppliedModifier").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AbilityAppliedModifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AbilityAppliedModifier {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cAbilityAppliedModifier.proto\x1a\x13AbilityString.proto\x1a\x1dAbi\
    lityAttachedModifier.proto\x1a\x18ModifierDurability.proto\"\x8c\x06\n\
    \x16AbilityAppliedModifier\x12*\n\x11modifier_local_id\x18\x01\x20\x01(\
    \x05R\x0fmodifierLocalId\x127\n\x18parent_ability_entity_id\x18\x02\x20\
    \x01(\rR\x15parentAbilityEntityId\x12>\n\x13parent_ability_name\x18\x03\
    \x20\x01(\x0b2\x0e.AbilityStringR\x11parentAbilityName\x12F\n\x17parent_\
    ability_override\x18\x04\x20\x01(\x0b2\x0e.AbilityStringR\x15parentAbili\
    tyOverride\x120\n\x14instanced_ability_id\x18\x05\x20\x01(\rR\x12instanc\
    edAbilityId\x122\n\x15instanced_modifier_id\x18\x06\x20\x01(\rR\x13insta\
    ncedModifierId\x12%\n\x0eexist_duration\x18\x07\x20\x01(\x02R\rexistDura\
    tion\x12X\n\x1battached_instanced_modifier\x18\x08\x20\x01(\x0b2\x18.Abi\
    lityAttachedModifierR\x19attachedInstancedModifier\x12&\n\x0fapply_entit\
    y_id\x18\t\x20\x01(\rR\rapplyEntityId\x12;\n\x1ais_attached_parent_abili\
    ty\x18\n\x20\x01(\x08R\x17isAttachedParentAbility\x12D\n\x13modifier_dur\
    ability\x18\x0b\x20\x01(\x0b2\x13.ModifierDurabilityR\x12modifierDurabil\
    ity\x12\x1b\n\tsbuff_uid\x18\x0c\x20\x01(\rR\x08sbuffUid\x124\n\x16is_se\
    rverbuff_modifier\x18\r\x20\x01(\x08R\x14isServerbuffModifier\x12\x20\n\
    \x0bIILBHFODNKJ\x18\x0e\x20\x01(\x08R\x0bIILBHFODNKJB\x1b\n\x19emu.grass\
    cutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::AbilityString::file_descriptor().clone());
            deps.push(super::AbilityAttachedModifier::file_descriptor().clone());
            deps.push(super::ModifierDurability::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AbilityAppliedModifier::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
