// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlayerLoginRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:PlayerLoginRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerLoginRsp {
    // message fields
    // @@protoc_insertion_point(field:PlayerLoginRsp.game_biz)
    pub game_biz: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.country_code)
    pub country_code: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.res_version_config)
    pub res_version_config: ::protobuf::MessageField<super::ResVersionConfig::ResVersionConfig>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.client_md5)
    pub client_md5: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.client_silence_md5)
    pub client_silence_md5: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.total_tick_time)
    pub total_tick_time: f64,
    // @@protoc_insertion_point(field:PlayerLoginRsp.client_data_version)
    pub client_data_version: u32,
    // @@protoc_insertion_point(field:PlayerLoginRsp.client_silence_data_version)
    pub client_silence_data_version: u32,
    // @@protoc_insertion_point(field:PlayerLoginRsp.client_version_suffix)
    pub client_version_suffix: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.is_use_ability_hash)
    pub is_use_ability_hash: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.client_silence_version_suffix)
    pub client_silence_version_suffix: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.ability_hash_map)
    pub ability_hash_map: ::std::collections::HashMap<::std::string::String, i32>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.is_transfer)
    pub is_transfer: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.target_home_owner_uid)
    pub target_home_owner_uid: u32,
    // @@protoc_insertion_point(field:PlayerLoginRsp.is_data_need_relogin)
    pub is_data_need_relogin: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.ability_hash_code)
    pub ability_hash_code: i32,
    // @@protoc_insertion_point(field:PlayerLoginRsp.short_ability_hash_map)
    pub short_ability_hash_map: ::std::vec::Vec<super::ShortAbilityHashPair::ShortAbilityHashPair>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.FBFJPEPMAOF)
    pub FBFJPEPMAOF: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.is_audit)
    pub is_audit: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.msg)
    pub msg: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.feature_block_info_list)
    pub feature_block_info_list: ::std::vec::Vec<super::FeatureBlockInfo::FeatureBlockInfo>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.DNHHIMENOLD)
    pub DNHHIMENOLD: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.PKKKINOCFMJ)
    pub PKKKINOCFMJ: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.retcode)
    pub retcode: i32,
    // @@protoc_insertion_point(field:PlayerLoginRsp.birthday)
    pub birthday: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.BOKKNHEOKPD)
    pub BOKKNHEOKPD: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.target_uid)
    pub target_uid: u32,
    // @@protoc_insertion_point(field:PlayerLoginRsp.block_info_map)
    pub block_info_map: ::std::collections::HashMap<u32, super::BlockInfo::BlockInfo>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.GOFGOCDJDND)
    pub GOFGOCDJDND: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.next_resource_url)
    pub next_resource_url: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.player_data)
    pub player_data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.sc_info)
    pub sc_info: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.login_rand)
    pub login_rand: u64,
    // @@protoc_insertion_point(field:PlayerLoginRsp.ENNOCBNIHIK)
    pub ENNOCBNIHIK: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.player_data_version)
    pub player_data_version: u32,
    // @@protoc_insertion_point(field:PlayerLoginRsp.ECKNMCACJKG)
    pub ECKNMCACJKG: ::protobuf::MessageField<super::StopServerInfo::StopServerInfo>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.next_res_version_config)
    pub next_res_version_config: ::protobuf::MessageField<super::ResVersionConfig::ResVersionConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:PlayerLoginRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerLoginRsp {
    fn default() -> &'a PlayerLoginRsp {
        <PlayerLoginRsp as ::protobuf::Message>::default_instance()
    }
}

impl PlayerLoginRsp {
    pub fn new() -> PlayerLoginRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(37);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "game_biz",
            |m: &PlayerLoginRsp| { &m.game_biz },
            |m: &mut PlayerLoginRsp| { &mut m.game_biz },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "country_code",
            |m: &PlayerLoginRsp| { &m.country_code },
            |m: &mut PlayerLoginRsp| { &mut m.country_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ResVersionConfig::ResVersionConfig>(
            "res_version_config",
            |m: &PlayerLoginRsp| { &m.res_version_config },
            |m: &mut PlayerLoginRsp| { &mut m.res_version_config },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_md5",
            |m: &PlayerLoginRsp| { &m.client_md5 },
            |m: &mut PlayerLoginRsp| { &mut m.client_md5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_silence_md5",
            |m: &PlayerLoginRsp| { &m.client_silence_md5 },
            |m: &mut PlayerLoginRsp| { &mut m.client_silence_md5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_tick_time",
            |m: &PlayerLoginRsp| { &m.total_tick_time },
            |m: &mut PlayerLoginRsp| { &mut m.total_tick_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_data_version",
            |m: &PlayerLoginRsp| { &m.client_data_version },
            |m: &mut PlayerLoginRsp| { &mut m.client_data_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_silence_data_version",
            |m: &PlayerLoginRsp| { &m.client_silence_data_version },
            |m: &mut PlayerLoginRsp| { &mut m.client_silence_data_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_version_suffix",
            |m: &PlayerLoginRsp| { &m.client_version_suffix },
            |m: &mut PlayerLoginRsp| { &mut m.client_version_suffix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_use_ability_hash",
            |m: &PlayerLoginRsp| { &m.is_use_ability_hash },
            |m: &mut PlayerLoginRsp| { &mut m.is_use_ability_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_silence_version_suffix",
            |m: &PlayerLoginRsp| { &m.client_silence_version_suffix },
            |m: &mut PlayerLoginRsp| { &mut m.client_silence_version_suffix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "ability_hash_map",
            |m: &PlayerLoginRsp| { &m.ability_hash_map },
            |m: &mut PlayerLoginRsp| { &mut m.ability_hash_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_transfer",
            |m: &PlayerLoginRsp| { &m.is_transfer },
            |m: &mut PlayerLoginRsp| { &mut m.is_transfer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_home_owner_uid",
            |m: &PlayerLoginRsp| { &m.target_home_owner_uid },
            |m: &mut PlayerLoginRsp| { &mut m.target_home_owner_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_data_need_relogin",
            |m: &PlayerLoginRsp| { &m.is_data_need_relogin },
            |m: &mut PlayerLoginRsp| { &mut m.is_data_need_relogin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ability_hash_code",
            |m: &PlayerLoginRsp| { &m.ability_hash_code },
            |m: &mut PlayerLoginRsp| { &mut m.ability_hash_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "short_ability_hash_map",
            |m: &PlayerLoginRsp| { &m.short_ability_hash_map },
            |m: &mut PlayerLoginRsp| { &mut m.short_ability_hash_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FBFJPEPMAOF",
            |m: &PlayerLoginRsp| { &m.FBFJPEPMAOF },
            |m: &mut PlayerLoginRsp| { &mut m.FBFJPEPMAOF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_audit",
            |m: &PlayerLoginRsp| { &m.is_audit },
            |m: &mut PlayerLoginRsp| { &mut m.is_audit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg",
            |m: &PlayerLoginRsp| { &m.msg },
            |m: &mut PlayerLoginRsp| { &mut m.msg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "feature_block_info_list",
            |m: &PlayerLoginRsp| { &m.feature_block_info_list },
            |m: &mut PlayerLoginRsp| { &mut m.feature_block_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DNHHIMENOLD",
            |m: &PlayerLoginRsp| { &m.DNHHIMENOLD },
            |m: &mut PlayerLoginRsp| { &mut m.DNHHIMENOLD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PKKKINOCFMJ",
            |m: &PlayerLoginRsp| { &m.PKKKINOCFMJ },
            |m: &mut PlayerLoginRsp| { &mut m.PKKKINOCFMJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &PlayerLoginRsp| { &m.retcode },
            |m: &mut PlayerLoginRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "birthday",
            |m: &PlayerLoginRsp| { &m.birthday },
            |m: &mut PlayerLoginRsp| { &mut m.birthday },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BOKKNHEOKPD",
            |m: &PlayerLoginRsp| { &m.BOKKNHEOKPD },
            |m: &mut PlayerLoginRsp| { &mut m.BOKKNHEOKPD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_uid",
            |m: &PlayerLoginRsp| { &m.target_uid },
            |m: &mut PlayerLoginRsp| { &mut m.target_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "block_info_map",
            |m: &PlayerLoginRsp| { &m.block_info_map },
            |m: &mut PlayerLoginRsp| { &mut m.block_info_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GOFGOCDJDND",
            |m: &PlayerLoginRsp| { &m.GOFGOCDJDND },
            |m: &mut PlayerLoginRsp| { &mut m.GOFGOCDJDND },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next_resource_url",
            |m: &PlayerLoginRsp| { &m.next_resource_url },
            |m: &mut PlayerLoginRsp| { &mut m.next_resource_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "player_data",
            |m: &PlayerLoginRsp| { &m.player_data },
            |m: &mut PlayerLoginRsp| { &mut m.player_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sc_info",
            |m: &PlayerLoginRsp| { &m.sc_info },
            |m: &mut PlayerLoginRsp| { &mut m.sc_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "login_rand",
            |m: &PlayerLoginRsp| { &m.login_rand },
            |m: &mut PlayerLoginRsp| { &mut m.login_rand },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ENNOCBNIHIK",
            |m: &PlayerLoginRsp| { &m.ENNOCBNIHIK },
            |m: &mut PlayerLoginRsp| { &mut m.ENNOCBNIHIK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "player_data_version",
            |m: &PlayerLoginRsp| { &m.player_data_version },
            |m: &mut PlayerLoginRsp| { &mut m.player_data_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::StopServerInfo::StopServerInfo>(
            "ECKNMCACJKG",
            |m: &PlayerLoginRsp| { &m.ECKNMCACJKG },
            |m: &mut PlayerLoginRsp| { &mut m.ECKNMCACJKG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ResVersionConfig::ResVersionConfig>(
            "next_res_version_config",
            |m: &PlayerLoginRsp| { &m.next_res_version_config },
            |m: &mut PlayerLoginRsp| { &mut m.next_res_version_config },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerLoginRsp>(
            "PlayerLoginRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerLoginRsp {
    const NAME: &'static str = "PlayerLoginRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                106 => {
                    self.game_biz = is.read_string()?;
                },
                1474 => {
                    self.country_code = is.read_string()?;
                },
                11986 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.res_version_config)?;
                },
                2834 => {
                    self.client_md5 = is.read_string()?;
                },
                6322 => {
                    self.client_silence_md5 = is.read_string()?;
                },
                641 => {
                    self.total_tick_time = is.read_double()?;
                },
                56 => {
                    self.client_data_version = is.read_uint32()?;
                },
                80 => {
                    self.client_silence_data_version = is.read_uint32()?;
                },
                5634 => {
                    self.client_version_suffix = is.read_string()?;
                },
                9536 => {
                    self.is_use_ability_hash = is.read_bool()?;
                },
                14882 => {
                    self.client_silence_version_suffix = is.read_string()?;
                },
                8090 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            16 => value = is.read_int32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.ability_hash_map.insert(key, value);
                },
                15904 => {
                    self.is_transfer = is.read_bool()?;
                },
                6528 => {
                    self.target_home_owner_uid = is.read_uint32()?;
                },
                15944 => {
                    self.is_data_need_relogin = is.read_bool()?;
                },
                4088 => {
                    self.ability_hash_code = is.read_int32()?;
                },
                10986 => {
                    self.short_ability_hash_map.push(is.read_message()?);
                },
                120 => {
                    self.FBFJPEPMAOF = is.read_bool()?;
                },
                2680 => {
                    self.is_audit = is.read_bool()?;
                },
                34490 => {
                    self.msg = is.read_string()?;
                },
                13018 => {
                    self.feature_block_info_list.push(is.read_message()?);
                },
                10968 => {
                    self.DNHHIMENOLD = is.read_bool()?;
                },
                1688 => {
                    self.PKKKINOCFMJ = is.read_bool()?;
                },
                6488 => {
                    self.retcode = is.read_int32()?;
                },
                13506 => {
                    self.birthday = is.read_string()?;
                },
                4960 => {
                    self.BOKKNHEOKPD = is.read_bool()?;
                },
                7288 => {
                    self.target_uid = is.read_uint32()?;
                },
                16058 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.block_info_map.insert(key, value);
                },
                2248 => {
                    self.GOFGOCDJDND = is.read_bool()?;
                },
                7890 => {
                    self.next_resource_url = is.read_string()?;
                },
                1074 => {
                    self.player_data = is.read_bytes()?;
                },
                3330 => {
                    self.sc_info = is.read_bytes()?;
                },
                2488 => {
                    self.login_rand = is.read_uint64()?;
                },
                10066 => {
                    self.ENNOCBNIHIK = is.read_string()?;
                },
                8888 => {
                    self.player_data_version = is.read_uint32()?;
                },
                16170 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ECKNMCACJKG)?;
                },
                9058 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.next_res_version_config)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.game_biz.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.game_biz);
        }
        if !self.country_code.is_empty() {
            my_size += ::protobuf::rt::string_size(184, &self.country_code);
        }
        if let Some(v) = self.res_version_config.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.client_md5.is_empty() {
            my_size += ::protobuf::rt::string_size(354, &self.client_md5);
        }
        if !self.client_silence_md5.is_empty() {
            my_size += ::protobuf::rt::string_size(790, &self.client_silence_md5);
        }
        if self.total_tick_time != 0. {
            my_size += 2 + 8;
        }
        if self.client_data_version != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.client_data_version);
        }
        if self.client_silence_data_version != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.client_silence_data_version);
        }
        if !self.client_version_suffix.is_empty() {
            my_size += ::protobuf::rt::string_size(704, &self.client_version_suffix);
        }
        if self.is_use_ability_hash != false {
            my_size += 2 + 1;
        }
        if !self.client_silence_version_suffix.is_empty() {
            my_size += ::protobuf::rt::string_size(1860, &self.client_silence_version_suffix);
        }
        for (k, v) in &self.ability_hash_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.is_transfer != false {
            my_size += 2 + 1;
        }
        if self.target_home_owner_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(816, self.target_home_owner_uid);
        }
        if self.is_data_need_relogin != false {
            my_size += 2 + 1;
        }
        if self.ability_hash_code != 0 {
            my_size += ::protobuf::rt::int32_size(511, self.ability_hash_code);
        }
        for value in &self.short_ability_hash_map {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.FBFJPEPMAOF != false {
            my_size += 1 + 1;
        }
        if self.is_audit != false {
            my_size += 2 + 1;
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(4311, &self.msg);
        }
        for value in &self.feature_block_info_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.DNHHIMENOLD != false {
            my_size += 2 + 1;
        }
        if self.PKKKINOCFMJ != false {
            my_size += 2 + 1;
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::int32_size(811, self.retcode);
        }
        if !self.birthday.is_empty() {
            my_size += ::protobuf::rt::string_size(1688, &self.birthday);
        }
        if self.BOKKNHEOKPD != false {
            my_size += 2 + 1;
        }
        if self.target_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(911, self.target_uid);
        }
        for (k, v) in &self.block_info_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.GOFGOCDJDND != false {
            my_size += 2 + 1;
        }
        if !self.next_resource_url.is_empty() {
            my_size += ::protobuf::rt::string_size(986, &self.next_resource_url);
        }
        if !self.player_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(134, &self.player_data);
        }
        if !self.sc_info.is_empty() {
            my_size += ::protobuf::rt::bytes_size(416, &self.sc_info);
        }
        if self.login_rand != 0 {
            my_size += ::protobuf::rt::uint64_size(311, self.login_rand);
        }
        if !self.ENNOCBNIHIK.is_empty() {
            my_size += ::protobuf::rt::string_size(1258, &self.ENNOCBNIHIK);
        }
        if self.player_data_version != 0 {
            my_size += ::protobuf::rt::uint32_size(1111, self.player_data_version);
        }
        if let Some(v) = self.ECKNMCACJKG.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.next_res_version_config.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.game_biz.is_empty() {
            os.write_string(13, &self.game_biz)?;
        }
        if !self.country_code.is_empty() {
            os.write_string(184, &self.country_code)?;
        }
        if let Some(v) = self.res_version_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1498, v, os)?;
        }
        if !self.client_md5.is_empty() {
            os.write_string(354, &self.client_md5)?;
        }
        if !self.client_silence_md5.is_empty() {
            os.write_string(790, &self.client_silence_md5)?;
        }
        if self.total_tick_time != 0. {
            os.write_double(80, self.total_tick_time)?;
        }
        if self.client_data_version != 0 {
            os.write_uint32(7, self.client_data_version)?;
        }
        if self.client_silence_data_version != 0 {
            os.write_uint32(10, self.client_silence_data_version)?;
        }
        if !self.client_version_suffix.is_empty() {
            os.write_string(704, &self.client_version_suffix)?;
        }
        if self.is_use_ability_hash != false {
            os.write_bool(1192, self.is_use_ability_hash)?;
        }
        if !self.client_silence_version_suffix.is_empty() {
            os.write_string(1860, &self.client_silence_version_suffix)?;
        }
        for (k, v) in &self.ability_hash_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            os.write_raw_varint32(8090)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_int32(2, *v)?;
        };
        if self.is_transfer != false {
            os.write_bool(1988, self.is_transfer)?;
        }
        if self.target_home_owner_uid != 0 {
            os.write_uint32(816, self.target_home_owner_uid)?;
        }
        if self.is_data_need_relogin != false {
            os.write_bool(1993, self.is_data_need_relogin)?;
        }
        if self.ability_hash_code != 0 {
            os.write_int32(511, self.ability_hash_code)?;
        }
        for v in &self.short_ability_hash_map {
            ::protobuf::rt::write_message_field_with_cached_size(1373, v, os)?;
        };
        if self.FBFJPEPMAOF != false {
            os.write_bool(15, self.FBFJPEPMAOF)?;
        }
        if self.is_audit != false {
            os.write_bool(335, self.is_audit)?;
        }
        if !self.msg.is_empty() {
            os.write_string(4311, &self.msg)?;
        }
        for v in &self.feature_block_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(1627, v, os)?;
        };
        if self.DNHHIMENOLD != false {
            os.write_bool(1371, self.DNHHIMENOLD)?;
        }
        if self.PKKKINOCFMJ != false {
            os.write_bool(211, self.PKKKINOCFMJ)?;
        }
        if self.retcode != 0 {
            os.write_int32(811, self.retcode)?;
        }
        if !self.birthday.is_empty() {
            os.write_string(1688, &self.birthday)?;
        }
        if self.BOKKNHEOKPD != false {
            os.write_bool(620, self.BOKKNHEOKPD)?;
        }
        if self.target_uid != 0 {
            os.write_uint32(911, self.target_uid)?;
        }
        for (k, v) in &self.block_info_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(16058)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.GOFGOCDJDND != false {
            os.write_bool(281, self.GOFGOCDJDND)?;
        }
        if !self.next_resource_url.is_empty() {
            os.write_string(986, &self.next_resource_url)?;
        }
        if !self.player_data.is_empty() {
            os.write_bytes(134, &self.player_data)?;
        }
        if !self.sc_info.is_empty() {
            os.write_bytes(416, &self.sc_info)?;
        }
        if self.login_rand != 0 {
            os.write_uint64(311, self.login_rand)?;
        }
        if !self.ENNOCBNIHIK.is_empty() {
            os.write_string(1258, &self.ENNOCBNIHIK)?;
        }
        if self.player_data_version != 0 {
            os.write_uint32(1111, self.player_data_version)?;
        }
        if let Some(v) = self.ECKNMCACJKG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2021, v, os)?;
        }
        if let Some(v) = self.next_res_version_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1132, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerLoginRsp {
        PlayerLoginRsp::new()
    }

    fn clear(&mut self) {
        self.game_biz.clear();
        self.country_code.clear();
        self.res_version_config.clear();
        self.client_md5.clear();
        self.client_silence_md5.clear();
        self.total_tick_time = 0.;
        self.client_data_version = 0;
        self.client_silence_data_version = 0;
        self.client_version_suffix.clear();
        self.is_use_ability_hash = false;
        self.client_silence_version_suffix.clear();
        self.ability_hash_map.clear();
        self.is_transfer = false;
        self.target_home_owner_uid = 0;
        self.is_data_need_relogin = false;
        self.ability_hash_code = 0;
        self.short_ability_hash_map.clear();
        self.FBFJPEPMAOF = false;
        self.is_audit = false;
        self.msg.clear();
        self.feature_block_info_list.clear();
        self.DNHHIMENOLD = false;
        self.PKKKINOCFMJ = false;
        self.retcode = 0;
        self.birthday.clear();
        self.BOKKNHEOKPD = false;
        self.target_uid = 0;
        self.block_info_map.clear();
        self.GOFGOCDJDND = false;
        self.next_resource_url.clear();
        self.player_data.clear();
        self.sc_info.clear();
        self.login_rand = 0;
        self.ENNOCBNIHIK.clear();
        self.player_data_version = 0;
        self.ECKNMCACJKG.clear();
        self.next_res_version_config.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerLoginRsp {
        static instance: ::protobuf::rt::Lazy<PlayerLoginRsp> = ::protobuf::rt::Lazy::new();
        instance.get(PlayerLoginRsp::new)
    }
}

impl ::protobuf::MessageFull for PlayerLoginRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerLoginRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerLoginRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerLoginRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14PlayerLoginRsp.proto\x1a\x16ResVersionConfig.proto\x1a\x1aShortAbi\
    lityHashPair.proto\x1a\x16FeatureBlockInfo.proto\x1a\x14StopServerInfo.p\
    roto\x1a\x0fBlockInfo.proto\"\xa8\x0e\n\x0ePlayerLoginRsp\x12\x19\n\x08g\
    ame_biz\x18\r\x20\x01(\tR\x07gameBiz\x12\"\n\x0ccountry_code\x18\xb8\x01\
    \x20\x01(\tR\x0bcountryCode\x12@\n\x12res_version_config\x18\xda\x0b\x20\
    \x01(\x0b2\x11.ResVersionConfigR\x10resVersionConfig\x12\x1e\n\nclient_m\
    d5\x18\xe2\x02\x20\x01(\tR\tclientMd5\x12-\n\x12client_silence_md5\x18\
    \x96\x06\x20\x01(\tR\x10clientSilenceMd5\x12&\n\x0ftotal_tick_time\x18P\
    \x20\x01(\x01R\rtotalTickTime\x12.\n\x13client_data_version\x18\x07\x20\
    \x01(\rR\x11clientDataVersion\x12=\n\x1bclient_silence_data_version\x18\
    \n\x20\x01(\rR\x18clientSilenceDataVersion\x123\n\x15client_version_suff\
    ix\x18\xc0\x05\x20\x01(\tR\x13clientVersionSuffix\x12.\n\x13is_use_abili\
    ty_hash\x18\xa8\t\x20\x01(\x08R\x10isUseAbilityHash\x12B\n\x1dclient_sil\
    ence_version_suffix\x18\xc4\x0e\x20\x01(\tR\x1aclientSilenceVersionSuffi\
    x\x12N\n\x10ability_hash_map\x18\xf3\x07\x20\x03(\x0b2#.PlayerLoginRsp.A\
    bilityHashMapEntryR\x0eabilityHashMap\x12\x20\n\x0bis_transfer\x18\xc4\
    \x0f\x20\x01(\x08R\nisTransfer\x122\n\x15target_home_owner_uid\x18\xb0\
    \x06\x20\x01(\rR\x12targetHomeOwnerUid\x120\n\x14is_data_need_relogin\
    \x18\xc9\x0f\x20\x01(\x08R\x11isDataNeedRelogin\x12+\n\x11ability_hash_c\
    ode\x18\xff\x03\x20\x01(\x05R\x0fabilityHashCode\x12K\n\x16short_ability\
    _hash_map\x18\xdd\n\x20\x03(\x0b2\x15.ShortAbilityHashPairR\x13shortAbil\
    ityHashMap\x12\x20\n\x0bFBFJPEPMAOF\x18\x0f\x20\x01(\x08R\x0bFBFJPEPMAOF\
    \x12\x1a\n\x08is_audit\x18\xcf\x02\x20\x01(\x08R\x07isAudit\x12\x11\n\
    \x03msg\x18\xd7!\x20\x01(\tR\x03msg\x12I\n\x17feature_block_info_list\
    \x18\xdb\x0c\x20\x03(\x0b2\x11.FeatureBlockInfoR\x14featureBlockInfoList\
    \x12!\n\x0bDNHHIMENOLD\x18\xdb\n\x20\x01(\x08R\x0bDNHHIMENOLD\x12!\n\x0b\
    PKKKINOCFMJ\x18\xd3\x01\x20\x01(\x08R\x0bPKKKINOCFMJ\x12\x19\n\x07retcod\
    e\x18\xab\x06\x20\x01(\x05R\x07retcode\x12\x1b\n\x08birthday\x18\x98\r\
    \x20\x01(\tR\x08birthday\x12!\n\x0bBOKKNHEOKPD\x18\xec\x04\x20\x01(\x08R\
    \x0bBOKKNHEOKPD\x12\x1e\n\ntarget_uid\x18\x8f\x07\x20\x01(\rR\ttargetUid\
    \x12H\n\x0eblock_info_map\x18\xd7\x0f\x20\x03(\x0b2!.PlayerLoginRsp.Bloc\
    kInfoMapEntryR\x0cblockInfoMap\x12!\n\x0bGOFGOCDJDND\x18\x99\x02\x20\x01\
    (\x08R\x0bGOFGOCDJDND\x12+\n\x11next_resource_url\x18\xda\x07\x20\x01(\t\
    R\x0fnextResourceUrl\x12\x20\n\x0bplayer_data\x18\x86\x01\x20\x01(\x0cR\
    \nplayerData\x12\x18\n\x07sc_info\x18\xa0\x03\x20\x01(\x0cR\x06scInfo\
    \x12\x1e\n\nlogin_rand\x18\xb7\x02\x20\x01(\x04R\tloginRand\x12!\n\x0bEN\
    NOCBNIHIK\x18\xea\t\x20\x01(\tR\x0bENNOCBNIHIK\x12/\n\x13player_data_ver\
    sion\x18\xd7\x08\x20\x01(\rR\x11playerDataVersion\x122\n\x0bECKNMCACJKG\
    \x18\xe5\x0f\x20\x01(\x0b2\x0f.StopServerInfoR\x0bECKNMCACJKG\x12I\n\x17\
    next_res_version_config\x18\xec\x08\x20\x01(\x0b2\x11.ResVersionConfigR\
    \x14nextResVersionConfig\x1aA\n\x13AbilityHashMapEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x05R\x05\
    value:\x028\x01\x1aK\n\x11BlockInfoMapEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\rR\x03key\x12\x20\n\x05value\x18\x02\x20\x01(\x0b2\n.BlockInfoR\
    \x05value:\x028\x01B\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::ResVersionConfig::file_descriptor().clone());
            deps.push(super::ShortAbilityHashPair::file_descriptor().clone());
            deps.push(super::FeatureBlockInfo::file_descriptor().clone());
            deps.push(super::StopServerInfo::file_descriptor().clone());
            deps.push(super::BlockInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PlayerLoginRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
