// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `H5ActivityInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:H5ActivityInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct H5ActivityInfo {
    // message fields
    // @@protoc_insertion_point(field:H5ActivityInfo.prefab_path)
    pub prefab_path: ::std::string::String,
    // @@protoc_insertion_point(field:H5ActivityInfo.url)
    pub url: ::std::string::String,
    // @@protoc_insertion_point(field:H5ActivityInfo.is_entrance_open)
    pub is_entrance_open: bool,
    // @@protoc_insertion_point(field:H5ActivityInfo.FMENOAFNGHO)
    pub FMENOAFNGHO: u32,
    // @@protoc_insertion_point(field:H5ActivityInfo.end_time)
    pub end_time: u32,
    // @@protoc_insertion_point(field:H5ActivityInfo.content_close_time)
    pub content_close_time: u32,
    // @@protoc_insertion_point(field:H5ActivityInfo.begin_time)
    pub begin_time: u32,
    // @@protoc_insertion_point(field:H5ActivityInfo.JELEFCPLEJB)
    pub JELEFCPLEJB: u32,
    // special fields
    // @@protoc_insertion_point(special_field:H5ActivityInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a H5ActivityInfo {
    fn default() -> &'a H5ActivityInfo {
        <H5ActivityInfo as ::protobuf::Message>::default_instance()
    }
}

impl H5ActivityInfo {
    pub fn new() -> H5ActivityInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prefab_path",
            |m: &H5ActivityInfo| { &m.prefab_path },
            |m: &mut H5ActivityInfo| { &mut m.prefab_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "url",
            |m: &H5ActivityInfo| { &m.url },
            |m: &mut H5ActivityInfo| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_entrance_open",
            |m: &H5ActivityInfo| { &m.is_entrance_open },
            |m: &mut H5ActivityInfo| { &mut m.is_entrance_open },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FMENOAFNGHO",
            |m: &H5ActivityInfo| { &m.FMENOAFNGHO },
            |m: &mut H5ActivityInfo| { &mut m.FMENOAFNGHO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_time",
            |m: &H5ActivityInfo| { &m.end_time },
            |m: &mut H5ActivityInfo| { &mut m.end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content_close_time",
            |m: &H5ActivityInfo| { &m.content_close_time },
            |m: &mut H5ActivityInfo| { &mut m.content_close_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "begin_time",
            |m: &H5ActivityInfo| { &m.begin_time },
            |m: &mut H5ActivityInfo| { &mut m.begin_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JELEFCPLEJB",
            |m: &H5ActivityInfo| { &m.JELEFCPLEJB },
            |m: &mut H5ActivityInfo| { &mut m.JELEFCPLEJB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<H5ActivityInfo>(
            "H5ActivityInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for H5ActivityInfo {
    const NAME: &'static str = "H5ActivityInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                98 => {
                    self.prefab_path = is.read_string()?;
                },
                66 => {
                    self.url = is.read_string()?;
                },
                8 => {
                    self.is_entrance_open = is.read_bool()?;
                },
                104 => {
                    self.FMENOAFNGHO = is.read_uint32()?;
                },
                24 => {
                    self.end_time = is.read_uint32()?;
                },
                32 => {
                    self.content_close_time = is.read_uint32()?;
                },
                120 => {
                    self.begin_time = is.read_uint32()?;
                },
                112 => {
                    self.JELEFCPLEJB = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.prefab_path.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.prefab_path);
        }
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.url);
        }
        if self.is_entrance_open != false {
            my_size += 1 + 1;
        }
        if self.FMENOAFNGHO != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.FMENOAFNGHO);
        }
        if self.end_time != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.end_time);
        }
        if self.content_close_time != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.content_close_time);
        }
        if self.begin_time != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.begin_time);
        }
        if self.JELEFCPLEJB != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.JELEFCPLEJB);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.prefab_path.is_empty() {
            os.write_string(12, &self.prefab_path)?;
        }
        if !self.url.is_empty() {
            os.write_string(8, &self.url)?;
        }
        if self.is_entrance_open != false {
            os.write_bool(1, self.is_entrance_open)?;
        }
        if self.FMENOAFNGHO != 0 {
            os.write_uint32(13, self.FMENOAFNGHO)?;
        }
        if self.end_time != 0 {
            os.write_uint32(3, self.end_time)?;
        }
        if self.content_close_time != 0 {
            os.write_uint32(4, self.content_close_time)?;
        }
        if self.begin_time != 0 {
            os.write_uint32(15, self.begin_time)?;
        }
        if self.JELEFCPLEJB != 0 {
            os.write_uint32(14, self.JELEFCPLEJB)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> H5ActivityInfo {
        H5ActivityInfo::new()
    }

    fn clear(&mut self) {
        self.prefab_path.clear();
        self.url.clear();
        self.is_entrance_open = false;
        self.FMENOAFNGHO = 0;
        self.end_time = 0;
        self.content_close_time = 0;
        self.begin_time = 0;
        self.JELEFCPLEJB = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static H5ActivityInfo {
        static instance: H5ActivityInfo = H5ActivityInfo {
            prefab_path: ::std::string::String::new(),
            url: ::std::string::String::new(),
            is_entrance_open: false,
            FMENOAFNGHO: 0,
            end_time: 0,
            content_close_time: 0,
            begin_time: 0,
            JELEFCPLEJB: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for H5ActivityInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("H5ActivityInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for H5ActivityInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for H5ActivityInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14H5ActivityInfo.proto\"\x99\x02\n\x0eH5ActivityInfo\x12\x1f\n\x0bpr\
    efab_path\x18\x0c\x20\x01(\tR\nprefabPath\x12\x10\n\x03url\x18\x08\x20\
    \x01(\tR\x03url\x12(\n\x10is_entrance_open\x18\x01\x20\x01(\x08R\x0eisEn\
    tranceOpen\x12\x20\n\x0bFMENOAFNGHO\x18\r\x20\x01(\rR\x0bFMENOAFNGHO\x12\
    \x19\n\x08end_time\x18\x03\x20\x01(\rR\x07endTime\x12,\n\x12content_clos\
    e_time\x18\x04\x20\x01(\rR\x10contentCloseTime\x12\x1d\n\nbegin_time\x18\
    \x0f\x20\x01(\rR\tbeginTime\x12\x20\n\x0bJELEFCPLEJB\x18\x0e\x20\x01(\rR\
    \x0bJELEFCPLEJBB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(H5ActivityInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
