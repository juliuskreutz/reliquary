// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `QuickUseWidgetRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:QuickUseWidgetRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QuickUseWidgetRsp {
    // message fields
    // @@protoc_insertion_point(field:QuickUseWidgetRsp.retcode)
    pub retcode: i32,
    // @@protoc_insertion_point(field:QuickUseWidgetRsp.material_id)
    pub material_id: u32,
    // message oneof groups
    pub param: ::std::option::Option<quick_use_widget_rsp::Param>,
    // special fields
    // @@protoc_insertion_point(special_field:QuickUseWidgetRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QuickUseWidgetRsp {
    fn default() -> &'a QuickUseWidgetRsp {
        <QuickUseWidgetRsp as ::protobuf::Message>::default_instance()
    }
}

impl QuickUseWidgetRsp {
    pub fn new() -> QuickUseWidgetRsp {
        ::std::default::Default::default()
    }

    // .OneoffGatherPointDetectorData detector_data = 5;

    pub fn detector_data(&self) -> &super::OneoffGatherPointDetectorData::OneoffGatherPointDetectorData {
        match self.param {
            ::std::option::Option::Some(quick_use_widget_rsp::Param::DetectorData(ref v)) => v,
            _ => <super::OneoffGatherPointDetectorData::OneoffGatherPointDetectorData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_detector_data(&mut self) {
        self.param = ::std::option::Option::None;
    }

    pub fn has_detector_data(&self) -> bool {
        match self.param {
            ::std::option::Option::Some(quick_use_widget_rsp::Param::DetectorData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_detector_data(&mut self, v: super::OneoffGatherPointDetectorData::OneoffGatherPointDetectorData) {
        self.param = ::std::option::Option::Some(quick_use_widget_rsp::Param::DetectorData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_detector_data(&mut self) -> &mut super::OneoffGatherPointDetectorData::OneoffGatherPointDetectorData {
        if let ::std::option::Option::Some(quick_use_widget_rsp::Param::DetectorData(_)) = self.param {
        } else {
            self.param = ::std::option::Option::Some(quick_use_widget_rsp::Param::DetectorData(super::OneoffGatherPointDetectorData::OneoffGatherPointDetectorData::new()));
        }
        match self.param {
            ::std::option::Option::Some(quick_use_widget_rsp::Param::DetectorData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_detector_data(&mut self) -> super::OneoffGatherPointDetectorData::OneoffGatherPointDetectorData {
        if self.has_detector_data() {
            match self.param.take() {
                ::std::option::Option::Some(quick_use_widget_rsp::Param::DetectorData(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OneoffGatherPointDetectorData::OneoffGatherPointDetectorData::new()
        }
    }

    // .ClientCollectorData client_collector_data = 15;

    pub fn client_collector_data(&self) -> &super::ClientCollectorData::ClientCollectorData {
        match self.param {
            ::std::option::Option::Some(quick_use_widget_rsp::Param::ClientCollectorData(ref v)) => v,
            _ => <super::ClientCollectorData::ClientCollectorData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_client_collector_data(&mut self) {
        self.param = ::std::option::Option::None;
    }

    pub fn has_client_collector_data(&self) -> bool {
        match self.param {
            ::std::option::Option::Some(quick_use_widget_rsp::Param::ClientCollectorData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_client_collector_data(&mut self, v: super::ClientCollectorData::ClientCollectorData) {
        self.param = ::std::option::Option::Some(quick_use_widget_rsp::Param::ClientCollectorData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_client_collector_data(&mut self) -> &mut super::ClientCollectorData::ClientCollectorData {
        if let ::std::option::Option::Some(quick_use_widget_rsp::Param::ClientCollectorData(_)) = self.param {
        } else {
            self.param = ::std::option::Option::Some(quick_use_widget_rsp::Param::ClientCollectorData(super::ClientCollectorData::ClientCollectorData::new()));
        }
        match self.param {
            ::std::option::Option::Some(quick_use_widget_rsp::Param::ClientCollectorData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_client_collector_data(&mut self) -> super::ClientCollectorData::ClientCollectorData {
        if self.has_client_collector_data() {
            match self.param.take() {
                ::std::option::Option::Some(quick_use_widget_rsp::Param::ClientCollectorData(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ClientCollectorData::ClientCollectorData::new()
        }
    }

    // .SkyCrystalDetectorQuickUseResult sky_crystal_detector_quick_use_result = 207137;

    pub fn sky_crystal_detector_quick_use_result(&self) -> &super::SkyCrystalDetectorQuickUseResult::SkyCrystalDetectorQuickUseResult {
        match self.param {
            ::std::option::Option::Some(quick_use_widget_rsp::Param::SkyCrystalDetectorQuickUseResult(ref v)) => v,
            _ => <super::SkyCrystalDetectorQuickUseResult::SkyCrystalDetectorQuickUseResult as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sky_crystal_detector_quick_use_result(&mut self) {
        self.param = ::std::option::Option::None;
    }

    pub fn has_sky_crystal_detector_quick_use_result(&self) -> bool {
        match self.param {
            ::std::option::Option::Some(quick_use_widget_rsp::Param::SkyCrystalDetectorQuickUseResult(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sky_crystal_detector_quick_use_result(&mut self, v: super::SkyCrystalDetectorQuickUseResult::SkyCrystalDetectorQuickUseResult) {
        self.param = ::std::option::Option::Some(quick_use_widget_rsp::Param::SkyCrystalDetectorQuickUseResult(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sky_crystal_detector_quick_use_result(&mut self) -> &mut super::SkyCrystalDetectorQuickUseResult::SkyCrystalDetectorQuickUseResult {
        if let ::std::option::Option::Some(quick_use_widget_rsp::Param::SkyCrystalDetectorQuickUseResult(_)) = self.param {
        } else {
            self.param = ::std::option::Option::Some(quick_use_widget_rsp::Param::SkyCrystalDetectorQuickUseResult(super::SkyCrystalDetectorQuickUseResult::SkyCrystalDetectorQuickUseResult::new()));
        }
        match self.param {
            ::std::option::Option::Some(quick_use_widget_rsp::Param::SkyCrystalDetectorQuickUseResult(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sky_crystal_detector_quick_use_result(&mut self) -> super::SkyCrystalDetectorQuickUseResult::SkyCrystalDetectorQuickUseResult {
        if self.has_sky_crystal_detector_quick_use_result() {
            match self.param.take() {
                ::std::option::Option::Some(quick_use_widget_rsp::Param::SkyCrystalDetectorQuickUseResult(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SkyCrystalDetectorQuickUseResult::SkyCrystalDetectorQuickUseResult::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &QuickUseWidgetRsp| { &m.retcode },
            |m: &mut QuickUseWidgetRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "material_id",
            |m: &QuickUseWidgetRsp| { &m.material_id },
            |m: &mut QuickUseWidgetRsp| { &mut m.material_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OneoffGatherPointDetectorData::OneoffGatherPointDetectorData>(
            "detector_data",
            QuickUseWidgetRsp::has_detector_data,
            QuickUseWidgetRsp::detector_data,
            QuickUseWidgetRsp::mut_detector_data,
            QuickUseWidgetRsp::set_detector_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ClientCollectorData::ClientCollectorData>(
            "client_collector_data",
            QuickUseWidgetRsp::has_client_collector_data,
            QuickUseWidgetRsp::client_collector_data,
            QuickUseWidgetRsp::mut_client_collector_data,
            QuickUseWidgetRsp::set_client_collector_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SkyCrystalDetectorQuickUseResult::SkyCrystalDetectorQuickUseResult>(
            "sky_crystal_detector_quick_use_result",
            QuickUseWidgetRsp::has_sky_crystal_detector_quick_use_result,
            QuickUseWidgetRsp::sky_crystal_detector_quick_use_result,
            QuickUseWidgetRsp::mut_sky_crystal_detector_quick_use_result,
            QuickUseWidgetRsp::set_sky_crystal_detector_quick_use_result,
        ));
        oneofs.push(quick_use_widget_rsp::Param::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QuickUseWidgetRsp>(
            "QuickUseWidgetRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QuickUseWidgetRsp {
    const NAME: &'static str = "QuickUseWidgetRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                88 => {
                    self.retcode = is.read_int32()?;
                },
                48 => {
                    self.material_id = is.read_uint32()?;
                },
                42 => {
                    self.param = ::std::option::Option::Some(quick_use_widget_rsp::Param::DetectorData(is.read_message()?));
                },
                122 => {
                    self.param = ::std::option::Option::Some(quick_use_widget_rsp::Param::ClientCollectorData(is.read_message()?));
                },
                1657098 => {
                    self.param = ::std::option::Option::Some(quick_use_widget_rsp::Param::SkyCrystalDetectorQuickUseResult(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::int32_size(11, self.retcode);
        }
        if self.material_id != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.material_id);
        }
        if let ::std::option::Option::Some(ref v) = self.param {
            match v {
                &quick_use_widget_rsp::Param::DetectorData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &quick_use_widget_rsp::Param::ClientCollectorData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &quick_use_widget_rsp::Param::SkyCrystalDetectorQuickUseResult(ref v) => {
                    let len = v.compute_size();
                    my_size += 3 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_int32(11, self.retcode)?;
        }
        if self.material_id != 0 {
            os.write_uint32(6, self.material_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.param {
            match v {
                &quick_use_widget_rsp::Param::DetectorData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &quick_use_widget_rsp::Param::ClientCollectorData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &quick_use_widget_rsp::Param::SkyCrystalDetectorQuickUseResult(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(207137, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QuickUseWidgetRsp {
        QuickUseWidgetRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.material_id = 0;
        self.param = ::std::option::Option::None;
        self.param = ::std::option::Option::None;
        self.param = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QuickUseWidgetRsp {
        static instance: QuickUseWidgetRsp = QuickUseWidgetRsp {
            retcode: 0,
            material_id: 0,
            param: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QuickUseWidgetRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QuickUseWidgetRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QuickUseWidgetRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuickUseWidgetRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `QuickUseWidgetRsp`
pub mod quick_use_widget_rsp {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:QuickUseWidgetRsp.param)
    pub enum Param {
        // @@protoc_insertion_point(oneof_field:QuickUseWidgetRsp.detector_data)
        DetectorData(super::super::OneoffGatherPointDetectorData::OneoffGatherPointDetectorData),
        // @@protoc_insertion_point(oneof_field:QuickUseWidgetRsp.client_collector_data)
        ClientCollectorData(super::super::ClientCollectorData::ClientCollectorData),
        // @@protoc_insertion_point(oneof_field:QuickUseWidgetRsp.sky_crystal_detector_quick_use_result)
        SkyCrystalDetectorQuickUseResult(super::super::SkyCrystalDetectorQuickUseResult::SkyCrystalDetectorQuickUseResult),
    }

    impl ::protobuf::Oneof for Param {
    }

    impl ::protobuf::OneofFull for Param {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::QuickUseWidgetRsp as ::protobuf::MessageFull>::descriptor().oneof_by_name("param").unwrap()).clone()
        }
    }

    impl Param {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Param>("param")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17QuickUseWidgetRsp.proto\x1a#OneoffGatherPointDetectorData.proto\
    \x1a\x19ClientCollectorData.proto\x1a&SkyCrystalDetectorQuickUseResult.p\
    roto\"\xe2\x02\n\x11QuickUseWidgetRsp\x12\x18\n\x07retcode\x18\x0b\x20\
    \x01(\x05R\x07retcode\x12\x1f\n\x0bmaterial_id\x18\x06\x20\x01(\rR\nmate\
    rialId\x12E\n\rdetector_data\x18\x05\x20\x01(\x0b2\x1e.OneoffGatherPoint\
    DetectorDataH\0R\x0cdetectorData\x12J\n\x15client_collector_data\x18\x0f\
    \x20\x01(\x0b2\x14.ClientCollectorDataH\0R\x13clientCollectorData\x12v\n\
    %sky_crystal_detector_quick_use_result\x18\xa1\xd2\x0c\x20\x01(\x0b2!.Sk\
    yCrystalDetectorQuickUseResultH\0R\x20skyCrystalDetectorQuickUseResultB\
    \x07\n\x05paramB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::OneoffGatherPointDetectorData::file_descriptor().clone());
            deps.push(super::ClientCollectorData::file_descriptor().clone());
            deps.push(super::SkyCrystalDetectorQuickUseResult::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(QuickUseWidgetRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
