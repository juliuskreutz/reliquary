// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetOnlinePlayerInfoReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GetOnlinePlayerInfoReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetOnlinePlayerInfoReq {
    // message fields
    // @@protoc_insertion_point(field:GetOnlinePlayerInfoReq.is_online_id)
    pub is_online_id: bool,
    // message oneof groups
    pub player_id: ::std::option::Option<get_online_player_info_req::Player_id>,
    // special fields
    // @@protoc_insertion_point(special_field:GetOnlinePlayerInfoReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetOnlinePlayerInfoReq {
    fn default() -> &'a GetOnlinePlayerInfoReq {
        <GetOnlinePlayerInfoReq as ::protobuf::Message>::default_instance()
    }
}

impl GetOnlinePlayerInfoReq {
    pub fn new() -> GetOnlinePlayerInfoReq {
        ::std::default::Default::default()
    }

    // uint32 target_uid = 3;

    pub fn target_uid(&self) -> u32 {
        match self.player_id {
            ::std::option::Option::Some(get_online_player_info_req::Player_id::TargetUid(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_target_uid(&mut self) {
        self.player_id = ::std::option::Option::None;
    }

    pub fn has_target_uid(&self) -> bool {
        match self.player_id {
            ::std::option::Option::Some(get_online_player_info_req::Player_id::TargetUid(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_target_uid(&mut self, v: u32) {
        self.player_id = ::std::option::Option::Some(get_online_player_info_req::Player_id::TargetUid(v))
    }

    // string online_id = 11;

    pub fn online_id(&self) -> &str {
        match self.player_id {
            ::std::option::Option::Some(get_online_player_info_req::Player_id::OnlineId(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_online_id(&mut self) {
        self.player_id = ::std::option::Option::None;
    }

    pub fn has_online_id(&self) -> bool {
        match self.player_id {
            ::std::option::Option::Some(get_online_player_info_req::Player_id::OnlineId(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_online_id(&mut self, v: ::std::string::String) {
        self.player_id = ::std::option::Option::Some(get_online_player_info_req::Player_id::OnlineId(v))
    }

    // Mutable pointer to the field.
    pub fn mut_online_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(get_online_player_info_req::Player_id::OnlineId(_)) = self.player_id {
        } else {
            self.player_id = ::std::option::Option::Some(get_online_player_info_req::Player_id::OnlineId(::std::string::String::new()));
        }
        match self.player_id {
            ::std::option::Option::Some(get_online_player_info_req::Player_id::OnlineId(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_online_id(&mut self) -> ::std::string::String {
        if self.has_online_id() {
            match self.player_id.take() {
                ::std::option::Option::Some(get_online_player_info_req::Player_id::OnlineId(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string psn_id = 4;

    pub fn psn_id(&self) -> &str {
        match self.player_id {
            ::std::option::Option::Some(get_online_player_info_req::Player_id::PsnId(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_psn_id(&mut self) {
        self.player_id = ::std::option::Option::None;
    }

    pub fn has_psn_id(&self) -> bool {
        match self.player_id {
            ::std::option::Option::Some(get_online_player_info_req::Player_id::PsnId(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_psn_id(&mut self, v: ::std::string::String) {
        self.player_id = ::std::option::Option::Some(get_online_player_info_req::Player_id::PsnId(v))
    }

    // Mutable pointer to the field.
    pub fn mut_psn_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(get_online_player_info_req::Player_id::PsnId(_)) = self.player_id {
        } else {
            self.player_id = ::std::option::Option::Some(get_online_player_info_req::Player_id::PsnId(::std::string::String::new()));
        }
        match self.player_id {
            ::std::option::Option::Some(get_online_player_info_req::Player_id::PsnId(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_psn_id(&mut self) -> ::std::string::String {
        if self.has_psn_id() {
            match self.player_id.take() {
                ::std::option::Option::Some(get_online_player_info_req::Player_id::PsnId(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_online_id",
            |m: &GetOnlinePlayerInfoReq| { &m.is_online_id },
            |m: &mut GetOnlinePlayerInfoReq| { &mut m.is_online_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "target_uid",
            GetOnlinePlayerInfoReq::has_target_uid,
            GetOnlinePlayerInfoReq::target_uid,
            GetOnlinePlayerInfoReq::set_target_uid,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "online_id",
            GetOnlinePlayerInfoReq::has_online_id,
            GetOnlinePlayerInfoReq::online_id,
            GetOnlinePlayerInfoReq::set_online_id,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "psn_id",
            GetOnlinePlayerInfoReq::has_psn_id,
            GetOnlinePlayerInfoReq::psn_id,
            GetOnlinePlayerInfoReq::set_psn_id,
        ));
        oneofs.push(get_online_player_info_req::Player_id::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetOnlinePlayerInfoReq>(
            "GetOnlinePlayerInfoReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetOnlinePlayerInfoReq {
    const NAME: &'static str = "GetOnlinePlayerInfoReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                56 => {
                    self.is_online_id = is.read_bool()?;
                },
                24 => {
                    self.player_id = ::std::option::Option::Some(get_online_player_info_req::Player_id::TargetUid(is.read_uint32()?));
                },
                90 => {
                    self.player_id = ::std::option::Option::Some(get_online_player_info_req::Player_id::OnlineId(is.read_string()?));
                },
                34 => {
                    self.player_id = ::std::option::Option::Some(get_online_player_info_req::Player_id::PsnId(is.read_string()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.is_online_id != false {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.player_id {
            match v {
                &get_online_player_info_req::Player_id::TargetUid(v) => {
                    my_size += ::protobuf::rt::uint32_size(3, v);
                },
                &get_online_player_info_req::Player_id::OnlineId(ref v) => {
                    my_size += ::protobuf::rt::string_size(11, &v);
                },
                &get_online_player_info_req::Player_id::PsnId(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.is_online_id != false {
            os.write_bool(7, self.is_online_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.player_id {
            match v {
                &get_online_player_info_req::Player_id::TargetUid(v) => {
                    os.write_uint32(3, v)?;
                },
                &get_online_player_info_req::Player_id::OnlineId(ref v) => {
                    os.write_string(11, v)?;
                },
                &get_online_player_info_req::Player_id::PsnId(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetOnlinePlayerInfoReq {
        GetOnlinePlayerInfoReq::new()
    }

    fn clear(&mut self) {
        self.is_online_id = false;
        self.player_id = ::std::option::Option::None;
        self.player_id = ::std::option::Option::None;
        self.player_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetOnlinePlayerInfoReq {
        static instance: GetOnlinePlayerInfoReq = GetOnlinePlayerInfoReq {
            is_online_id: false,
            player_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetOnlinePlayerInfoReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetOnlinePlayerInfoReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetOnlinePlayerInfoReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetOnlinePlayerInfoReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GetOnlinePlayerInfoReq`
pub mod get_online_player_info_req {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:GetOnlinePlayerInfoReq.player_id)
    pub enum Player_id {
        // @@protoc_insertion_point(oneof_field:GetOnlinePlayerInfoReq.target_uid)
        TargetUid(u32),
        // @@protoc_insertion_point(oneof_field:GetOnlinePlayerInfoReq.online_id)
        OnlineId(::std::string::String),
        // @@protoc_insertion_point(oneof_field:GetOnlinePlayerInfoReq.psn_id)
        PsnId(::std::string::String),
    }

    impl ::protobuf::Oneof for Player_id {
    }

    impl ::protobuf::OneofFull for Player_id {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GetOnlinePlayerInfoReq as ::protobuf::MessageFull>::descriptor().oneof_by_name("player_id").unwrap()).clone()
        }
    }

    impl Player_id {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Player_id>("player_id")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cGetOnlinePlayerInfoReq.proto\"\xa0\x01\n\x16GetOnlinePlayerInfoReq\
    \x12\x20\n\x0cis_online_id\x18\x07\x20\x01(\x08R\nisOnlineId\x12\x1f\n\n\
    target_uid\x18\x03\x20\x01(\rH\0R\ttargetUid\x12\x1d\n\tonline_id\x18\
    \x0b\x20\x01(\tH\0R\x08onlineId\x12\x17\n\x06psn_id\x18\x04\x20\x01(\tH\
    \0R\x05psnIdB\x0b\n\tplayer_idB\x1b\n\x19emu.grasscutter.net.protob\x06p\
    roto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetOnlinePlayerInfoReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
