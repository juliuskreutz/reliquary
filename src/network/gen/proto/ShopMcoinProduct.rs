// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ShopMcoinProduct.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ShopMcoinProduct)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ShopMcoinProduct {
    // message fields
    // @@protoc_insertion_point(field:ShopMcoinProduct.product_id)
    pub product_id: ::std::string::String,
    // @@protoc_insertion_point(field:ShopMcoinProduct.price_tier)
    pub price_tier: ::std::string::String,
    // @@protoc_insertion_point(field:ShopMcoinProduct.mcoin_base)
    pub mcoin_base: u32,
    // @@protoc_insertion_point(field:ShopMcoinProduct.mcoin_non_first)
    pub mcoin_non_first: u32,
    // @@protoc_insertion_point(field:ShopMcoinProduct.mcoin_first)
    pub mcoin_first: u32,
    // @@protoc_insertion_point(field:ShopMcoinProduct.bought_num)
    pub bought_num: u32,
    // @@protoc_insertion_point(field:ShopMcoinProduct.is_audit)
    pub is_audit: bool,
    // special fields
    // @@protoc_insertion_point(special_field:ShopMcoinProduct.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ShopMcoinProduct {
    fn default() -> &'a ShopMcoinProduct {
        <ShopMcoinProduct as ::protobuf::Message>::default_instance()
    }
}

impl ShopMcoinProduct {
    pub fn new() -> ShopMcoinProduct {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "product_id",
            |m: &ShopMcoinProduct| { &m.product_id },
            |m: &mut ShopMcoinProduct| { &mut m.product_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price_tier",
            |m: &ShopMcoinProduct| { &m.price_tier },
            |m: &mut ShopMcoinProduct| { &mut m.price_tier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mcoin_base",
            |m: &ShopMcoinProduct| { &m.mcoin_base },
            |m: &mut ShopMcoinProduct| { &mut m.mcoin_base },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mcoin_non_first",
            |m: &ShopMcoinProduct| { &m.mcoin_non_first },
            |m: &mut ShopMcoinProduct| { &mut m.mcoin_non_first },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mcoin_first",
            |m: &ShopMcoinProduct| { &m.mcoin_first },
            |m: &mut ShopMcoinProduct| { &mut m.mcoin_first },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bought_num",
            |m: &ShopMcoinProduct| { &m.bought_num },
            |m: &mut ShopMcoinProduct| { &mut m.bought_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_audit",
            |m: &ShopMcoinProduct| { &m.is_audit },
            |m: &mut ShopMcoinProduct| { &mut m.is_audit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ShopMcoinProduct>(
            "ShopMcoinProduct",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ShopMcoinProduct {
    const NAME: &'static str = "ShopMcoinProduct";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.product_id = is.read_string()?;
                },
                18 => {
                    self.price_tier = is.read_string()?;
                },
                24 => {
                    self.mcoin_base = is.read_uint32()?;
                },
                32 => {
                    self.mcoin_non_first = is.read_uint32()?;
                },
                40 => {
                    self.mcoin_first = is.read_uint32()?;
                },
                48 => {
                    self.bought_num = is.read_uint32()?;
                },
                56 => {
                    self.is_audit = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.product_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.product_id);
        }
        if !self.price_tier.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.price_tier);
        }
        if self.mcoin_base != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.mcoin_base);
        }
        if self.mcoin_non_first != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.mcoin_non_first);
        }
        if self.mcoin_first != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.mcoin_first);
        }
        if self.bought_num != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.bought_num);
        }
        if self.is_audit != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.product_id.is_empty() {
            os.write_string(1, &self.product_id)?;
        }
        if !self.price_tier.is_empty() {
            os.write_string(2, &self.price_tier)?;
        }
        if self.mcoin_base != 0 {
            os.write_uint32(3, self.mcoin_base)?;
        }
        if self.mcoin_non_first != 0 {
            os.write_uint32(4, self.mcoin_non_first)?;
        }
        if self.mcoin_first != 0 {
            os.write_uint32(5, self.mcoin_first)?;
        }
        if self.bought_num != 0 {
            os.write_uint32(6, self.bought_num)?;
        }
        if self.is_audit != false {
            os.write_bool(7, self.is_audit)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ShopMcoinProduct {
        ShopMcoinProduct::new()
    }

    fn clear(&mut self) {
        self.product_id.clear();
        self.price_tier.clear();
        self.mcoin_base = 0;
        self.mcoin_non_first = 0;
        self.mcoin_first = 0;
        self.bought_num = 0;
        self.is_audit = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ShopMcoinProduct {
        static instance: ShopMcoinProduct = ShopMcoinProduct {
            product_id: ::std::string::String::new(),
            price_tier: ::std::string::String::new(),
            mcoin_base: 0,
            mcoin_non_first: 0,
            mcoin_first: 0,
            bought_num: 0,
            is_audit: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ShopMcoinProduct {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ShopMcoinProduct").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ShopMcoinProduct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShopMcoinProduct {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16ShopMcoinProduct.proto\"\xf2\x01\n\x10ShopMcoinProduct\x12\x1d\n\n\
    product_id\x18\x01\x20\x01(\tR\tproductId\x12\x1d\n\nprice_tier\x18\x02\
    \x20\x01(\tR\tpriceTier\x12\x1d\n\nmcoin_base\x18\x03\x20\x01(\rR\tmcoin\
    Base\x12&\n\x0fmcoin_non_first\x18\x04\x20\x01(\rR\rmcoinNonFirst\x12\
    \x1f\n\x0bmcoin_first\x18\x05\x20\x01(\rR\nmcoinFirst\x12\x1d\n\nbought_\
    num\x18\x06\x20\x01(\rR\tboughtNum\x12\x19\n\x08is_audit\x18\x07\x20\x01\
    (\x08R\x07isAuditB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ShopMcoinProduct::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
