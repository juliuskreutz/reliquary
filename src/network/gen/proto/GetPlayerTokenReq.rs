// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetPlayerTokenReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GetPlayerTokenReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayerTokenReq {
    // message fields
    // @@protoc_insertion_point(field:GetPlayerTokenReq.client_rand_key)
    pub client_rand_key: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.account_uid)
    pub account_uid: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.key_id)
    pub key_id: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.account_token)
    pub account_token: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.platform_type)
    pub platform_type: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.OGNFFAEKDBO)
    pub OGNFFAEKDBO: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.account_type)
    pub account_type: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.channel_id)
    pub channel_id: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.psn_id)
    pub psn_id: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.online_id)
    pub online_id: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.client_ip_str)
    pub client_ip_str: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.sub_channel_id)
    pub sub_channel_id: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.cloudClientIp)
    pub cloudClientIp: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.birthday)
    pub birthday: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.country_code)
    pub country_code: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenReq.is_guest)
    pub is_guest: bool,
    // special fields
    // @@protoc_insertion_point(special_field:GetPlayerTokenReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayerTokenReq {
    fn default() -> &'a GetPlayerTokenReq {
        <GetPlayerTokenReq as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayerTokenReq {
    pub fn new() -> GetPlayerTokenReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(17);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_rand_key",
            |m: &GetPlayerTokenReq| { &m.client_rand_key },
            |m: &mut GetPlayerTokenReq| { &mut m.client_rand_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "account_uid",
            |m: &GetPlayerTokenReq| { &m.account_uid },
            |m: &mut GetPlayerTokenReq| { &mut m.account_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key_id",
            |m: &GetPlayerTokenReq| { &m.key_id },
            |m: &mut GetPlayerTokenReq| { &mut m.key_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "account_token",
            |m: &GetPlayerTokenReq| { &m.account_token },
            |m: &mut GetPlayerTokenReq| { &mut m.account_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "platform_type",
            |m: &GetPlayerTokenReq| { &m.platform_type },
            |m: &mut GetPlayerTokenReq| { &mut m.platform_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OGNFFAEKDBO",
            |m: &GetPlayerTokenReq| { &m.OGNFFAEKDBO },
            |m: &mut GetPlayerTokenReq| { &mut m.OGNFFAEKDBO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "account_type",
            |m: &GetPlayerTokenReq| { &m.account_type },
            |m: &mut GetPlayerTokenReq| { &mut m.account_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_id",
            |m: &GetPlayerTokenReq| { &m.channel_id },
            |m: &mut GetPlayerTokenReq| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "psn_id",
            |m: &GetPlayerTokenReq| { &m.psn_id },
            |m: &mut GetPlayerTokenReq| { &mut m.psn_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "online_id",
            |m: &GetPlayerTokenReq| { &m.online_id },
            |m: &mut GetPlayerTokenReq| { &mut m.online_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_ip_str",
            |m: &GetPlayerTokenReq| { &m.client_ip_str },
            |m: &mut GetPlayerTokenReq| { &mut m.client_ip_str },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sub_channel_id",
            |m: &GetPlayerTokenReq| { &m.sub_channel_id },
            |m: &mut GetPlayerTokenReq| { &mut m.sub_channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cloudClientIp",
            |m: &GetPlayerTokenReq| { &m.cloudClientIp },
            |m: &mut GetPlayerTokenReq| { &mut m.cloudClientIp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "birthday",
            |m: &GetPlayerTokenReq| { &m.birthday },
            |m: &mut GetPlayerTokenReq| { &mut m.birthday },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &GetPlayerTokenReq| { &m.uid },
            |m: &mut GetPlayerTokenReq| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "country_code",
            |m: &GetPlayerTokenReq| { &m.country_code },
            |m: &mut GetPlayerTokenReq| { &mut m.country_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_guest",
            |m: &GetPlayerTokenReq| { &m.is_guest },
            |m: &mut GetPlayerTokenReq| { &mut m.is_guest },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPlayerTokenReq>(
            "GetPlayerTokenReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPlayerTokenReq {
    const NAME: &'static str = "GetPlayerTokenReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                1634 => {
                    self.client_rand_key = is.read_string()?;
                },
                82 => {
                    self.account_uid = is.read_string()?;
                },
                1760 => {
                    self.key_id = is.read_uint32()?;
                },
                122 => {
                    self.account_token = is.read_string()?;
                },
                88 => {
                    self.platform_type = is.read_uint32()?;
                },
                12760 => {
                    self.OGNFFAEKDBO = is.read_uint32()?;
                },
                328 => {
                    self.account_type = is.read_uint32()?;
                },
                10488 => {
                    self.channel_id = is.read_uint32()?;
                },
                98 => {
                    self.psn_id = is.read_string()?;
                },
                10 => {
                    self.online_id = is.read_string()?;
                },
                114 => {
                    self.client_ip_str = is.read_string()?;
                },
                56 => {
                    self.sub_channel_id = is.read_uint32()?;
                },
                1416 => {
                    self.cloudClientIp = is.read_uint32()?;
                },
                6626 => {
                    self.birthday = is.read_string()?;
                },
                1048 => {
                    self.uid = is.read_uint32()?;
                },
                1210 => {
                    self.country_code = is.read_string()?;
                },
                48 => {
                    self.is_guest = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.client_rand_key.is_empty() {
            my_size += ::protobuf::rt::string_size(204, &self.client_rand_key);
        }
        if !self.account_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.account_uid);
        }
        if self.key_id != 0 {
            my_size += ::protobuf::rt::uint32_size(220, self.key_id);
        }
        if !self.account_token.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.account_token);
        }
        if self.platform_type != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.platform_type);
        }
        if self.OGNFFAEKDBO != 0 {
            my_size += ::protobuf::rt::uint32_size(1595, self.OGNFFAEKDBO);
        }
        if self.account_type != 0 {
            my_size += ::protobuf::rt::uint32_size(41, self.account_type);
        }
        if self.channel_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1311, self.channel_id);
        }
        if !self.psn_id.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.psn_id);
        }
        if !self.online_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.online_id);
        }
        if !self.client_ip_str.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.client_ip_str);
        }
        if self.sub_channel_id != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.sub_channel_id);
        }
        if self.cloudClientIp != 0 {
            my_size += ::protobuf::rt::uint32_size(177, self.cloudClientIp);
        }
        if !self.birthday.is_empty() {
            my_size += ::protobuf::rt::string_size(828, &self.birthday);
        }
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(131, self.uid);
        }
        if !self.country_code.is_empty() {
            my_size += ::protobuf::rt::string_size(151, &self.country_code);
        }
        if self.is_guest != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.client_rand_key.is_empty() {
            os.write_string(204, &self.client_rand_key)?;
        }
        if !self.account_uid.is_empty() {
            os.write_string(10, &self.account_uid)?;
        }
        if self.key_id != 0 {
            os.write_uint32(220, self.key_id)?;
        }
        if !self.account_token.is_empty() {
            os.write_string(15, &self.account_token)?;
        }
        if self.platform_type != 0 {
            os.write_uint32(11, self.platform_type)?;
        }
        if self.OGNFFAEKDBO != 0 {
            os.write_uint32(1595, self.OGNFFAEKDBO)?;
        }
        if self.account_type != 0 {
            os.write_uint32(41, self.account_type)?;
        }
        if self.channel_id != 0 {
            os.write_uint32(1311, self.channel_id)?;
        }
        if !self.psn_id.is_empty() {
            os.write_string(12, &self.psn_id)?;
        }
        if !self.online_id.is_empty() {
            os.write_string(1, &self.online_id)?;
        }
        if !self.client_ip_str.is_empty() {
            os.write_string(14, &self.client_ip_str)?;
        }
        if self.sub_channel_id != 0 {
            os.write_uint32(7, self.sub_channel_id)?;
        }
        if self.cloudClientIp != 0 {
            os.write_uint32(177, self.cloudClientIp)?;
        }
        if !self.birthday.is_empty() {
            os.write_string(828, &self.birthday)?;
        }
        if self.uid != 0 {
            os.write_uint32(131, self.uid)?;
        }
        if !self.country_code.is_empty() {
            os.write_string(151, &self.country_code)?;
        }
        if self.is_guest != false {
            os.write_bool(6, self.is_guest)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayerTokenReq {
        GetPlayerTokenReq::new()
    }

    fn clear(&mut self) {
        self.client_rand_key.clear();
        self.account_uid.clear();
        self.key_id = 0;
        self.account_token.clear();
        self.platform_type = 0;
        self.OGNFFAEKDBO = 0;
        self.account_type = 0;
        self.channel_id = 0;
        self.psn_id.clear();
        self.online_id.clear();
        self.client_ip_str.clear();
        self.sub_channel_id = 0;
        self.cloudClientIp = 0;
        self.birthday.clear();
        self.uid = 0;
        self.country_code.clear();
        self.is_guest = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayerTokenReq {
        static instance: GetPlayerTokenReq = GetPlayerTokenReq {
            client_rand_key: ::std::string::String::new(),
            account_uid: ::std::string::String::new(),
            key_id: 0,
            account_token: ::std::string::String::new(),
            platform_type: 0,
            OGNFFAEKDBO: 0,
            account_type: 0,
            channel_id: 0,
            psn_id: ::std::string::String::new(),
            online_id: ::std::string::String::new(),
            client_ip_str: ::std::string::String::new(),
            sub_channel_id: 0,
            cloudClientIp: 0,
            birthday: ::std::string::String::new(),
            uid: 0,
            country_code: ::std::string::String::new(),
            is_guest: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPlayerTokenReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPlayerTokenReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPlayerTokenReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPlayerTokenReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17GetPlayerTokenReq.proto\"\xb9\x04\n\x11GetPlayerTokenReq\x12'\n\
    \x0fclient_rand_key\x18\xcc\x01\x20\x01(\tR\rclientRandKey\x12\x1f\n\x0b\
    account_uid\x18\n\x20\x01(\tR\naccountUid\x12\x16\n\x06key_id\x18\xdc\
    \x01\x20\x01(\rR\x05keyId\x12#\n\raccount_token\x18\x0f\x20\x01(\tR\x0ca\
    ccountToken\x12#\n\rplatform_type\x18\x0b\x20\x01(\rR\x0cplatformType\
    \x12!\n\x0bOGNFFAEKDBO\x18\xbb\x0c\x20\x01(\rR\x0bOGNFFAEKDBO\x12!\n\x0c\
    account_type\x18)\x20\x01(\rR\x0baccountType\x12\x1e\n\nchannel_id\x18\
    \x9f\n\x20\x01(\rR\tchannelId\x12\x15\n\x06psn_id\x18\x0c\x20\x01(\tR\
    \x05psnId\x12\x1b\n\tonline_id\x18\x01\x20\x01(\tR\x08onlineId\x12\"\n\r\
    client_ip_str\x18\x0e\x20\x01(\tR\x0bclientIpStr\x12$\n\x0esub_channel_i\
    d\x18\x07\x20\x01(\rR\x0csubChannelId\x12%\n\rcloudClientIp\x18\xb1\x01\
    \x20\x01(\rR\rcloudClientIp\x12\x1b\n\x08birthday\x18\xbc\x06\x20\x01(\t\
    R\x08birthday\x12\x11\n\x03uid\x18\x83\x01\x20\x01(\rR\x03uid\x12\"\n\
    \x0ccountry_code\x18\x97\x01\x20\x01(\tR\x0bcountryCode\x12\x19\n\x08is_\
    guest\x18\x06\x20\x01(\x08R\x07isGuestB\x1b\n\x19emu.grasscutter.net.pro\
    tob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetPlayerTokenReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
