// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CombatTypeArgument.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CombatTypeArgument)
pub enum CombatTypeArgument {
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_NONE)
    COMBAT_TYPE_ARGUMENT_NONE = 0,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_EVT_BEING_HIT)
    COMBAT_TYPE_ARGUMENT_EVT_BEING_HIT = 1,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_ANIMATOR_STATE_CHANGED)
    COMBAT_TYPE_ARGUMENT_ANIMATOR_STATE_CHANGED = 2,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_FACE_TO_DIR)
    COMBAT_TYPE_ARGUMENT_FACE_TO_DIR = 3,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_SET_ATTACK_TARGET)
    COMBAT_TYPE_ARGUMENT_SET_ATTACK_TARGET = 4,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_RUSH_MOVE)
    COMBAT_TYPE_ARGUMENT_RUSH_MOVE = 5,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_ANIMATOR_PARAMETER_CHANGED)
    COMBAT_TYPE_ARGUMENT_ANIMATOR_PARAMETER_CHANGED = 6,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_ENTITY_MOVE)
    COMBAT_TYPE_ARGUMENT_ENTITY_MOVE = 7,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_SYNC_ENTITY_POSITION)
    COMBAT_TYPE_ARGUMENT_SYNC_ENTITY_POSITION = 8,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_STEER_MOTION_INFO)
    COMBAT_TYPE_ARGUMENT_STEER_MOTION_INFO = 9,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_FORCE_SET_POS_INFO)
    COMBAT_TYPE_ARGUMENT_FORCE_SET_POS_INFO = 10,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_COMPENSATE_POS_DIFF)
    COMBAT_TYPE_ARGUMENT_COMPENSATE_POS_DIFF = 11,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_MONSTER_DO_BLINK)
    COMBAT_TYPE_ARGUMENT_MONSTER_DO_BLINK = 12,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_FIXED_RUSH_MOVE)
    COMBAT_TYPE_ARGUMENT_FIXED_RUSH_MOVE = 13,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_SYNC_TRANSFORM)
    COMBAT_TYPE_ARGUMENT_SYNC_TRANSFORM = 14,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_LIGHT_CORE_MOVE)
    COMBAT_TYPE_ARGUMENT_LIGHT_CORE_MOVE = 15,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_BEING_HEALED_NTF)
    COMBAT_TYPE_ARGUMENT_BEING_HEALED_NTF = 16,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_SKILL_ANCHOR_POSITION_NTF)
    COMBAT_TYPE_ARGUMENT_SKILL_ANCHOR_POSITION_NTF = 17,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_GRAPPLING_HOOK_MOVE)
    COMBAT_TYPE_ARGUMENT_GRAPPLING_HOOK_MOVE = 18,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_SPECIAL_MOTION_INFO)
    COMBAT_TYPE_ARGUMENT_SPECIAL_MOTION_INFO = 19,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_FIXED_AVATAR_FLASH_MOVE)
    COMBAT_TYPE_ARGUMENT_FIXED_AVATAR_FLASH_MOVE = 20,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_MULTI_OVERRIDE_ANIM)
    COMBAT_TYPE_ARGUMENT_MULTI_OVERRIDE_ANIM = 21,
    // @@protoc_insertion_point(enum_value:CombatTypeArgument.COMBAT_TYPE_ARGUMENT_DEBUG_SYNC_MOTION)
    COMBAT_TYPE_ARGUMENT_DEBUG_SYNC_MOTION = 22,
}

impl ::protobuf::Enum for CombatTypeArgument {
    const NAME: &'static str = "CombatTypeArgument";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CombatTypeArgument> {
        match value {
            0 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_NONE),
            1 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_EVT_BEING_HIT),
            2 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_ANIMATOR_STATE_CHANGED),
            3 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_FACE_TO_DIR),
            4 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SET_ATTACK_TARGET),
            5 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_RUSH_MOVE),
            6 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_ANIMATOR_PARAMETER_CHANGED),
            7 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_ENTITY_MOVE),
            8 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SYNC_ENTITY_POSITION),
            9 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_STEER_MOTION_INFO),
            10 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_FORCE_SET_POS_INFO),
            11 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_COMPENSATE_POS_DIFF),
            12 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_MONSTER_DO_BLINK),
            13 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_FIXED_RUSH_MOVE),
            14 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SYNC_TRANSFORM),
            15 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_LIGHT_CORE_MOVE),
            16 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_BEING_HEALED_NTF),
            17 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SKILL_ANCHOR_POSITION_NTF),
            18 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_GRAPPLING_HOOK_MOVE),
            19 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SPECIAL_MOTION_INFO),
            20 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_FIXED_AVATAR_FLASH_MOVE),
            21 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_MULTI_OVERRIDE_ANIM),
            22 => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_DEBUG_SYNC_MOTION),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CombatTypeArgument> {
        match str {
            "COMBAT_TYPE_ARGUMENT_NONE" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_NONE),
            "COMBAT_TYPE_ARGUMENT_EVT_BEING_HIT" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_EVT_BEING_HIT),
            "COMBAT_TYPE_ARGUMENT_ANIMATOR_STATE_CHANGED" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_ANIMATOR_STATE_CHANGED),
            "COMBAT_TYPE_ARGUMENT_FACE_TO_DIR" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_FACE_TO_DIR),
            "COMBAT_TYPE_ARGUMENT_SET_ATTACK_TARGET" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SET_ATTACK_TARGET),
            "COMBAT_TYPE_ARGUMENT_RUSH_MOVE" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_RUSH_MOVE),
            "COMBAT_TYPE_ARGUMENT_ANIMATOR_PARAMETER_CHANGED" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_ANIMATOR_PARAMETER_CHANGED),
            "COMBAT_TYPE_ARGUMENT_ENTITY_MOVE" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_ENTITY_MOVE),
            "COMBAT_TYPE_ARGUMENT_SYNC_ENTITY_POSITION" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SYNC_ENTITY_POSITION),
            "COMBAT_TYPE_ARGUMENT_STEER_MOTION_INFO" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_STEER_MOTION_INFO),
            "COMBAT_TYPE_ARGUMENT_FORCE_SET_POS_INFO" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_FORCE_SET_POS_INFO),
            "COMBAT_TYPE_ARGUMENT_COMPENSATE_POS_DIFF" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_COMPENSATE_POS_DIFF),
            "COMBAT_TYPE_ARGUMENT_MONSTER_DO_BLINK" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_MONSTER_DO_BLINK),
            "COMBAT_TYPE_ARGUMENT_FIXED_RUSH_MOVE" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_FIXED_RUSH_MOVE),
            "COMBAT_TYPE_ARGUMENT_SYNC_TRANSFORM" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SYNC_TRANSFORM),
            "COMBAT_TYPE_ARGUMENT_LIGHT_CORE_MOVE" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_LIGHT_CORE_MOVE),
            "COMBAT_TYPE_ARGUMENT_BEING_HEALED_NTF" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_BEING_HEALED_NTF),
            "COMBAT_TYPE_ARGUMENT_SKILL_ANCHOR_POSITION_NTF" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SKILL_ANCHOR_POSITION_NTF),
            "COMBAT_TYPE_ARGUMENT_GRAPPLING_HOOK_MOVE" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_GRAPPLING_HOOK_MOVE),
            "COMBAT_TYPE_ARGUMENT_SPECIAL_MOTION_INFO" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SPECIAL_MOTION_INFO),
            "COMBAT_TYPE_ARGUMENT_FIXED_AVATAR_FLASH_MOVE" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_FIXED_AVATAR_FLASH_MOVE),
            "COMBAT_TYPE_ARGUMENT_MULTI_OVERRIDE_ANIM" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_MULTI_OVERRIDE_ANIM),
            "COMBAT_TYPE_ARGUMENT_DEBUG_SYNC_MOTION" => ::std::option::Option::Some(CombatTypeArgument::COMBAT_TYPE_ARGUMENT_DEBUG_SYNC_MOTION),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CombatTypeArgument] = &[
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_NONE,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_EVT_BEING_HIT,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_ANIMATOR_STATE_CHANGED,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_FACE_TO_DIR,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SET_ATTACK_TARGET,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_RUSH_MOVE,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_ANIMATOR_PARAMETER_CHANGED,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_ENTITY_MOVE,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SYNC_ENTITY_POSITION,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_STEER_MOTION_INFO,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_FORCE_SET_POS_INFO,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_COMPENSATE_POS_DIFF,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_MONSTER_DO_BLINK,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_FIXED_RUSH_MOVE,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SYNC_TRANSFORM,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_LIGHT_CORE_MOVE,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_BEING_HEALED_NTF,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SKILL_ANCHOR_POSITION_NTF,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_GRAPPLING_HOOK_MOVE,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_SPECIAL_MOTION_INFO,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_FIXED_AVATAR_FLASH_MOVE,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_MULTI_OVERRIDE_ANIM,
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_DEBUG_SYNC_MOTION,
    ];
}

impl ::protobuf::EnumFull for CombatTypeArgument {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CombatTypeArgument").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CombatTypeArgument {
    fn default() -> Self {
        CombatTypeArgument::COMBAT_TYPE_ARGUMENT_NONE
    }
}

impl CombatTypeArgument {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CombatTypeArgument>("CombatTypeArgument")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18CombatTypeArgument.proto*\x82\x08\n\x12CombatTypeArgument\x12\x1d\
    \n\x19COMBAT_TYPE_ARGUMENT_NONE\x10\0\x12&\n\"COMBAT_TYPE_ARGUMENT_EVT_B\
    EING_HIT\x10\x01\x12/\n+COMBAT_TYPE_ARGUMENT_ANIMATOR_STATE_CHANGED\x10\
    \x02\x12$\n\x20COMBAT_TYPE_ARGUMENT_FACE_TO_DIR\x10\x03\x12*\n&COMBAT_TY\
    PE_ARGUMENT_SET_ATTACK_TARGET\x10\x04\x12\"\n\x1eCOMBAT_TYPE_ARGUMENT_RU\
    SH_MOVE\x10\x05\x123\n/COMBAT_TYPE_ARGUMENT_ANIMATOR_PARAMETER_CHANGED\
    \x10\x06\x12$\n\x20COMBAT_TYPE_ARGUMENT_ENTITY_MOVE\x10\x07\x12-\n)COMBA\
    T_TYPE_ARGUMENT_SYNC_ENTITY_POSITION\x10\x08\x12*\n&COMBAT_TYPE_ARGUMENT\
    _STEER_MOTION_INFO\x10\t\x12+\n'COMBAT_TYPE_ARGUMENT_FORCE_SET_POS_INFO\
    \x10\n\x12,\n(COMBAT_TYPE_ARGUMENT_COMPENSATE_POS_DIFF\x10\x0b\x12)\n%CO\
    MBAT_TYPE_ARGUMENT_MONSTER_DO_BLINK\x10\x0c\x12(\n$COMBAT_TYPE_ARGUMENT_\
    FIXED_RUSH_MOVE\x10\r\x12'\n#COMBAT_TYPE_ARGUMENT_SYNC_TRANSFORM\x10\x0e\
    \x12(\n$COMBAT_TYPE_ARGUMENT_LIGHT_CORE_MOVE\x10\x0f\x12)\n%COMBAT_TYPE_\
    ARGUMENT_BEING_HEALED_NTF\x10\x10\x122\n.COMBAT_TYPE_ARGUMENT_SKILL_ANCH\
    OR_POSITION_NTF\x10\x11\x12,\n(COMBAT_TYPE_ARGUMENT_GRAPPLING_HOOK_MOVE\
    \x10\x12\x12,\n(COMBAT_TYPE_ARGUMENT_SPECIAL_MOTION_INFO\x10\x13\x120\n,\
    COMBAT_TYPE_ARGUMENT_FIXED_AVATAR_FLASH_MOVE\x10\x14\x12,\n(COMBAT_TYPE_\
    ARGUMENT_MULTI_OVERRIDE_ANIM\x10\x15\x12*\n&COMBAT_TYPE_ARGUMENT_DEBUG_S\
    YNC_MOTION\x10\x16B\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CombatTypeArgument::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
