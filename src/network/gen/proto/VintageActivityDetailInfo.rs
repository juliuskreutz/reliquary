// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `VintageActivityDetailInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:VintageActivityDetailInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VintageActivityDetailInfo {
    // message fields
    // @@protoc_insertion_point(field:VintageActivityDetailInfo.is_content_closed)
    pub is_content_closed: bool,
    // @@protoc_insertion_point(field:VintageActivityDetailInfo.hunting_stage_map)
    pub hunting_stage_map: ::std::collections::HashMap<u32, super::VintageHuntingStageData::VintageHuntingStageData>,
    // @@protoc_insertion_point(field:VintageActivityDetailInfo.present_stage_map)
    pub present_stage_map: ::std::collections::HashMap<u32, super::VintagePresentStageData::VintagePresentStageData>,
    // @@protoc_insertion_point(field:VintageActivityDetailInfo.market_info)
    pub market_info: ::protobuf::MessageField<super::VintageMarketInfo::VintageMarketInfo>,
    // @@protoc_insertion_point(field:VintageActivityDetailInfo.camp_stage_map)
    pub camp_stage_map: ::std::collections::HashMap<u32, super::VintageCampChallengeStageData::VintageCampChallengeStageData>,
    // @@protoc_insertion_point(field:VintageActivityDetailInfo.booth_data)
    pub booth_data: ::protobuf::MessageField<super::VintageBoothUsedItemData::VintageBoothUsedItemData>,
    // special fields
    // @@protoc_insertion_point(special_field:VintageActivityDetailInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VintageActivityDetailInfo {
    fn default() -> &'a VintageActivityDetailInfo {
        <VintageActivityDetailInfo as ::protobuf::Message>::default_instance()
    }
}

impl VintageActivityDetailInfo {
    pub fn new() -> VintageActivityDetailInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_content_closed",
            |m: &VintageActivityDetailInfo| { &m.is_content_closed },
            |m: &mut VintageActivityDetailInfo| { &mut m.is_content_closed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "hunting_stage_map",
            |m: &VintageActivityDetailInfo| { &m.hunting_stage_map },
            |m: &mut VintageActivityDetailInfo| { &mut m.hunting_stage_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "present_stage_map",
            |m: &VintageActivityDetailInfo| { &m.present_stage_map },
            |m: &mut VintageActivityDetailInfo| { &mut m.present_stage_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::VintageMarketInfo::VintageMarketInfo>(
            "market_info",
            |m: &VintageActivityDetailInfo| { &m.market_info },
            |m: &mut VintageActivityDetailInfo| { &mut m.market_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "camp_stage_map",
            |m: &VintageActivityDetailInfo| { &m.camp_stage_map },
            |m: &mut VintageActivityDetailInfo| { &mut m.camp_stage_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::VintageBoothUsedItemData::VintageBoothUsedItemData>(
            "booth_data",
            |m: &VintageActivityDetailInfo| { &m.booth_data },
            |m: &mut VintageActivityDetailInfo| { &mut m.booth_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VintageActivityDetailInfo>(
            "VintageActivityDetailInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VintageActivityDetailInfo {
    const NAME: &'static str = "VintageActivityDetailInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                96 => {
                    self.is_content_closed = is.read_bool()?;
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.hunting_stage_map.insert(key, value);
                },
                50 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.present_stage_map.insert(key, value);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.market_info)?;
                },
                90 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.camp_stage_map.insert(key, value);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.booth_data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.is_content_closed != false {
            my_size += 1 + 1;
        }
        for (k, v) in &self.hunting_stage_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for (k, v) in &self.present_stage_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.market_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.camp_stage_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.booth_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.is_content_closed != false {
            os.write_bool(12, self.is_content_closed)?;
        }
        for (k, v) in &self.hunting_stage_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for (k, v) in &self.present_stage_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(50)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.market_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for (k, v) in &self.camp_stage_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(90)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.booth_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VintageActivityDetailInfo {
        VintageActivityDetailInfo::new()
    }

    fn clear(&mut self) {
        self.is_content_closed = false;
        self.hunting_stage_map.clear();
        self.present_stage_map.clear();
        self.market_info.clear();
        self.camp_stage_map.clear();
        self.booth_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VintageActivityDetailInfo {
        static instance: ::protobuf::rt::Lazy<VintageActivityDetailInfo> = ::protobuf::rt::Lazy::new();
        instance.get(VintageActivityDetailInfo::new)
    }
}

impl ::protobuf::MessageFull for VintageActivityDetailInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VintageActivityDetailInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VintageActivityDetailInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VintageActivityDetailInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fVintageActivityDetailInfo.proto\x1a\x1dVintageHuntingStageData.pro\
    to\x1a\x1dVintagePresentStageData.proto\x1a\x17VintageMarketInfo.proto\
    \x1a#VintageCampChallengeStageData.proto\x1a\x1eVintageBoothUsedItemData\
    .proto\"\xe1\x05\n\x19VintageActivityDetailInfo\x12*\n\x11is_content_clo\
    sed\x18\x0c\x20\x01(\x08R\x0fisContentClosed\x12[\n\x11hunting_stage_map\
    \x18\x03\x20\x03(\x0b2/.VintageActivityDetailInfo.HuntingStageMapEntryR\
    \x0fhuntingStageMap\x12[\n\x11present_stage_map\x18\x06\x20\x03(\x0b2/.V\
    intageActivityDetailInfo.PresentStageMapEntryR\x0fpresentStageMap\x123\n\
    \x0bmarket_info\x18\x02\x20\x01(\x0b2\x12.VintageMarketInfoR\nmarketInfo\
    \x12R\n\x0ecamp_stage_map\x18\x0b\x20\x03(\x0b2,.VintageActivityDetailIn\
    fo.CampStageMapEntryR\x0ccampStageMap\x128\n\nbooth_data\x18\x07\x20\x01\
    (\x0b2\x19.VintageBoothUsedItemDataR\tboothData\x1a\\\n\x14HuntingStageM\
    apEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12.\n\x05value\x18\
    \x02\x20\x01(\x0b2\x18.VintageHuntingStageDataR\x05value:\x028\x01\x1a\\\
    \n\x14PresentStageMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\
    \x12.\n\x05value\x18\x02\x20\x01(\x0b2\x18.VintagePresentStageDataR\x05v\
    alue:\x028\x01\x1a_\n\x11CampStageMapEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\rR\x03key\x124\n\x05value\x18\x02\x20\x01(\x0b2\x1e.VintageCampCha\
    llengeStageDataR\x05value:\x028\x01B\x1b\n\x19emu.grasscutter.net.protob\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::VintageHuntingStageData::file_descriptor().clone());
            deps.push(super::VintagePresentStageData::file_descriptor().clone());
            deps.push(super::VintageMarketInfo::file_descriptor().clone());
            deps.push(super::VintageCampChallengeStageData::file_descriptor().clone());
            deps.push(super::VintageBoothUsedItemData::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(VintageActivityDetailInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
