// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CreateGadgetInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CreateGadgetInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreateGadgetInfo {
    // message fields
    // @@protoc_insertion_point(field:CreateGadgetInfo.born_type)
    pub born_type: ::protobuf::EnumOrUnknown<super::GadgetBornType::GadgetBornType>,
    // @@protoc_insertion_point(field:CreateGadgetInfo.chest)
    pub chest: ::protobuf::MessageField<create_gadget_info::Chest>,
    // special fields
    // @@protoc_insertion_point(special_field:CreateGadgetInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateGadgetInfo {
    fn default() -> &'a CreateGadgetInfo {
        <CreateGadgetInfo as ::protobuf::Message>::default_instance()
    }
}

impl CreateGadgetInfo {
    pub fn new() -> CreateGadgetInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "born_type",
            |m: &CreateGadgetInfo| { &m.born_type },
            |m: &mut CreateGadgetInfo| { &mut m.born_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, create_gadget_info::Chest>(
            "chest",
            |m: &CreateGadgetInfo| { &m.chest },
            |m: &mut CreateGadgetInfo| { &mut m.chest },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateGadgetInfo>(
            "CreateGadgetInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateGadgetInfo {
    const NAME: &'static str = "CreateGadgetInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.born_type = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.chest)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.born_type != ::protobuf::EnumOrUnknown::new(super::GadgetBornType::GadgetBornType::GADGET_BORN_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(1, self.born_type.value());
        }
        if let Some(v) = self.chest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.born_type != ::protobuf::EnumOrUnknown::new(super::GadgetBornType::GadgetBornType::GADGET_BORN_TYPE_NONE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.born_type))?;
        }
        if let Some(v) = self.chest.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateGadgetInfo {
        CreateGadgetInfo::new()
    }

    fn clear(&mut self) {
        self.born_type = ::protobuf::EnumOrUnknown::new(super::GadgetBornType::GadgetBornType::GADGET_BORN_TYPE_NONE);
        self.chest.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateGadgetInfo {
        static instance: CreateGadgetInfo = CreateGadgetInfo {
            born_type: ::protobuf::EnumOrUnknown::from_i32(0),
            chest: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateGadgetInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateGadgetInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateGadgetInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateGadgetInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CreateGadgetInfo`
pub mod create_gadget_info {
    // @@protoc_insertion_point(message:CreateGadgetInfo.Chest)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Chest {
        // message fields
        // @@protoc_insertion_point(field:CreateGadgetInfo.Chest.chest_drop_id)
        pub chest_drop_id: u32,
        // @@protoc_insertion_point(field:CreateGadgetInfo.Chest.is_show_cutscene)
        pub is_show_cutscene: bool,
        // special fields
        // @@protoc_insertion_point(special_field:CreateGadgetInfo.Chest.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Chest {
        fn default() -> &'a Chest {
            <Chest as ::protobuf::Message>::default_instance()
        }
    }

    impl Chest {
        pub fn new() -> Chest {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "chest_drop_id",
                |m: &Chest| { &m.chest_drop_id },
                |m: &mut Chest| { &mut m.chest_drop_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "is_show_cutscene",
                |m: &Chest| { &m.is_show_cutscene },
                |m: &mut Chest| { &mut m.is_show_cutscene },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Chest>(
                "CreateGadgetInfo.Chest",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Chest {
        const NAME: &'static str = "Chest";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.chest_drop_id = is.read_uint32()?;
                    },
                    16 => {
                        self.is_show_cutscene = is.read_bool()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.chest_drop_id != 0 {
                my_size += ::protobuf::rt::uint32_size(1, self.chest_drop_id);
            }
            if self.is_show_cutscene != false {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.chest_drop_id != 0 {
                os.write_uint32(1, self.chest_drop_id)?;
            }
            if self.is_show_cutscene != false {
                os.write_bool(2, self.is_show_cutscene)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Chest {
            Chest::new()
        }

        fn clear(&mut self) {
            self.chest_drop_id = 0;
            self.is_show_cutscene = false;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Chest {
            static instance: Chest = Chest {
                chest_drop_id: 0,
                is_show_cutscene: false,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Chest {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CreateGadgetInfo.Chest").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Chest {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Chest {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16CreateGadgetInfo.proto\x1a\x14GadgetBornType.proto\"\xc6\x01\n\x10\
    CreateGadgetInfo\x12,\n\tborn_type\x18\x01\x20\x01(\x0e2\x0f.GadgetBornT\
    ypeR\x08bornType\x12-\n\x05chest\x18\x02\x20\x01(\x0b2\x17.CreateGadgetI\
    nfo.ChestR\x05chest\x1aU\n\x05Chest\x12\"\n\rchest_drop_id\x18\x01\x20\
    \x01(\rR\x0bchestDropId\x12(\n\x10is_show_cutscene\x18\x02\x20\x01(\x08R\
    \x0eisShowCutsceneB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::GadgetBornType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(CreateGadgetInfo::generated_message_descriptor_data());
            messages.push(create_gadget_info::Chest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
