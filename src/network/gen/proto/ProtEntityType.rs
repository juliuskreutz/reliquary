// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ProtEntityType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ProtEntityType)
pub enum ProtEntityType {
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_NONE)
    PROT_ENTITY_TYPE_NONE = 0,
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_AVATAR)
    PROT_ENTITY_TYPE_AVATAR = 1,
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_MONSTER)
    PROT_ENTITY_TYPE_MONSTER = 2,
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_NPC)
    PROT_ENTITY_TYPE_NPC = 3,
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_GADGET)
    PROT_ENTITY_TYPE_GADGET = 4,
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_REGION)
    PROT_ENTITY_TYPE_REGION = 5,
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_WEAPON)
    PROT_ENTITY_TYPE_WEAPON = 6,
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_WEATHER)
    PROT_ENTITY_TYPE_WEATHER = 7,
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_SCENE)
    PROT_ENTITY_TYPE_SCENE = 8,
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_TEAM)
    PROT_ENTITY_TYPE_TEAM = 9,
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_MASSIVE_ENTITY)
    PROT_ENTITY_TYPE_MASSIVE_ENTITY = 10,
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_MP_LEVEL)
    PROT_ENTITY_TYPE_MP_LEVEL = 11,
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_PLAY_TEAM_ENTITY)
    PROT_ENTITY_TYPE_PLAY_TEAM_ENTITY = 12,
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_EYE_POINT)
    PROT_ENTITY_TYPE_EYE_POINT = 13,
    // @@protoc_insertion_point(enum_value:ProtEntityType.PROT_ENTITY_TYPE_MAX)
    PROT_ENTITY_TYPE_MAX = 14,
}

impl ::protobuf::Enum for ProtEntityType {
    const NAME: &'static str = "ProtEntityType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ProtEntityType> {
        match value {
            0 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_NONE),
            1 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_AVATAR),
            2 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_MONSTER),
            3 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_NPC),
            4 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_GADGET),
            5 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_REGION),
            6 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_WEAPON),
            7 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_WEATHER),
            8 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_SCENE),
            9 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_TEAM),
            10 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_MASSIVE_ENTITY),
            11 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_MP_LEVEL),
            12 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_PLAY_TEAM_ENTITY),
            13 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_EYE_POINT),
            14 => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_MAX),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ProtEntityType> {
        match str {
            "PROT_ENTITY_TYPE_NONE" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_NONE),
            "PROT_ENTITY_TYPE_AVATAR" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_AVATAR),
            "PROT_ENTITY_TYPE_MONSTER" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_MONSTER),
            "PROT_ENTITY_TYPE_NPC" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_NPC),
            "PROT_ENTITY_TYPE_GADGET" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_GADGET),
            "PROT_ENTITY_TYPE_REGION" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_REGION),
            "PROT_ENTITY_TYPE_WEAPON" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_WEAPON),
            "PROT_ENTITY_TYPE_WEATHER" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_WEATHER),
            "PROT_ENTITY_TYPE_SCENE" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_SCENE),
            "PROT_ENTITY_TYPE_TEAM" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_TEAM),
            "PROT_ENTITY_TYPE_MASSIVE_ENTITY" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_MASSIVE_ENTITY),
            "PROT_ENTITY_TYPE_MP_LEVEL" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_MP_LEVEL),
            "PROT_ENTITY_TYPE_PLAY_TEAM_ENTITY" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_PLAY_TEAM_ENTITY),
            "PROT_ENTITY_TYPE_EYE_POINT" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_EYE_POINT),
            "PROT_ENTITY_TYPE_MAX" => ::std::option::Option::Some(ProtEntityType::PROT_ENTITY_TYPE_MAX),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ProtEntityType] = &[
        ProtEntityType::PROT_ENTITY_TYPE_NONE,
        ProtEntityType::PROT_ENTITY_TYPE_AVATAR,
        ProtEntityType::PROT_ENTITY_TYPE_MONSTER,
        ProtEntityType::PROT_ENTITY_TYPE_NPC,
        ProtEntityType::PROT_ENTITY_TYPE_GADGET,
        ProtEntityType::PROT_ENTITY_TYPE_REGION,
        ProtEntityType::PROT_ENTITY_TYPE_WEAPON,
        ProtEntityType::PROT_ENTITY_TYPE_WEATHER,
        ProtEntityType::PROT_ENTITY_TYPE_SCENE,
        ProtEntityType::PROT_ENTITY_TYPE_TEAM,
        ProtEntityType::PROT_ENTITY_TYPE_MASSIVE_ENTITY,
        ProtEntityType::PROT_ENTITY_TYPE_MP_LEVEL,
        ProtEntityType::PROT_ENTITY_TYPE_PLAY_TEAM_ENTITY,
        ProtEntityType::PROT_ENTITY_TYPE_EYE_POINT,
        ProtEntityType::PROT_ENTITY_TYPE_MAX,
    ];
}

impl ::protobuf::EnumFull for ProtEntityType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ProtEntityType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ProtEntityType {
    fn default() -> Self {
        ProtEntityType::PROT_ENTITY_TYPE_NONE
    }
}

impl ProtEntityType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ProtEntityType>("ProtEntityType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14ProtEntityType.proto*\xd1\x03\n\x0eProtEntityType\x12\x19\n\x15PRO\
    T_ENTITY_TYPE_NONE\x10\0\x12\x1b\n\x17PROT_ENTITY_TYPE_AVATAR\x10\x01\
    \x12\x1c\n\x18PROT_ENTITY_TYPE_MONSTER\x10\x02\x12\x18\n\x14PROT_ENTITY_\
    TYPE_NPC\x10\x03\x12\x1b\n\x17PROT_ENTITY_TYPE_GADGET\x10\x04\x12\x1b\n\
    \x17PROT_ENTITY_TYPE_REGION\x10\x05\x12\x1b\n\x17PROT_ENTITY_TYPE_WEAPON\
    \x10\x06\x12\x1c\n\x18PROT_ENTITY_TYPE_WEATHER\x10\x07\x12\x1a\n\x16PROT\
    _ENTITY_TYPE_SCENE\x10\x08\x12\x19\n\x15PROT_ENTITY_TYPE_TEAM\x10\t\x12#\
    \n\x1fPROT_ENTITY_TYPE_MASSIVE_ENTITY\x10\n\x12\x1d\n\x19PROT_ENTITY_TYP\
    E_MP_LEVEL\x10\x0b\x12%\n!PROT_ENTITY_TYPE_PLAY_TEAM_ENTITY\x10\x0c\x12\
    \x1e\n\x1aPROT_ENTITY_TYPE_EYE_POINT\x10\r\x12\x18\n\x14PROT_ENTITY_TYPE\
    _MAX\x10\x0eB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ProtEntityType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
