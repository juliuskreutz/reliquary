// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `SceneTeamAvatar.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:SceneTeamAvatar)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SceneTeamAvatar {
    // message fields
    // @@protoc_insertion_point(field:SceneTeamAvatar.scene_entity_info)
    pub scene_entity_info: ::protobuf::MessageField<super::SceneEntityInfo::SceneEntityInfo>,
    // @@protoc_insertion_point(field:SceneTeamAvatar.entity_id)
    pub entity_id: u32,
    // @@protoc_insertion_point(field:SceneTeamAvatar.player_uid)
    pub player_uid: u32,
    // @@protoc_insertion_point(field:SceneTeamAvatar.avatar_guid)
    pub avatar_guid: u64,
    // @@protoc_insertion_point(field:SceneTeamAvatar.weapon_guid)
    pub weapon_guid: u64,
    // @@protoc_insertion_point(field:SceneTeamAvatar.weapon_entity_id)
    pub weapon_entity_id: u32,
    // @@protoc_insertion_point(field:SceneTeamAvatar.scene_id)
    pub scene_id: u32,
    // @@protoc_insertion_point(field:SceneTeamAvatar.server_buff_list)
    pub server_buff_list: ::std::vec::Vec<super::ServerBuff::ServerBuff>,
    // @@protoc_insertion_point(field:SceneTeamAvatar.is_player_cur_avatar)
    pub is_player_cur_avatar: bool,
    // @@protoc_insertion_point(field:SceneTeamAvatar.ability_control_block)
    pub ability_control_block: ::protobuf::MessageField<super::AbilityControlBlock::AbilityControlBlock>,
    // @@protoc_insertion_point(field:SceneTeamAvatar.scene_avatar_info)
    pub scene_avatar_info: ::protobuf::MessageField<super::SceneAvatarInfo::SceneAvatarInfo>,
    // @@protoc_insertion_point(field:SceneTeamAvatar.avatar_info)
    pub avatar_info: ::protobuf::MessageField<super::AvatarInfo::AvatarInfo>,
    // @@protoc_insertion_point(field:SceneTeamAvatar.weapon_ability_info)
    pub weapon_ability_info: ::protobuf::MessageField<super::AbilitySyncStateInfo::AbilitySyncStateInfo>,
    // @@protoc_insertion_point(field:SceneTeamAvatar.avatar_ability_info)
    pub avatar_ability_info: ::protobuf::MessageField<super::AbilitySyncStateInfo::AbilitySyncStateInfo>,
    // @@protoc_insertion_point(field:SceneTeamAvatar.is_on_scene)
    pub is_on_scene: bool,
    // @@protoc_insertion_point(field:SceneTeamAvatar.is_reconnect)
    pub is_reconnect: bool,
    // special fields
    // @@protoc_insertion_point(special_field:SceneTeamAvatar.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SceneTeamAvatar {
    fn default() -> &'a SceneTeamAvatar {
        <SceneTeamAvatar as ::protobuf::Message>::default_instance()
    }
}

impl SceneTeamAvatar {
    pub fn new() -> SceneTeamAvatar {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(16);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::SceneEntityInfo::SceneEntityInfo>(
            "scene_entity_info",
            |m: &SceneTeamAvatar| { &m.scene_entity_info },
            |m: &mut SceneTeamAvatar| { &mut m.scene_entity_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity_id",
            |m: &SceneTeamAvatar| { &m.entity_id },
            |m: &mut SceneTeamAvatar| { &mut m.entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "player_uid",
            |m: &SceneTeamAvatar| { &m.player_uid },
            |m: &mut SceneTeamAvatar| { &mut m.player_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_guid",
            |m: &SceneTeamAvatar| { &m.avatar_guid },
            |m: &mut SceneTeamAvatar| { &mut m.avatar_guid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "weapon_guid",
            |m: &SceneTeamAvatar| { &m.weapon_guid },
            |m: &mut SceneTeamAvatar| { &mut m.weapon_guid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "weapon_entity_id",
            |m: &SceneTeamAvatar| { &m.weapon_entity_id },
            |m: &mut SceneTeamAvatar| { &mut m.weapon_entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_id",
            |m: &SceneTeamAvatar| { &m.scene_id },
            |m: &mut SceneTeamAvatar| { &mut m.scene_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "server_buff_list",
            |m: &SceneTeamAvatar| { &m.server_buff_list },
            |m: &mut SceneTeamAvatar| { &mut m.server_buff_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_player_cur_avatar",
            |m: &SceneTeamAvatar| { &m.is_player_cur_avatar },
            |m: &mut SceneTeamAvatar| { &mut m.is_player_cur_avatar },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AbilityControlBlock::AbilityControlBlock>(
            "ability_control_block",
            |m: &SceneTeamAvatar| { &m.ability_control_block },
            |m: &mut SceneTeamAvatar| { &mut m.ability_control_block },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::SceneAvatarInfo::SceneAvatarInfo>(
            "scene_avatar_info",
            |m: &SceneTeamAvatar| { &m.scene_avatar_info },
            |m: &mut SceneTeamAvatar| { &mut m.scene_avatar_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AvatarInfo::AvatarInfo>(
            "avatar_info",
            |m: &SceneTeamAvatar| { &m.avatar_info },
            |m: &mut SceneTeamAvatar| { &mut m.avatar_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AbilitySyncStateInfo::AbilitySyncStateInfo>(
            "weapon_ability_info",
            |m: &SceneTeamAvatar| { &m.weapon_ability_info },
            |m: &mut SceneTeamAvatar| { &mut m.weapon_ability_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AbilitySyncStateInfo::AbilitySyncStateInfo>(
            "avatar_ability_info",
            |m: &SceneTeamAvatar| { &m.avatar_ability_info },
            |m: &mut SceneTeamAvatar| { &mut m.avatar_ability_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_on_scene",
            |m: &SceneTeamAvatar| { &m.is_on_scene },
            |m: &mut SceneTeamAvatar| { &mut m.is_on_scene },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_reconnect",
            |m: &SceneTeamAvatar| { &m.is_reconnect },
            |m: &mut SceneTeamAvatar| { &mut m.is_reconnect },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SceneTeamAvatar>(
            "SceneTeamAvatar",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SceneTeamAvatar {
    const NAME: &'static str = "SceneTeamAvatar";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scene_entity_info)?;
                },
                96 => {
                    self.entity_id = is.read_uint32()?;
                },
                88 => {
                    self.player_uid = is.read_uint32()?;
                },
                104 => {
                    self.avatar_guid = is.read_uint64()?;
                },
                112 => {
                    self.weapon_guid = is.read_uint64()?;
                },
                32 => {
                    self.weapon_entity_id = is.read_uint32()?;
                },
                64 => {
                    self.scene_id = is.read_uint32()?;
                },
                58 => {
                    self.server_buff_list.push(is.read_message()?);
                },
                24 => {
                    self.is_player_cur_avatar = is.read_bool()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ability_control_block)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scene_avatar_info)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.avatar_info)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.weapon_ability_info)?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.avatar_ability_info)?;
                },
                80 => {
                    self.is_on_scene = is.read_bool()?;
                },
                8136 => {
                    self.is_reconnect = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.scene_entity_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.entity_id);
        }
        if self.player_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.player_uid);
        }
        if self.avatar_guid != 0 {
            my_size += ::protobuf::rt::uint64_size(13, self.avatar_guid);
        }
        if self.weapon_guid != 0 {
            my_size += ::protobuf::rt::uint64_size(14, self.weapon_guid);
        }
        if self.weapon_entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.weapon_entity_id);
        }
        if self.scene_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.scene_id);
        }
        for value in &self.server_buff_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.is_player_cur_avatar != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.ability_control_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.scene_avatar_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.avatar_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.weapon_ability_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.avatar_ability_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.is_on_scene != false {
            my_size += 1 + 1;
        }
        if self.is_reconnect != false {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.scene_entity_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.entity_id != 0 {
            os.write_uint32(12, self.entity_id)?;
        }
        if self.player_uid != 0 {
            os.write_uint32(11, self.player_uid)?;
        }
        if self.avatar_guid != 0 {
            os.write_uint64(13, self.avatar_guid)?;
        }
        if self.weapon_guid != 0 {
            os.write_uint64(14, self.weapon_guid)?;
        }
        if self.weapon_entity_id != 0 {
            os.write_uint32(4, self.weapon_entity_id)?;
        }
        if self.scene_id != 0 {
            os.write_uint32(8, self.scene_id)?;
        }
        for v in &self.server_buff_list {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.is_player_cur_avatar != false {
            os.write_bool(3, self.is_player_cur_avatar)?;
        }
        if let Some(v) = self.ability_control_block.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.scene_avatar_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.avatar_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.weapon_ability_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.avatar_ability_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if self.is_on_scene != false {
            os.write_bool(10, self.is_on_scene)?;
        }
        if self.is_reconnect != false {
            os.write_bool(1017, self.is_reconnect)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SceneTeamAvatar {
        SceneTeamAvatar::new()
    }

    fn clear(&mut self) {
        self.scene_entity_info.clear();
        self.entity_id = 0;
        self.player_uid = 0;
        self.avatar_guid = 0;
        self.weapon_guid = 0;
        self.weapon_entity_id = 0;
        self.scene_id = 0;
        self.server_buff_list.clear();
        self.is_player_cur_avatar = false;
        self.ability_control_block.clear();
        self.scene_avatar_info.clear();
        self.avatar_info.clear();
        self.weapon_ability_info.clear();
        self.avatar_ability_info.clear();
        self.is_on_scene = false;
        self.is_reconnect = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SceneTeamAvatar {
        static instance: SceneTeamAvatar = SceneTeamAvatar {
            scene_entity_info: ::protobuf::MessageField::none(),
            entity_id: 0,
            player_uid: 0,
            avatar_guid: 0,
            weapon_guid: 0,
            weapon_entity_id: 0,
            scene_id: 0,
            server_buff_list: ::std::vec::Vec::new(),
            is_player_cur_avatar: false,
            ability_control_block: ::protobuf::MessageField::none(),
            scene_avatar_info: ::protobuf::MessageField::none(),
            avatar_info: ::protobuf::MessageField::none(),
            weapon_ability_info: ::protobuf::MessageField::none(),
            avatar_ability_info: ::protobuf::MessageField::none(),
            is_on_scene: false,
            is_reconnect: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SceneTeamAvatar {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SceneTeamAvatar").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SceneTeamAvatar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SceneTeamAvatar {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15SceneTeamAvatar.proto\x1a\x15SceneEntityInfo.proto\x1a\x10ServerBu\
    ff.proto\x1a\x19AbilityControlBlock.proto\x1a\x15SceneAvatarInfo.proto\
    \x1a\x10AvatarInfo.proto\x1a\x1aAbilitySyncStateInfo.proto\"\x82\x06\n\
    \x0fSceneTeamAvatar\x12<\n\x11scene_entity_info\x18\x02\x20\x01(\x0b2\
    \x10.SceneEntityInfoR\x0fsceneEntityInfo\x12\x1b\n\tentity_id\x18\x0c\
    \x20\x01(\rR\x08entityId\x12\x1d\n\nplayer_uid\x18\x0b\x20\x01(\rR\tplay\
    erUid\x12\x1f\n\x0bavatar_guid\x18\r\x20\x01(\x04R\navatarGuid\x12\x1f\n\
    \x0bweapon_guid\x18\x0e\x20\x01(\x04R\nweaponGuid\x12(\n\x10weapon_entit\
    y_id\x18\x04\x20\x01(\rR\x0eweaponEntityId\x12\x19\n\x08scene_id\x18\x08\
    \x20\x01(\rR\x07sceneId\x125\n\x10server_buff_list\x18\x07\x20\x03(\x0b2\
    \x0b.ServerBuffR\x0eserverBuffList\x12/\n\x14is_player_cur_avatar\x18\
    \x03\x20\x01(\x08R\x11isPlayerCurAvatar\x12H\n\x15ability_control_block\
    \x18\t\x20\x01(\x0b2\x14.AbilityControlBlockR\x13abilityControlBlock\x12\
    <\n\x11scene_avatar_info\x18\x06\x20\x01(\x0b2\x10.SceneAvatarInfoR\x0fs\
    ceneAvatarInfo\x12,\n\x0bavatar_info\x18\x01\x20\x01(\x0b2\x0b.AvatarInf\
    oR\navatarInfo\x12E\n\x13weapon_ability_info\x18\x05\x20\x01(\x0b2\x15.A\
    bilitySyncStateInfoR\x11weaponAbilityInfo\x12E\n\x13avatar_ability_info\
    \x18\x0f\x20\x01(\x0b2\x15.AbilitySyncStateInfoR\x11avatarAbilityInfo\
    \x12\x1e\n\x0bis_on_scene\x18\n\x20\x01(\x08R\tisOnScene\x12\"\n\x0cis_r\
    econnect\x18\xf9\x07\x20\x01(\x08R\x0bisReconnectB\x1b\n\x19emu.grasscut\
    ter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::SceneEntityInfo::file_descriptor().clone());
            deps.push(super::ServerBuff::file_descriptor().clone());
            deps.push(super::AbilityControlBlock::file_descriptor().clone());
            deps.push(super::SceneAvatarInfo::file_descriptor().clone());
            deps.push(super::AvatarInfo::file_descriptor().clone());
            deps.push(super::AbilitySyncStateInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SceneTeamAvatar::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
