// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `Achievement.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:Achievement)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Achievement {
    // message fields
    // @@protoc_insertion_point(field:Achievement.id)
    pub id: u32,
    // @@protoc_insertion_point(field:Achievement.status)
    pub status: ::protobuf::EnumOrUnknown<achievement::Status>,
    // @@protoc_insertion_point(field:Achievement.cur_progress)
    pub cur_progress: u32,
    // @@protoc_insertion_point(field:Achievement.total_progress)
    pub total_progress: u32,
    // @@protoc_insertion_point(field:Achievement.finish_timestamp)
    pub finish_timestamp: u32,
    // special fields
    // @@protoc_insertion_point(special_field:Achievement.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Achievement {
    fn default() -> &'a Achievement {
        <Achievement as ::protobuf::Message>::default_instance()
    }
}

impl Achievement {
    pub fn new() -> Achievement {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Achievement| { &m.id },
            |m: &mut Achievement| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Achievement| { &m.status },
            |m: &mut Achievement| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_progress",
            |m: &Achievement| { &m.cur_progress },
            |m: &mut Achievement| { &mut m.cur_progress },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_progress",
            |m: &Achievement| { &m.total_progress },
            |m: &mut Achievement| { &mut m.total_progress },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "finish_timestamp",
            |m: &Achievement| { &m.finish_timestamp },
            |m: &mut Achievement| { &mut m.finish_timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Achievement>(
            "Achievement",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Achievement {
    const NAME: &'static str = "Achievement";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                16 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                48 => {
                    self.cur_progress = is.read_uint32()?;
                },
                72 => {
                    self.total_progress = is.read_uint32()?;
                },
                104 => {
                    self.finish_timestamp = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(achievement::Status::STATUS_INVALID) {
            my_size += ::protobuf::rt::int32_size(2, self.status.value());
        }
        if self.cur_progress != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.cur_progress);
        }
        if self.total_progress != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.total_progress);
        }
        if self.finish_timestamp != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.finish_timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(achievement::Status::STATUS_INVALID) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if self.cur_progress != 0 {
            os.write_uint32(6, self.cur_progress)?;
        }
        if self.total_progress != 0 {
            os.write_uint32(9, self.total_progress)?;
        }
        if self.finish_timestamp != 0 {
            os.write_uint32(13, self.finish_timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Achievement {
        Achievement::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.status = ::protobuf::EnumOrUnknown::new(achievement::Status::STATUS_INVALID);
        self.cur_progress = 0;
        self.total_progress = 0;
        self.finish_timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Achievement {
        static instance: Achievement = Achievement {
            id: 0,
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            cur_progress: 0,
            total_progress: 0,
            finish_timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Achievement {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Achievement").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Achievement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Achievement {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Achievement`
pub mod achievement {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:Achievement.Status)
    pub enum Status {
        // @@protoc_insertion_point(enum_value:Achievement.Status.STATUS_INVALID)
        STATUS_INVALID = 0,
        // @@protoc_insertion_point(enum_value:Achievement.Status.STATUS_UNFINISHED)
        STATUS_UNFINISHED = 1,
        // @@protoc_insertion_point(enum_value:Achievement.Status.STATUS_FINISHED)
        STATUS_FINISHED = 2,
        // @@protoc_insertion_point(enum_value:Achievement.Status.STATUS_REWARD_TAKEN)
        STATUS_REWARD_TAKEN = 3,
    }

    impl ::protobuf::Enum for Status {
        const NAME: &'static str = "Status";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Status> {
            match value {
                0 => ::std::option::Option::Some(Status::STATUS_INVALID),
                1 => ::std::option::Option::Some(Status::STATUS_UNFINISHED),
                2 => ::std::option::Option::Some(Status::STATUS_FINISHED),
                3 => ::std::option::Option::Some(Status::STATUS_REWARD_TAKEN),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Status> {
            match str {
                "STATUS_INVALID" => ::std::option::Option::Some(Status::STATUS_INVALID),
                "STATUS_UNFINISHED" => ::std::option::Option::Some(Status::STATUS_UNFINISHED),
                "STATUS_FINISHED" => ::std::option::Option::Some(Status::STATUS_FINISHED),
                "STATUS_REWARD_TAKEN" => ::std::option::Option::Some(Status::STATUS_REWARD_TAKEN),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Status] = &[
            Status::STATUS_INVALID,
            Status::STATUS_UNFINISHED,
            Status::STATUS_FINISHED,
            Status::STATUS_REWARD_TAKEN,
        ];
    }

    impl ::protobuf::EnumFull for Status {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Achievement.Status").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Status {
        fn default() -> Self {
            Status::STATUS_INVALID
        }
    }

    impl Status {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Status>("Achievement.Status")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11Achievement.proto\"\xa2\x02\n\x0bAchievement\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\rR\x02id\x12+\n\x06status\x18\x02\x20\x01(\x0e2\x13.Achiev\
    ement.StatusR\x06status\x12!\n\x0ccur_progress\x18\x06\x20\x01(\rR\x0bcu\
    rProgress\x12%\n\x0etotal_progress\x18\t\x20\x01(\rR\rtotalProgress\x12)\
    \n\x10finish_timestamp\x18\r\x20\x01(\rR\x0ffinishTimestamp\"a\n\x06Stat\
    us\x12\x12\n\x0eSTATUS_INVALID\x10\0\x12\x15\n\x11STATUS_UNFINISHED\x10\
    \x01\x12\x13\n\x0fSTATUS_FINISHED\x10\x02\x12\x17\n\x13STATUS_REWARD_TAK\
    EN\x10\x03B\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Achievement::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(achievement::Status::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
