// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `SceneWeaponInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:SceneWeaponInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SceneWeaponInfo {
    // message fields
    // @@protoc_insertion_point(field:SceneWeaponInfo.entity_id)
    pub entity_id: u32,
    // @@protoc_insertion_point(field:SceneWeaponInfo.gadget_id)
    pub gadget_id: u32,
    // @@protoc_insertion_point(field:SceneWeaponInfo.item_id)
    pub item_id: u32,
    // @@protoc_insertion_point(field:SceneWeaponInfo.guid)
    pub guid: u64,
    // @@protoc_insertion_point(field:SceneWeaponInfo.level)
    pub level: u32,
    // @@protoc_insertion_point(field:SceneWeaponInfo.promote_level)
    pub promote_level: u32,
    // @@protoc_insertion_point(field:SceneWeaponInfo.ability_info)
    pub ability_info: ::protobuf::MessageField<super::AbilitySyncStateInfo::AbilitySyncStateInfo>,
    // @@protoc_insertion_point(field:SceneWeaponInfo.affix_map)
    pub affix_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:SceneWeaponInfo.renderer_changed_info)
    pub renderer_changed_info: ::protobuf::MessageField<super::EntityRendererChangedInfo::EntityRendererChangedInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:SceneWeaponInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SceneWeaponInfo {
    fn default() -> &'a SceneWeaponInfo {
        <SceneWeaponInfo as ::protobuf::Message>::default_instance()
    }
}

impl SceneWeaponInfo {
    pub fn new() -> SceneWeaponInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity_id",
            |m: &SceneWeaponInfo| { &m.entity_id },
            |m: &mut SceneWeaponInfo| { &mut m.entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gadget_id",
            |m: &SceneWeaponInfo| { &m.gadget_id },
            |m: &mut SceneWeaponInfo| { &mut m.gadget_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "item_id",
            |m: &SceneWeaponInfo| { &m.item_id },
            |m: &mut SceneWeaponInfo| { &mut m.item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "guid",
            |m: &SceneWeaponInfo| { &m.guid },
            |m: &mut SceneWeaponInfo| { &mut m.guid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &SceneWeaponInfo| { &m.level },
            |m: &mut SceneWeaponInfo| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "promote_level",
            |m: &SceneWeaponInfo| { &m.promote_level },
            |m: &mut SceneWeaponInfo| { &mut m.promote_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AbilitySyncStateInfo::AbilitySyncStateInfo>(
            "ability_info",
            |m: &SceneWeaponInfo| { &m.ability_info },
            |m: &mut SceneWeaponInfo| { &mut m.ability_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "affix_map",
            |m: &SceneWeaponInfo| { &m.affix_map },
            |m: &mut SceneWeaponInfo| { &mut m.affix_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EntityRendererChangedInfo::EntityRendererChangedInfo>(
            "renderer_changed_info",
            |m: &SceneWeaponInfo| { &m.renderer_changed_info },
            |m: &mut SceneWeaponInfo| { &mut m.renderer_changed_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SceneWeaponInfo>(
            "SceneWeaponInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SceneWeaponInfo {
    const NAME: &'static str = "SceneWeaponInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.entity_id = is.read_uint32()?;
                },
                16 => {
                    self.gadget_id = is.read_uint32()?;
                },
                24 => {
                    self.item_id = is.read_uint32()?;
                },
                32 => {
                    self.guid = is.read_uint64()?;
                },
                40 => {
                    self.level = is.read_uint32()?;
                },
                48 => {
                    self.promote_level = is.read_uint32()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ability_info)?;
                },
                66 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.affix_map.insert(key, value);
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.renderer_changed_info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.entity_id);
        }
        if self.gadget_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.gadget_id);
        }
        if self.item_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.item_id);
        }
        if self.guid != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.guid);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.level);
        }
        if self.promote_level != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.promote_level);
        }
        if let Some(v) = self.ability_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.affix_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.renderer_changed_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.entity_id != 0 {
            os.write_uint32(1, self.entity_id)?;
        }
        if self.gadget_id != 0 {
            os.write_uint32(2, self.gadget_id)?;
        }
        if self.item_id != 0 {
            os.write_uint32(3, self.item_id)?;
        }
        if self.guid != 0 {
            os.write_uint64(4, self.guid)?;
        }
        if self.level != 0 {
            os.write_uint32(5, self.level)?;
        }
        if self.promote_level != 0 {
            os.write_uint32(6, self.promote_level)?;
        }
        if let Some(v) = self.ability_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        for (k, v) in &self.affix_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(66)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if let Some(v) = self.renderer_changed_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SceneWeaponInfo {
        SceneWeaponInfo::new()
    }

    fn clear(&mut self) {
        self.entity_id = 0;
        self.gadget_id = 0;
        self.item_id = 0;
        self.guid = 0;
        self.level = 0;
        self.promote_level = 0;
        self.ability_info.clear();
        self.affix_map.clear();
        self.renderer_changed_info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SceneWeaponInfo {
        static instance: ::protobuf::rt::Lazy<SceneWeaponInfo> = ::protobuf::rt::Lazy::new();
        instance.get(SceneWeaponInfo::new)
    }
}

impl ::protobuf::MessageFull for SceneWeaponInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SceneWeaponInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SceneWeaponInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SceneWeaponInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15SceneWeaponInfo.proto\x1a\x1aAbilitySyncStateInfo.proto\x1a\x1fEnt\
    ityRendererChangedInfo.proto\"\xb7\x03\n\x0fSceneWeaponInfo\x12\x1b\n\te\
    ntity_id\x18\x01\x20\x01(\rR\x08entityId\x12\x1b\n\tgadget_id\x18\x02\
    \x20\x01(\rR\x08gadgetId\x12\x17\n\x07item_id\x18\x03\x20\x01(\rR\x06ite\
    mId\x12\x12\n\x04guid\x18\x04\x20\x01(\x04R\x04guid\x12\x14\n\x05level\
    \x18\x05\x20\x01(\rR\x05level\x12#\n\rpromote_level\x18\x06\x20\x01(\rR\
    \x0cpromoteLevel\x128\n\x0cability_info\x18\x07\x20\x01(\x0b2\x15.Abilit\
    ySyncStateInfoR\x0babilityInfo\x12;\n\taffix_map\x18\x08\x20\x03(\x0b2\
    \x1e.SceneWeaponInfo.AffixMapEntryR\x08affixMap\x12N\n\x15renderer_chang\
    ed_info\x18\t\x20\x01(\x0b2\x1a.EntityRendererChangedInfoR\x13rendererCh\
    angedInfo\x1a;\n\rAffixMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03\
    key\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01B\x1b\n\x19\
    emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::AbilitySyncStateInfo::file_descriptor().clone());
            deps.push(super::EntityRendererChangedInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SceneWeaponInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
