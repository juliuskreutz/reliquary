// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `TreasureMapRegionInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:TreasureMapRegionInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TreasureMapRegionInfo {
    // message fields
    // @@protoc_insertion_point(field:TreasureMapRegionInfo.region_id)
    pub region_id: u32,
    // @@protoc_insertion_point(field:TreasureMapRegionInfo.start_time)
    pub start_time: u32,
    // @@protoc_insertion_point(field:TreasureMapRegionInfo.FGGBKHFBKDP)
    pub FGGBKHFBKDP: u32,
    // @@protoc_insertion_point(field:TreasureMapRegionInfo.region_center_pos)
    pub region_center_pos: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:TreasureMapRegionInfo.scene_id)
    pub scene_id: u32,
    // @@protoc_insertion_point(field:TreasureMapRegionInfo.region_radius)
    pub region_radius: u32,
    // @@protoc_insertion_point(field:TreasureMapRegionInfo.IMMKAGOADGP)
    pub IMMKAGOADGP: bool,
    // @@protoc_insertion_point(field:TreasureMapRegionInfo.LKCMDIFKAMB)
    pub LKCMDIFKAMB: u32,
    // @@protoc_insertion_point(field:TreasureMapRegionInfo.IEKIMNMPKJD)
    pub IEKIMNMPKJD: bool,
    // special fields
    // @@protoc_insertion_point(special_field:TreasureMapRegionInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TreasureMapRegionInfo {
    fn default() -> &'a TreasureMapRegionInfo {
        <TreasureMapRegionInfo as ::protobuf::Message>::default_instance()
    }
}

impl TreasureMapRegionInfo {
    pub fn new() -> TreasureMapRegionInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "region_id",
            |m: &TreasureMapRegionInfo| { &m.region_id },
            |m: &mut TreasureMapRegionInfo| { &mut m.region_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_time",
            |m: &TreasureMapRegionInfo| { &m.start_time },
            |m: &mut TreasureMapRegionInfo| { &mut m.start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FGGBKHFBKDP",
            |m: &TreasureMapRegionInfo| { &m.FGGBKHFBKDP },
            |m: &mut TreasureMapRegionInfo| { &mut m.FGGBKHFBKDP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "region_center_pos",
            |m: &TreasureMapRegionInfo| { &m.region_center_pos },
            |m: &mut TreasureMapRegionInfo| { &mut m.region_center_pos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_id",
            |m: &TreasureMapRegionInfo| { &m.scene_id },
            |m: &mut TreasureMapRegionInfo| { &mut m.scene_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "region_radius",
            |m: &TreasureMapRegionInfo| { &m.region_radius },
            |m: &mut TreasureMapRegionInfo| { &mut m.region_radius },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IMMKAGOADGP",
            |m: &TreasureMapRegionInfo| { &m.IMMKAGOADGP },
            |m: &mut TreasureMapRegionInfo| { &mut m.IMMKAGOADGP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LKCMDIFKAMB",
            |m: &TreasureMapRegionInfo| { &m.LKCMDIFKAMB },
            |m: &mut TreasureMapRegionInfo| { &mut m.LKCMDIFKAMB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IEKIMNMPKJD",
            |m: &TreasureMapRegionInfo| { &m.IEKIMNMPKJD },
            |m: &mut TreasureMapRegionInfo| { &mut m.IEKIMNMPKJD },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TreasureMapRegionInfo>(
            "TreasureMapRegionInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TreasureMapRegionInfo {
    const NAME: &'static str = "TreasureMapRegionInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.region_id = is.read_uint32()?;
                },
                48 => {
                    self.start_time = is.read_uint32()?;
                },
                112 => {
                    self.FGGBKHFBKDP = is.read_uint32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.region_center_pos)?;
                },
                8 => {
                    self.scene_id = is.read_uint32()?;
                },
                56 => {
                    self.region_radius = is.read_uint32()?;
                },
                120 => {
                    self.IMMKAGOADGP = is.read_bool()?;
                },
                80 => {
                    self.LKCMDIFKAMB = is.read_uint32()?;
                },
                24 => {
                    self.IEKIMNMPKJD = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.region_id != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.region_id);
        }
        if self.start_time != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.start_time);
        }
        if self.FGGBKHFBKDP != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.FGGBKHFBKDP);
        }
        if let Some(v) = self.region_center_pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.scene_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.scene_id);
        }
        if self.region_radius != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.region_radius);
        }
        if self.IMMKAGOADGP != false {
            my_size += 1 + 1;
        }
        if self.LKCMDIFKAMB != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.LKCMDIFKAMB);
        }
        if self.IEKIMNMPKJD != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.region_id != 0 {
            os.write_uint32(4, self.region_id)?;
        }
        if self.start_time != 0 {
            os.write_uint32(6, self.start_time)?;
        }
        if self.FGGBKHFBKDP != 0 {
            os.write_uint32(14, self.FGGBKHFBKDP)?;
        }
        if let Some(v) = self.region_center_pos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.scene_id != 0 {
            os.write_uint32(1, self.scene_id)?;
        }
        if self.region_radius != 0 {
            os.write_uint32(7, self.region_radius)?;
        }
        if self.IMMKAGOADGP != false {
            os.write_bool(15, self.IMMKAGOADGP)?;
        }
        if self.LKCMDIFKAMB != 0 {
            os.write_uint32(10, self.LKCMDIFKAMB)?;
        }
        if self.IEKIMNMPKJD != false {
            os.write_bool(3, self.IEKIMNMPKJD)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TreasureMapRegionInfo {
        TreasureMapRegionInfo::new()
    }

    fn clear(&mut self) {
        self.region_id = 0;
        self.start_time = 0;
        self.FGGBKHFBKDP = 0;
        self.region_center_pos.clear();
        self.scene_id = 0;
        self.region_radius = 0;
        self.IMMKAGOADGP = false;
        self.LKCMDIFKAMB = 0;
        self.IEKIMNMPKJD = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TreasureMapRegionInfo {
        static instance: TreasureMapRegionInfo = TreasureMapRegionInfo {
            region_id: 0,
            start_time: 0,
            FGGBKHFBKDP: 0,
            region_center_pos: ::protobuf::MessageField::none(),
            scene_id: 0,
            region_radius: 0,
            IMMKAGOADGP: false,
            LKCMDIFKAMB: 0,
            IEKIMNMPKJD: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TreasureMapRegionInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TreasureMapRegionInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TreasureMapRegionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TreasureMapRegionInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bTreasureMapRegionInfo.proto\x1a\x0cVector.proto\"\xd0\x02\n\x15Tre\
    asureMapRegionInfo\x12\x1b\n\tregion_id\x18\x04\x20\x01(\rR\x08regionId\
    \x12\x1d\n\nstart_time\x18\x06\x20\x01(\rR\tstartTime\x12\x20\n\x0bFGGBK\
    HFBKDP\x18\x0e\x20\x01(\rR\x0bFGGBKHFBKDP\x123\n\x11region_center_pos\
    \x18\x02\x20\x01(\x0b2\x07.VectorR\x0fregionCenterPos\x12\x19\n\x08scene\
    _id\x18\x01\x20\x01(\rR\x07sceneId\x12#\n\rregion_radius\x18\x07\x20\x01\
    (\rR\x0cregionRadius\x12\x20\n\x0bIMMKAGOADGP\x18\x0f\x20\x01(\x08R\x0bI\
    MMKAGOADGP\x12\x20\n\x0bLKCMDIFKAMB\x18\n\x20\x01(\rR\x0bLKCMDIFKAMB\x12\
    \x20\n\x0bIEKIMNMPKJD\x18\x03\x20\x01(\x08R\x0bIEKIMNMPKJDB\x1b\n\x19emu\
    .grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::Vector::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(TreasureMapRegionInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
