// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PacketHead.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:PacketHead)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PacketHead {
    // message fields
    // @@protoc_insertion_point(field:PacketHead.packet_id)
    pub packet_id: u32,
    // @@protoc_insertion_point(field:PacketHead.rpc_id)
    pub rpc_id: u32,
    // @@protoc_insertion_point(field:PacketHead.client_sequence_id)
    pub client_sequence_id: u32,
    // @@protoc_insertion_point(field:PacketHead.enet_channel_id)
    pub enet_channel_id: u32,
    // @@protoc_insertion_point(field:PacketHead.enet_is_reliable)
    pub enet_is_reliable: u32,
    // @@protoc_insertion_point(field:PacketHead.sent_ms)
    pub sent_ms: u64,
    // @@protoc_insertion_point(field:PacketHead.user_id)
    pub user_id: u32,
    // @@protoc_insertion_point(field:PacketHead.user_ip)
    pub user_ip: u32,
    // @@protoc_insertion_point(field:PacketHead.user_session_id)
    pub user_session_id: u32,
    // @@protoc_insertion_point(field:PacketHead.recv_time_ms)
    pub recv_time_ms: u64,
    // @@protoc_insertion_point(field:PacketHead.rpc_begin_time_ms)
    pub rpc_begin_time_ms: u32,
    // @@protoc_insertion_point(field:PacketHead.ext_map)
    pub ext_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:PacketHead.sender_app_id)
    pub sender_app_id: u32,
    // @@protoc_insertion_point(field:PacketHead.source_service)
    pub source_service: u32,
    // @@protoc_insertion_point(field:PacketHead.target_service)
    pub target_service: u32,
    // @@protoc_insertion_point(field:PacketHead.service_app_id_map)
    pub service_app_id_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:PacketHead.is_set_game_thread)
    pub is_set_game_thread: bool,
    // @@protoc_insertion_point(field:PacketHead.game_thread_index)
    pub game_thread_index: u32,
    // special fields
    // @@protoc_insertion_point(special_field:PacketHead.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PacketHead {
    fn default() -> &'a PacketHead {
        <PacketHead as ::protobuf::Message>::default_instance()
    }
}

impl PacketHead {
    pub fn new() -> PacketHead {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(18);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "packet_id",
            |m: &PacketHead| { &m.packet_id },
            |m: &mut PacketHead| { &mut m.packet_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rpc_id",
            |m: &PacketHead| { &m.rpc_id },
            |m: &mut PacketHead| { &mut m.rpc_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_sequence_id",
            |m: &PacketHead| { &m.client_sequence_id },
            |m: &mut PacketHead| { &mut m.client_sequence_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enet_channel_id",
            |m: &PacketHead| { &m.enet_channel_id },
            |m: &mut PacketHead| { &mut m.enet_channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enet_is_reliable",
            |m: &PacketHead| { &m.enet_is_reliable },
            |m: &mut PacketHead| { &mut m.enet_is_reliable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sent_ms",
            |m: &PacketHead| { &m.sent_ms },
            |m: &mut PacketHead| { &mut m.sent_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user_id",
            |m: &PacketHead| { &m.user_id },
            |m: &mut PacketHead| { &mut m.user_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user_ip",
            |m: &PacketHead| { &m.user_ip },
            |m: &mut PacketHead| { &mut m.user_ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user_session_id",
            |m: &PacketHead| { &m.user_session_id },
            |m: &mut PacketHead| { &mut m.user_session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "recv_time_ms",
            |m: &PacketHead| { &m.recv_time_ms },
            |m: &mut PacketHead| { &mut m.recv_time_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rpc_begin_time_ms",
            |m: &PacketHead| { &m.rpc_begin_time_ms },
            |m: &mut PacketHead| { &mut m.rpc_begin_time_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "ext_map",
            |m: &PacketHead| { &m.ext_map },
            |m: &mut PacketHead| { &mut m.ext_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender_app_id",
            |m: &PacketHead| { &m.sender_app_id },
            |m: &mut PacketHead| { &mut m.sender_app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source_service",
            |m: &PacketHead| { &m.source_service },
            |m: &mut PacketHead| { &mut m.source_service },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_service",
            |m: &PacketHead| { &m.target_service },
            |m: &mut PacketHead| { &mut m.target_service },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "service_app_id_map",
            |m: &PacketHead| { &m.service_app_id_map },
            |m: &mut PacketHead| { &mut m.service_app_id_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_set_game_thread",
            |m: &PacketHead| { &m.is_set_game_thread },
            |m: &mut PacketHead| { &mut m.is_set_game_thread },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "game_thread_index",
            |m: &PacketHead| { &m.game_thread_index },
            |m: &mut PacketHead| { &mut m.game_thread_index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PacketHead>(
            "PacketHead",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PacketHead {
    const NAME: &'static str = "PacketHead";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.packet_id = is.read_uint32()?;
                },
                16 => {
                    self.rpc_id = is.read_uint32()?;
                },
                24 => {
                    self.client_sequence_id = is.read_uint32()?;
                },
                32 => {
                    self.enet_channel_id = is.read_uint32()?;
                },
                40 => {
                    self.enet_is_reliable = is.read_uint32()?;
                },
                48 => {
                    self.sent_ms = is.read_uint64()?;
                },
                88 => {
                    self.user_id = is.read_uint32()?;
                },
                96 => {
                    self.user_ip = is.read_uint32()?;
                },
                104 => {
                    self.user_session_id = is.read_uint32()?;
                },
                168 => {
                    self.recv_time_ms = is.read_uint64()?;
                },
                176 => {
                    self.rpc_begin_time_ms = is.read_uint32()?;
                },
                186 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.ext_map.insert(key, value);
                },
                192 => {
                    self.sender_app_id = is.read_uint32()?;
                },
                248 => {
                    self.source_service = is.read_uint32()?;
                },
                256 => {
                    self.target_service = is.read_uint32()?;
                },
                266 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.service_app_id_map.insert(key, value);
                },
                272 => {
                    self.is_set_game_thread = is.read_bool()?;
                },
                280 => {
                    self.game_thread_index = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.packet_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.packet_id);
        }
        if self.rpc_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.rpc_id);
        }
        if self.client_sequence_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.client_sequence_id);
        }
        if self.enet_channel_id != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.enet_channel_id);
        }
        if self.enet_is_reliable != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.enet_is_reliable);
        }
        if self.sent_ms != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.sent_ms);
        }
        if self.user_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.user_id);
        }
        if self.user_ip != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.user_ip);
        }
        if self.user_session_id != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.user_session_id);
        }
        if self.recv_time_ms != 0 {
            my_size += ::protobuf::rt::uint64_size(21, self.recv_time_ms);
        }
        if self.rpc_begin_time_ms != 0 {
            my_size += ::protobuf::rt::uint32_size(22, self.rpc_begin_time_ms);
        }
        for (k, v) in &self.ext_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.sender_app_id != 0 {
            my_size += ::protobuf::rt::uint32_size(24, self.sender_app_id);
        }
        if self.source_service != 0 {
            my_size += ::protobuf::rt::uint32_size(31, self.source_service);
        }
        if self.target_service != 0 {
            my_size += ::protobuf::rt::uint32_size(32, self.target_service);
        }
        for (k, v) in &self.service_app_id_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.is_set_game_thread != false {
            my_size += 2 + 1;
        }
        if self.game_thread_index != 0 {
            my_size += ::protobuf::rt::uint32_size(35, self.game_thread_index);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.packet_id != 0 {
            os.write_uint32(1, self.packet_id)?;
        }
        if self.rpc_id != 0 {
            os.write_uint32(2, self.rpc_id)?;
        }
        if self.client_sequence_id != 0 {
            os.write_uint32(3, self.client_sequence_id)?;
        }
        if self.enet_channel_id != 0 {
            os.write_uint32(4, self.enet_channel_id)?;
        }
        if self.enet_is_reliable != 0 {
            os.write_uint32(5, self.enet_is_reliable)?;
        }
        if self.sent_ms != 0 {
            os.write_uint64(6, self.sent_ms)?;
        }
        if self.user_id != 0 {
            os.write_uint32(11, self.user_id)?;
        }
        if self.user_ip != 0 {
            os.write_uint32(12, self.user_ip)?;
        }
        if self.user_session_id != 0 {
            os.write_uint32(13, self.user_session_id)?;
        }
        if self.recv_time_ms != 0 {
            os.write_uint64(21, self.recv_time_ms)?;
        }
        if self.rpc_begin_time_ms != 0 {
            os.write_uint32(22, self.rpc_begin_time_ms)?;
        }
        for (k, v) in &self.ext_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(186)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if self.sender_app_id != 0 {
            os.write_uint32(24, self.sender_app_id)?;
        }
        if self.source_service != 0 {
            os.write_uint32(31, self.source_service)?;
        }
        if self.target_service != 0 {
            os.write_uint32(32, self.target_service)?;
        }
        for (k, v) in &self.service_app_id_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(266)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if self.is_set_game_thread != false {
            os.write_bool(34, self.is_set_game_thread)?;
        }
        if self.game_thread_index != 0 {
            os.write_uint32(35, self.game_thread_index)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PacketHead {
        PacketHead::new()
    }

    fn clear(&mut self) {
        self.packet_id = 0;
        self.rpc_id = 0;
        self.client_sequence_id = 0;
        self.enet_channel_id = 0;
        self.enet_is_reliable = 0;
        self.sent_ms = 0;
        self.user_id = 0;
        self.user_ip = 0;
        self.user_session_id = 0;
        self.recv_time_ms = 0;
        self.rpc_begin_time_ms = 0;
        self.ext_map.clear();
        self.sender_app_id = 0;
        self.source_service = 0;
        self.target_service = 0;
        self.service_app_id_map.clear();
        self.is_set_game_thread = false;
        self.game_thread_index = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PacketHead {
        static instance: ::protobuf::rt::Lazy<PacketHead> = ::protobuf::rt::Lazy::new();
        instance.get(PacketHead::new)
    }
}

impl ::protobuf::MessageFull for PacketHead {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PacketHead").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PacketHead {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketHead {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10PacketHead.proto\"\xcb\x06\n\nPacketHead\x12\x1b\n\tpacket_id\x18\
    \x01\x20\x01(\rR\x08packetId\x12\x15\n\x06rpc_id\x18\x02\x20\x01(\rR\x05\
    rpcId\x12,\n\x12client_sequence_id\x18\x03\x20\x01(\rR\x10clientSequence\
    Id\x12&\n\x0fenet_channel_id\x18\x04\x20\x01(\rR\renetChannelId\x12(\n\
    \x10enet_is_reliable\x18\x05\x20\x01(\rR\x0eenetIsReliable\x12\x17\n\x07\
    sent_ms\x18\x06\x20\x01(\x04R\x06sentMs\x12\x17\n\x07user_id\x18\x0b\x20\
    \x01(\rR\x06userId\x12\x17\n\x07user_ip\x18\x0c\x20\x01(\rR\x06userIp\
    \x12&\n\x0fuser_session_id\x18\r\x20\x01(\rR\ruserSessionId\x12\x20\n\
    \x0crecv_time_ms\x18\x15\x20\x01(\x04R\nrecvTimeMs\x12)\n\x11rpc_begin_t\
    ime_ms\x18\x16\x20\x01(\rR\x0erpcBeginTimeMs\x120\n\x07ext_map\x18\x17\
    \x20\x03(\x0b2\x17.PacketHead.ExtMapEntryR\x06extMap\x12\"\n\rsender_app\
    _id\x18\x18\x20\x01(\rR\x0bsenderAppId\x12%\n\x0esource_service\x18\x1f\
    \x20\x01(\rR\rsourceService\x12%\n\x0etarget_service\x18\x20\x20\x01(\rR\
    \rtargetService\x12M\n\x12service_app_id_map\x18!\x20\x03(\x0b2\x20.Pack\
    etHead.ServiceAppIdMapEntryR\x0fserviceAppIdMap\x12+\n\x12is_set_game_th\
    read\x18\"\x20\x01(\x08R\x0fisSetGameThread\x12*\n\x11game_thread_index\
    \x18#\x20\x01(\rR\x0fgameThreadIndex\x1a9\n\x0bExtMapEntry\x12\x10\n\x03\
    key\x18\x01\x20\x01(\rR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\rR\
    \x05value:\x028\x01\x1aB\n\x14ServiceAppIdMapEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\rR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\
    \x028\x01B\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PacketHead::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
