// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RoutePoint.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RoutePoint)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RoutePoint {
    // message fields
    // @@protoc_insertion_point(field:RoutePoint.position)
    pub position: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:RoutePoint.arrive_range)
    pub arrive_range: f32,
    // @@protoc_insertion_point(field:RoutePoint.has_reach_event)
    pub has_reach_event: bool,
    // message oneof groups
    pub move_params: ::std::option::Option<route_point::Move_params>,
    pub rotate_params: ::std::option::Option<route_point::Rotate_params>,
    // special fields
    // @@protoc_insertion_point(special_field:RoutePoint.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RoutePoint {
    fn default() -> &'a RoutePoint {
        <RoutePoint as ::protobuf::Message>::default_instance()
    }
}

impl RoutePoint {
    pub fn new() -> RoutePoint {
        ::std::default::Default::default()
    }

    // float velocity = 11;

    pub fn velocity(&self) -> f32 {
        match self.move_params {
            ::std::option::Option::Some(route_point::Move_params::Velocity(v)) => v,
            _ => 0.,
        }
    }

    pub fn clear_velocity(&mut self) {
        self.move_params = ::std::option::Option::None;
    }

    pub fn has_velocity(&self) -> bool {
        match self.move_params {
            ::std::option::Option::Some(route_point::Move_params::Velocity(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_velocity(&mut self, v: f32) {
        self.move_params = ::std::option::Option::Some(route_point::Move_params::Velocity(v))
    }

    // float time = 12;

    pub fn time(&self) -> f32 {
        match self.move_params {
            ::std::option::Option::Some(route_point::Move_params::Time(v)) => v,
            _ => 0.,
        }
    }

    pub fn clear_time(&mut self) {
        self.move_params = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        match self.move_params {
            ::std::option::Option::Some(route_point::Move_params::Time(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: f32) {
        self.move_params = ::std::option::Option::Some(route_point::Move_params::Time(v))
    }

    // .Vector rotation = 21;

    pub fn rotation(&self) -> &super::Vector::Vector {
        match self.rotate_params {
            ::std::option::Option::Some(route_point::Rotate_params::Rotation(ref v)) => v,
            _ => <super::Vector::Vector as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rotation(&mut self) {
        self.rotate_params = ::std::option::Option::None;
    }

    pub fn has_rotation(&self) -> bool {
        match self.rotate_params {
            ::std::option::Option::Some(route_point::Rotate_params::Rotation(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rotation(&mut self, v: super::Vector::Vector) {
        self.rotate_params = ::std::option::Option::Some(route_point::Rotate_params::Rotation(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rotation(&mut self) -> &mut super::Vector::Vector {
        if let ::std::option::Option::Some(route_point::Rotate_params::Rotation(_)) = self.rotate_params {
        } else {
            self.rotate_params = ::std::option::Option::Some(route_point::Rotate_params::Rotation(super::Vector::Vector::new()));
        }
        match self.rotate_params {
            ::std::option::Option::Some(route_point::Rotate_params::Rotation(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rotation(&mut self) -> super::Vector::Vector {
        if self.has_rotation() {
            match self.rotate_params.take() {
                ::std::option::Option::Some(route_point::Rotate_params::Rotation(v)) => v,
                _ => panic!(),
            }
        } else {
            super::Vector::Vector::new()
        }
    }

    // .MathQuaternion rotation_speed = 22;

    pub fn rotation_speed(&self) -> &super::MathQuaternion::MathQuaternion {
        match self.rotate_params {
            ::std::option::Option::Some(route_point::Rotate_params::RotationSpeed(ref v)) => v,
            _ => <super::MathQuaternion::MathQuaternion as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rotation_speed(&mut self) {
        self.rotate_params = ::std::option::Option::None;
    }

    pub fn has_rotation_speed(&self) -> bool {
        match self.rotate_params {
            ::std::option::Option::Some(route_point::Rotate_params::RotationSpeed(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rotation_speed(&mut self, v: super::MathQuaternion::MathQuaternion) {
        self.rotate_params = ::std::option::Option::Some(route_point::Rotate_params::RotationSpeed(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rotation_speed(&mut self) -> &mut super::MathQuaternion::MathQuaternion {
        if let ::std::option::Option::Some(route_point::Rotate_params::RotationSpeed(_)) = self.rotate_params {
        } else {
            self.rotate_params = ::std::option::Option::Some(route_point::Rotate_params::RotationSpeed(super::MathQuaternion::MathQuaternion::new()));
        }
        match self.rotate_params {
            ::std::option::Option::Some(route_point::Rotate_params::RotationSpeed(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rotation_speed(&mut self) -> super::MathQuaternion::MathQuaternion {
        if self.has_rotation_speed() {
            match self.rotate_params.take() {
                ::std::option::Option::Some(route_point::Rotate_params::RotationSpeed(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MathQuaternion::MathQuaternion::new()
        }
    }

    // .MathQuaternion axis_speed = 23;

    pub fn axis_speed(&self) -> &super::MathQuaternion::MathQuaternion {
        match self.rotate_params {
            ::std::option::Option::Some(route_point::Rotate_params::AxisSpeed(ref v)) => v,
            _ => <super::MathQuaternion::MathQuaternion as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_axis_speed(&mut self) {
        self.rotate_params = ::std::option::Option::None;
    }

    pub fn has_axis_speed(&self) -> bool {
        match self.rotate_params {
            ::std::option::Option::Some(route_point::Rotate_params::AxisSpeed(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_axis_speed(&mut self, v: super::MathQuaternion::MathQuaternion) {
        self.rotate_params = ::std::option::Option::Some(route_point::Rotate_params::AxisSpeed(v))
    }

    // Mutable pointer to the field.
    pub fn mut_axis_speed(&mut self) -> &mut super::MathQuaternion::MathQuaternion {
        if let ::std::option::Option::Some(route_point::Rotate_params::AxisSpeed(_)) = self.rotate_params {
        } else {
            self.rotate_params = ::std::option::Option::Some(route_point::Rotate_params::AxisSpeed(super::MathQuaternion::MathQuaternion::new()));
        }
        match self.rotate_params {
            ::std::option::Option::Some(route_point::Rotate_params::AxisSpeed(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_axis_speed(&mut self) -> super::MathQuaternion::MathQuaternion {
        if self.has_axis_speed() {
            match self.rotate_params.take() {
                ::std::option::Option::Some(route_point::Rotate_params::AxisSpeed(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MathQuaternion::MathQuaternion::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "position",
            |m: &RoutePoint| { &m.position },
            |m: &mut RoutePoint| { &mut m.position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "arrive_range",
            |m: &RoutePoint| { &m.arrive_range },
            |m: &mut RoutePoint| { &mut m.arrive_range },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_reach_event",
            |m: &RoutePoint| { &m.has_reach_event },
            |m: &mut RoutePoint| { &mut m.has_reach_event },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "velocity",
            RoutePoint::has_velocity,
            RoutePoint::velocity,
            RoutePoint::set_velocity,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "time",
            RoutePoint::has_time,
            RoutePoint::time,
            RoutePoint::set_time,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::Vector::Vector>(
            "rotation",
            RoutePoint::has_rotation,
            RoutePoint::rotation,
            RoutePoint::mut_rotation,
            RoutePoint::set_rotation,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MathQuaternion::MathQuaternion>(
            "rotation_speed",
            RoutePoint::has_rotation_speed,
            RoutePoint::rotation_speed,
            RoutePoint::mut_rotation_speed,
            RoutePoint::set_rotation_speed,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MathQuaternion::MathQuaternion>(
            "axis_speed",
            RoutePoint::has_axis_speed,
            RoutePoint::axis_speed,
            RoutePoint::mut_axis_speed,
            RoutePoint::set_axis_speed,
        ));
        oneofs.push(route_point::Move_params::generated_oneof_descriptor_data());
        oneofs.push(route_point::Rotate_params::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RoutePoint>(
            "RoutePoint",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RoutePoint {
    const NAME: &'static str = "RoutePoint";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.position)?;
                },
                21 => {
                    self.arrive_range = is.read_float()?;
                },
                24 => {
                    self.has_reach_event = is.read_bool()?;
                },
                93 => {
                    self.move_params = ::std::option::Option::Some(route_point::Move_params::Velocity(is.read_float()?));
                },
                101 => {
                    self.move_params = ::std::option::Option::Some(route_point::Move_params::Time(is.read_float()?));
                },
                170 => {
                    self.rotate_params = ::std::option::Option::Some(route_point::Rotate_params::Rotation(is.read_message()?));
                },
                178 => {
                    self.rotate_params = ::std::option::Option::Some(route_point::Rotate_params::RotationSpeed(is.read_message()?));
                },
                186 => {
                    self.rotate_params = ::std::option::Option::Some(route_point::Rotate_params::AxisSpeed(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.arrive_range != 0. {
            my_size += 1 + 4;
        }
        if self.has_reach_event != false {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.move_params {
            match v {
                &route_point::Move_params::Velocity(v) => {
                    my_size += 1 + 4;
                },
                &route_point::Move_params::Time(v) => {
                    my_size += 1 + 4;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.rotate_params {
            match v {
                &route_point::Rotate_params::Rotation(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &route_point::Rotate_params::RotationSpeed(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &route_point::Rotate_params::AxisSpeed(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.arrive_range != 0. {
            os.write_float(2, self.arrive_range)?;
        }
        if self.has_reach_event != false {
            os.write_bool(3, self.has_reach_event)?;
        }
        if let ::std::option::Option::Some(ref v) = self.move_params {
            match v {
                &route_point::Move_params::Velocity(v) => {
                    os.write_float(11, v)?;
                },
                &route_point::Move_params::Time(v) => {
                    os.write_float(12, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.rotate_params {
            match v {
                &route_point::Rotate_params::Rotation(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
                },
                &route_point::Rotate_params::RotationSpeed(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(22, v, os)?;
                },
                &route_point::Rotate_params::AxisSpeed(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(23, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RoutePoint {
        RoutePoint::new()
    }

    fn clear(&mut self) {
        self.position.clear();
        self.arrive_range = 0.;
        self.has_reach_event = false;
        self.move_params = ::std::option::Option::None;
        self.move_params = ::std::option::Option::None;
        self.rotate_params = ::std::option::Option::None;
        self.rotate_params = ::std::option::Option::None;
        self.rotate_params = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RoutePoint {
        static instance: RoutePoint = RoutePoint {
            position: ::protobuf::MessageField::none(),
            arrive_range: 0.,
            has_reach_event: false,
            move_params: ::std::option::Option::None,
            rotate_params: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RoutePoint {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RoutePoint").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RoutePoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoutePoint {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RoutePoint`
pub mod route_point {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:RoutePoint.move_params)
    pub enum Move_params {
        // @@protoc_insertion_point(oneof_field:RoutePoint.velocity)
        Velocity(f32),
        // @@protoc_insertion_point(oneof_field:RoutePoint.time)
        Time(f32),
    }

    impl ::protobuf::Oneof for Move_params {
    }

    impl ::protobuf::OneofFull for Move_params {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RoutePoint as ::protobuf::MessageFull>::descriptor().oneof_by_name("move_params").unwrap()).clone()
        }
    }

    impl Move_params {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Move_params>("move_params")
        }
    }

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:RoutePoint.rotate_params)
    pub enum Rotate_params {
        // @@protoc_insertion_point(oneof_field:RoutePoint.rotation)
        Rotation(super::super::Vector::Vector),
        // @@protoc_insertion_point(oneof_field:RoutePoint.rotation_speed)
        RotationSpeed(super::super::MathQuaternion::MathQuaternion),
        // @@protoc_insertion_point(oneof_field:RoutePoint.axis_speed)
        AxisSpeed(super::super::MathQuaternion::MathQuaternion),
    }

    impl ::protobuf::Oneof for Rotate_params {
    }

    impl ::protobuf::OneofFull for Rotate_params {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RoutePoint as ::protobuf::MessageFull>::descriptor().oneof_by_name("rotate_params").unwrap()).clone()
        }
    }

    impl Rotate_params {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Rotate_params>("rotate_params")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10RoutePoint.proto\x1a\x0cVector.proto\x1a\x14MathQuaternion.proto\"\
    \xe3\x02\n\nRoutePoint\x12#\n\x08position\x18\x01\x20\x01(\x0b2\x07.Vect\
    orR\x08position\x12!\n\x0carrive_range\x18\x02\x20\x01(\x02R\x0barriveRa\
    nge\x12&\n\x0fhas_reach_event\x18\x03\x20\x01(\x08R\rhasReachEvent\x12\
    \x1c\n\x08velocity\x18\x0b\x20\x01(\x02H\0R\x08velocity\x12\x14\n\x04tim\
    e\x18\x0c\x20\x01(\x02H\0R\x04time\x12%\n\x08rotation\x18\x15\x20\x01(\
    \x0b2\x07.VectorH\x01R\x08rotation\x128\n\x0erotation_speed\x18\x16\x20\
    \x01(\x0b2\x0f.MathQuaternionH\x01R\rrotationSpeed\x120\n\naxis_speed\
    \x18\x17\x20\x01(\x0b2\x0f.MathQuaternionH\x01R\taxisSpeedB\r\n\x0bmove_\
    paramsB\x0f\n\rrotate_paramsB\x1b\n\x19emu.grasscutter.net.protob\x06pro\
    to3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::Vector::file_descriptor().clone());
            deps.push(super::MathQuaternion::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RoutePoint::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
