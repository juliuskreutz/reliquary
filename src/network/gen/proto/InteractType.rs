// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `InteractType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:InteractType)
pub enum InteractType {
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_NONE)
    INTERACT_TYPE_NONE = 0,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_PICK_ITEM)
    INTERACT_TYPE_PICK_ITEM = 1,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_GATHER)
    INTERACT_TYPE_GATHER = 2,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_OPEN_CHEST)
    INTERACT_TYPE_OPEN_CHEST = 3,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_OPEN_STATUE)
    INTERACT_TYPE_OPEN_STATUE = 4,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_CONSUM)
    INTERACT_TYPE_CONSUM = 5,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_MP_PLAY_REWARD)
    INTERACT_TYPE_MP_PLAY_REWARD = 6,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_VIEW)
    INTERACT_TYPE_VIEW = 7,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_GENERAL_REWARD)
    INTERACT_TYPE_GENERAL_REWARD = 8,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_MIRACLE_RING)
    INTERACT_TYPE_MIRACLE_RING = 9,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_FOUNDATION)
    INTERACT_TYPE_FOUNDATION = 10,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_ECHO_SHELL)
    INTERACT_TYPE_ECHO_SHELL = 11,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_HOME_GATHER)
    INTERACT_TYPE_HOME_GATHER = 12,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_ENV_ANIMAL)
    INTERACT_TYPE_ENV_ANIMAL = 13,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_QUEST_GADGET)
    INTERACT_TYPE_QUEST_GADGET = 14,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_UI_INTERACT)
    INTERACT_TYPE_UI_INTERACT = 15,
    // @@protoc_insertion_point(enum_value:InteractType.INTERACT_TYPE_DESHRET_OBELISK)
    INTERACT_TYPE_DESHRET_OBELISK = 16,
}

impl ::protobuf::Enum for InteractType {
    const NAME: &'static str = "InteractType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<InteractType> {
        match value {
            0 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_NONE),
            1 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_PICK_ITEM),
            2 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_GATHER),
            3 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_OPEN_CHEST),
            4 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_OPEN_STATUE),
            5 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_CONSUM),
            6 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_MP_PLAY_REWARD),
            7 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_VIEW),
            8 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_GENERAL_REWARD),
            9 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_MIRACLE_RING),
            10 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_FOUNDATION),
            11 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_ECHO_SHELL),
            12 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_HOME_GATHER),
            13 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_ENV_ANIMAL),
            14 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_QUEST_GADGET),
            15 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_UI_INTERACT),
            16 => ::std::option::Option::Some(InteractType::INTERACT_TYPE_DESHRET_OBELISK),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<InteractType> {
        match str {
            "INTERACT_TYPE_NONE" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_NONE),
            "INTERACT_TYPE_PICK_ITEM" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_PICK_ITEM),
            "INTERACT_TYPE_GATHER" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_GATHER),
            "INTERACT_TYPE_OPEN_CHEST" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_OPEN_CHEST),
            "INTERACT_TYPE_OPEN_STATUE" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_OPEN_STATUE),
            "INTERACT_TYPE_CONSUM" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_CONSUM),
            "INTERACT_TYPE_MP_PLAY_REWARD" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_MP_PLAY_REWARD),
            "INTERACT_TYPE_VIEW" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_VIEW),
            "INTERACT_TYPE_GENERAL_REWARD" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_GENERAL_REWARD),
            "INTERACT_TYPE_MIRACLE_RING" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_MIRACLE_RING),
            "INTERACT_TYPE_FOUNDATION" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_FOUNDATION),
            "INTERACT_TYPE_ECHO_SHELL" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_ECHO_SHELL),
            "INTERACT_TYPE_HOME_GATHER" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_HOME_GATHER),
            "INTERACT_TYPE_ENV_ANIMAL" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_ENV_ANIMAL),
            "INTERACT_TYPE_QUEST_GADGET" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_QUEST_GADGET),
            "INTERACT_TYPE_UI_INTERACT" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_UI_INTERACT),
            "INTERACT_TYPE_DESHRET_OBELISK" => ::std::option::Option::Some(InteractType::INTERACT_TYPE_DESHRET_OBELISK),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [InteractType] = &[
        InteractType::INTERACT_TYPE_NONE,
        InteractType::INTERACT_TYPE_PICK_ITEM,
        InteractType::INTERACT_TYPE_GATHER,
        InteractType::INTERACT_TYPE_OPEN_CHEST,
        InteractType::INTERACT_TYPE_OPEN_STATUE,
        InteractType::INTERACT_TYPE_CONSUM,
        InteractType::INTERACT_TYPE_MP_PLAY_REWARD,
        InteractType::INTERACT_TYPE_VIEW,
        InteractType::INTERACT_TYPE_GENERAL_REWARD,
        InteractType::INTERACT_TYPE_MIRACLE_RING,
        InteractType::INTERACT_TYPE_FOUNDATION,
        InteractType::INTERACT_TYPE_ECHO_SHELL,
        InteractType::INTERACT_TYPE_HOME_GATHER,
        InteractType::INTERACT_TYPE_ENV_ANIMAL,
        InteractType::INTERACT_TYPE_QUEST_GADGET,
        InteractType::INTERACT_TYPE_UI_INTERACT,
        InteractType::INTERACT_TYPE_DESHRET_OBELISK,
    ];
}

impl ::protobuf::EnumFull for InteractType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("InteractType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for InteractType {
    fn default() -> Self {
        InteractType::INTERACT_TYPE_NONE
    }
}

impl InteractType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<InteractType>("InteractType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12InteractType.proto*\x8b\x04\n\x0cInteractType\x12\x16\n\x12INTERAC\
    T_TYPE_NONE\x10\0\x12\x1b\n\x17INTERACT_TYPE_PICK_ITEM\x10\x01\x12\x18\n\
    \x14INTERACT_TYPE_GATHER\x10\x02\x12\x1c\n\x18INTERACT_TYPE_OPEN_CHEST\
    \x10\x03\x12\x1d\n\x19INTERACT_TYPE_OPEN_STATUE\x10\x04\x12\x18\n\x14INT\
    ERACT_TYPE_CONSUM\x10\x05\x12\x20\n\x1cINTERACT_TYPE_MP_PLAY_REWARD\x10\
    \x06\x12\x16\n\x12INTERACT_TYPE_VIEW\x10\x07\x12\x20\n\x1cINTERACT_TYPE_\
    GENERAL_REWARD\x10\x08\x12\x1e\n\x1aINTERACT_TYPE_MIRACLE_RING\x10\t\x12\
    \x1c\n\x18INTERACT_TYPE_FOUNDATION\x10\n\x12\x1c\n\x18INTERACT_TYPE_ECHO\
    _SHELL\x10\x0b\x12\x1d\n\x19INTERACT_TYPE_HOME_GATHER\x10\x0c\x12\x1c\n\
    \x18INTERACT_TYPE_ENV_ANIMAL\x10\r\x12\x1e\n\x1aINTERACT_TYPE_QUEST_GADG\
    ET\x10\x0e\x12\x1d\n\x19INTERACT_TYPE_UI_INTERACT\x10\x0f\x12!\n\x1dINTE\
    RACT_TYPE_DESHRET_OBELISK\x10\x10B\x1b\n\x19emu.grasscutter.net.protob\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(InteractType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
