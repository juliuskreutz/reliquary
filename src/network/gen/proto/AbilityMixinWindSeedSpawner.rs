// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AbilityMixinWindSeedSpawner.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AbilityMixinWindSeedSpawner)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AbilityMixinWindSeedSpawner {
    // message oneof groups
    pub cmd: ::std::option::Option<ability_mixin_wind_seed_spawner::Cmd>,
    // special fields
    // @@protoc_insertion_point(special_field:AbilityMixinWindSeedSpawner.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AbilityMixinWindSeedSpawner {
    fn default() -> &'a AbilityMixinWindSeedSpawner {
        <AbilityMixinWindSeedSpawner as ::protobuf::Message>::default_instance()
    }
}

impl AbilityMixinWindSeedSpawner {
    pub fn new() -> AbilityMixinWindSeedSpawner {
        ::std::default::Default::default()
    }

    // .AbilityMixinWindSeedSpawner.AddSignal add_signal = 11;

    pub fn add_signal(&self) -> &ability_mixin_wind_seed_spawner::AddSignal {
        match self.cmd {
            ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::AddSignal(ref v)) => v,
            _ => <ability_mixin_wind_seed_spawner::AddSignal as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_add_signal(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_add_signal(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::AddSignal(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_add_signal(&mut self, v: ability_mixin_wind_seed_spawner::AddSignal) {
        self.cmd = ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::AddSignal(v))
    }

    // Mutable pointer to the field.
    pub fn mut_add_signal(&mut self) -> &mut ability_mixin_wind_seed_spawner::AddSignal {
        if let ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::AddSignal(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::AddSignal(ability_mixin_wind_seed_spawner::AddSignal::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::AddSignal(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_add_signal(&mut self) -> ability_mixin_wind_seed_spawner::AddSignal {
        if self.has_add_signal() {
            match self.cmd.take() {
                ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::AddSignal(v)) => v,
                _ => panic!(),
            }
        } else {
            ability_mixin_wind_seed_spawner::AddSignal::new()
        }
    }

    // .AbilityMixinWindSeedSpawner.RefreshSeed refresh_seed = 9;

    pub fn refresh_seed(&self) -> &ability_mixin_wind_seed_spawner::RefreshSeed {
        match self.cmd {
            ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::RefreshSeed(ref v)) => v,
            _ => <ability_mixin_wind_seed_spawner::RefreshSeed as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_refresh_seed(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_refresh_seed(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::RefreshSeed(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_refresh_seed(&mut self, v: ability_mixin_wind_seed_spawner::RefreshSeed) {
        self.cmd = ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::RefreshSeed(v))
    }

    // Mutable pointer to the field.
    pub fn mut_refresh_seed(&mut self) -> &mut ability_mixin_wind_seed_spawner::RefreshSeed {
        if let ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::RefreshSeed(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::RefreshSeed(ability_mixin_wind_seed_spawner::RefreshSeed::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::RefreshSeed(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_refresh_seed(&mut self) -> ability_mixin_wind_seed_spawner::RefreshSeed {
        if self.has_refresh_seed() {
            match self.cmd.take() {
                ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::RefreshSeed(v)) => v,
                _ => panic!(),
            }
        } else {
            ability_mixin_wind_seed_spawner::RefreshSeed::new()
        }
    }

    // .AbilityMixinWindSeedSpawner.CatchSeed catch_seed = 2;

    pub fn catch_seed(&self) -> &ability_mixin_wind_seed_spawner::CatchSeed {
        match self.cmd {
            ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::CatchSeed(ref v)) => v,
            _ => <ability_mixin_wind_seed_spawner::CatchSeed as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_catch_seed(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_catch_seed(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::CatchSeed(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_catch_seed(&mut self, v: ability_mixin_wind_seed_spawner::CatchSeed) {
        self.cmd = ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::CatchSeed(v))
    }

    // Mutable pointer to the field.
    pub fn mut_catch_seed(&mut self) -> &mut ability_mixin_wind_seed_spawner::CatchSeed {
        if let ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::CatchSeed(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::CatchSeed(ability_mixin_wind_seed_spawner::CatchSeed::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::CatchSeed(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_catch_seed(&mut self) -> ability_mixin_wind_seed_spawner::CatchSeed {
        if self.has_catch_seed() {
            match self.cmd.take() {
                ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::CatchSeed(v)) => v,
                _ => panic!(),
            }
        } else {
            ability_mixin_wind_seed_spawner::CatchSeed::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ability_mixin_wind_seed_spawner::AddSignal>(
            "add_signal",
            AbilityMixinWindSeedSpawner::has_add_signal,
            AbilityMixinWindSeedSpawner::add_signal,
            AbilityMixinWindSeedSpawner::mut_add_signal,
            AbilityMixinWindSeedSpawner::set_add_signal,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ability_mixin_wind_seed_spawner::RefreshSeed>(
            "refresh_seed",
            AbilityMixinWindSeedSpawner::has_refresh_seed,
            AbilityMixinWindSeedSpawner::refresh_seed,
            AbilityMixinWindSeedSpawner::mut_refresh_seed,
            AbilityMixinWindSeedSpawner::set_refresh_seed,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ability_mixin_wind_seed_spawner::CatchSeed>(
            "catch_seed",
            AbilityMixinWindSeedSpawner::has_catch_seed,
            AbilityMixinWindSeedSpawner::catch_seed,
            AbilityMixinWindSeedSpawner::mut_catch_seed,
            AbilityMixinWindSeedSpawner::set_catch_seed,
        ));
        oneofs.push(ability_mixin_wind_seed_spawner::Cmd::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AbilityMixinWindSeedSpawner>(
            "AbilityMixinWindSeedSpawner",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AbilityMixinWindSeedSpawner {
    const NAME: &'static str = "AbilityMixinWindSeedSpawner";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                90 => {
                    self.cmd = ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::AddSignal(is.read_message()?));
                },
                74 => {
                    self.cmd = ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::RefreshSeed(is.read_message()?));
                },
                18 => {
                    self.cmd = ::std::option::Option::Some(ability_mixin_wind_seed_spawner::Cmd::CatchSeed(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &ability_mixin_wind_seed_spawner::Cmd::AddSignal(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ability_mixin_wind_seed_spawner::Cmd::RefreshSeed(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ability_mixin_wind_seed_spawner::Cmd::CatchSeed(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &ability_mixin_wind_seed_spawner::Cmd::AddSignal(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &ability_mixin_wind_seed_spawner::Cmd::RefreshSeed(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &ability_mixin_wind_seed_spawner::Cmd::CatchSeed(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AbilityMixinWindSeedSpawner {
        AbilityMixinWindSeedSpawner::new()
    }

    fn clear(&mut self) {
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AbilityMixinWindSeedSpawner {
        static instance: AbilityMixinWindSeedSpawner = AbilityMixinWindSeedSpawner {
            cmd: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AbilityMixinWindSeedSpawner {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AbilityMixinWindSeedSpawner").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AbilityMixinWindSeedSpawner {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AbilityMixinWindSeedSpawner {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AbilityMixinWindSeedSpawner`
pub mod ability_mixin_wind_seed_spawner {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:AbilityMixinWindSeedSpawner.cmd)
    pub enum Cmd {
        // @@protoc_insertion_point(oneof_field:AbilityMixinWindSeedSpawner.add_signal)
        AddSignal(AddSignal),
        // @@protoc_insertion_point(oneof_field:AbilityMixinWindSeedSpawner.refresh_seed)
        RefreshSeed(RefreshSeed),
        // @@protoc_insertion_point(oneof_field:AbilityMixinWindSeedSpawner.catch_seed)
        CatchSeed(CatchSeed),
    }

    impl ::protobuf::Oneof for Cmd {
    }

    impl ::protobuf::OneofFull for Cmd {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AbilityMixinWindSeedSpawner as ::protobuf::MessageFull>::descriptor().oneof_by_name("cmd").unwrap()).clone()
        }
    }

    impl Cmd {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Cmd>("cmd")
        }
    }
    // @@protoc_insertion_point(message:AbilityMixinWindSeedSpawner.AddSignal)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AddSignal {
        // special fields
        // @@protoc_insertion_point(special_field:AbilityMixinWindSeedSpawner.AddSignal.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AddSignal {
        fn default() -> &'a AddSignal {
            <AddSignal as ::protobuf::Message>::default_instance()
        }
    }

    impl AddSignal {
        pub fn new() -> AddSignal {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(0);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddSignal>(
                "AbilityMixinWindSeedSpawner.AddSignal",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for AddSignal {
        const NAME: &'static str = "AddSignal";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AddSignal {
            AddSignal::new()
        }

        fn clear(&mut self) {
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AddSignal {
            static instance: AddSignal = AddSignal {
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for AddSignal {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("AbilityMixinWindSeedSpawner.AddSignal").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for AddSignal {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for AddSignal {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:AbilityMixinWindSeedSpawner.RefreshSeed)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RefreshSeed {
        // message fields
        // @@protoc_insertion_point(field:AbilityMixinWindSeedSpawner.RefreshSeed.pos_list)
        pub pos_list: ::std::vec::Vec<super::super::Vector::Vector>,
        // special fields
        // @@protoc_insertion_point(special_field:AbilityMixinWindSeedSpawner.RefreshSeed.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RefreshSeed {
        fn default() -> &'a RefreshSeed {
            <RefreshSeed as ::protobuf::Message>::default_instance()
        }
    }

    impl RefreshSeed {
        pub fn new() -> RefreshSeed {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "pos_list",
                |m: &RefreshSeed| { &m.pos_list },
                |m: &mut RefreshSeed| { &mut m.pos_list },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RefreshSeed>(
                "AbilityMixinWindSeedSpawner.RefreshSeed",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RefreshSeed {
        const NAME: &'static str = "RefreshSeed";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    90 => {
                        self.pos_list.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.pos_list {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.pos_list {
                ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RefreshSeed {
            RefreshSeed::new()
        }

        fn clear(&mut self) {
            self.pos_list.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RefreshSeed {
            static instance: RefreshSeed = RefreshSeed {
                pos_list: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RefreshSeed {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("AbilityMixinWindSeedSpawner.RefreshSeed").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RefreshSeed {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RefreshSeed {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:AbilityMixinWindSeedSpawner.CatchSeed)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CatchSeed {
        // message fields
        // @@protoc_insertion_point(field:AbilityMixinWindSeedSpawner.CatchSeed.entity_id)
        pub entity_id: u32,
        // special fields
        // @@protoc_insertion_point(special_field:AbilityMixinWindSeedSpawner.CatchSeed.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CatchSeed {
        fn default() -> &'a CatchSeed {
            <CatchSeed as ::protobuf::Message>::default_instance()
        }
    }

    impl CatchSeed {
        pub fn new() -> CatchSeed {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "entity_id",
                |m: &CatchSeed| { &m.entity_id },
                |m: &mut CatchSeed| { &mut m.entity_id },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CatchSeed>(
                "AbilityMixinWindSeedSpawner.CatchSeed",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for CatchSeed {
        const NAME: &'static str = "CatchSeed";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    120 => {
                        self.entity_id = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.entity_id != 0 {
                my_size += ::protobuf::rt::uint32_size(15, self.entity_id);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.entity_id != 0 {
                os.write_uint32(15, self.entity_id)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CatchSeed {
            CatchSeed::new()
        }

        fn clear(&mut self) {
            self.entity_id = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CatchSeed {
            static instance: CatchSeed = CatchSeed {
                entity_id: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for CatchSeed {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("AbilityMixinWindSeedSpawner.CatchSeed").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for CatchSeed {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CatchSeed {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!AbilityMixinWindSeedSpawner.proto\x1a\x0cVector.proto\"\xef\x02\n\x1b\
    AbilityMixinWindSeedSpawner\x12G\n\nadd_signal\x18\x0b\x20\x01(\x0b2&.Ab\
    ilityMixinWindSeedSpawner.AddSignalH\0R\taddSignal\x12M\n\x0crefresh_see\
    d\x18\t\x20\x01(\x0b2(.AbilityMixinWindSeedSpawner.RefreshSeedH\0R\x0bre\
    freshSeed\x12G\n\ncatch_seed\x18\x02\x20\x01(\x0b2&.AbilityMixinWindSeed\
    Spawner.CatchSeedH\0R\tcatchSeed\x1a\x0b\n\tAddSignal\x1a1\n\x0bRefreshS\
    eed\x12\"\n\x08pos_list\x18\x0b\x20\x03(\x0b2\x07.VectorR\x07posList\x1a\
    (\n\tCatchSeed\x12\x1b\n\tentity_id\x18\x0f\x20\x01(\rR\x08entityIdB\x05\
    \n\x03cmdB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::Vector::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(AbilityMixinWindSeedSpawner::generated_message_descriptor_data());
            messages.push(ability_mixin_wind_seed_spawner::AddSignal::generated_message_descriptor_data());
            messages.push(ability_mixin_wind_seed_spawner::RefreshSeed::generated_message_descriptor_data());
            messages.push(ability_mixin_wind_seed_spawner::CatchSeed::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
