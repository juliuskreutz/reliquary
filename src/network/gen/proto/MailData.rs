// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MailData.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:MailData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MailData {
    // message fields
    // @@protoc_insertion_point(field:MailData.mailId)
    pub mailId: u32,
    // @@protoc_insertion_point(field:MailData.mail_text_content)
    pub mail_text_content: ::protobuf::MessageField<super::MailTextContent::MailTextContent>,
    // @@protoc_insertion_point(field:MailData.item_list)
    pub item_list: ::std::vec::Vec<super::MailItem::MailItem>,
    // @@protoc_insertion_point(field:MailData.send_time)
    pub send_time: u32,
    // @@protoc_insertion_point(field:MailData.expire_time)
    pub expire_time: u32,
    // @@protoc_insertion_point(field:MailData.importance)
    pub importance: u32,
    // @@protoc_insertion_point(field:MailData.is_read)
    pub is_read: bool,
    // @@protoc_insertion_point(field:MailData.is_attachment_got)
    pub is_attachment_got: bool,
    // @@protoc_insertion_point(field:MailData.config_id)
    pub config_id: u32,
    // @@protoc_insertion_point(field:MailData.argument_list)
    pub argument_list: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:MailData.collect_state)
    pub collect_state: ::protobuf::EnumOrUnknown<super::MailCollectState::MailCollectState>,
    // special fields
    // @@protoc_insertion_point(special_field:MailData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MailData {
    fn default() -> &'a MailData {
        <MailData as ::protobuf::Message>::default_instance()
    }
}

impl MailData {
    pub fn new() -> MailData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mailId",
            |m: &MailData| { &m.mailId },
            |m: &mut MailData| { &mut m.mailId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MailTextContent::MailTextContent>(
            "mail_text_content",
            |m: &MailData| { &m.mail_text_content },
            |m: &mut MailData| { &mut m.mail_text_content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "item_list",
            |m: &MailData| { &m.item_list },
            |m: &mut MailData| { &mut m.item_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "send_time",
            |m: &MailData| { &m.send_time },
            |m: &mut MailData| { &mut m.send_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expire_time",
            |m: &MailData| { &m.expire_time },
            |m: &mut MailData| { &mut m.expire_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "importance",
            |m: &MailData| { &m.importance },
            |m: &mut MailData| { &mut m.importance },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_read",
            |m: &MailData| { &m.is_read },
            |m: &mut MailData| { &mut m.is_read },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_attachment_got",
            |m: &MailData| { &m.is_attachment_got },
            |m: &mut MailData| { &mut m.is_attachment_got },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "config_id",
            |m: &MailData| { &m.config_id },
            |m: &mut MailData| { &mut m.config_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "argument_list",
            |m: &MailData| { &m.argument_list },
            |m: &mut MailData| { &mut m.argument_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "collect_state",
            |m: &MailData| { &m.collect_state },
            |m: &mut MailData| { &mut m.collect_state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MailData>(
            "MailData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MailData {
    const NAME: &'static str = "MailData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.mailId = is.read_uint32()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.mail_text_content)?;
                },
                58 => {
                    self.item_list.push(is.read_message()?);
                },
                64 => {
                    self.send_time = is.read_uint32()?;
                },
                72 => {
                    self.expire_time = is.read_uint32()?;
                },
                80 => {
                    self.importance = is.read_uint32()?;
                },
                88 => {
                    self.is_read = is.read_bool()?;
                },
                96 => {
                    self.is_attachment_got = is.read_bool()?;
                },
                104 => {
                    self.config_id = is.read_uint32()?;
                },
                114 => {
                    self.argument_list.push(is.read_string()?);
                },
                120 => {
                    self.collect_state = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.mailId != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.mailId);
        }
        if let Some(v) = self.mail_text_content.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.item_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.send_time != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.send_time);
        }
        if self.expire_time != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.expire_time);
        }
        if self.importance != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.importance);
        }
        if self.is_read != false {
            my_size += 1 + 1;
        }
        if self.is_attachment_got != false {
            my_size += 1 + 1;
        }
        if self.config_id != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.config_id);
        }
        for value in &self.argument_list {
            my_size += ::protobuf::rt::string_size(14, &value);
        };
        if self.collect_state != ::protobuf::EnumOrUnknown::new(super::MailCollectState::MailCollectState::MAIL_COLLECT_STATE_COLLECTIBLE_UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(15, self.collect_state.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.mailId != 0 {
            os.write_uint32(1, self.mailId)?;
        }
        if let Some(v) = self.mail_text_content.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for v in &self.item_list {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.send_time != 0 {
            os.write_uint32(8, self.send_time)?;
        }
        if self.expire_time != 0 {
            os.write_uint32(9, self.expire_time)?;
        }
        if self.importance != 0 {
            os.write_uint32(10, self.importance)?;
        }
        if self.is_read != false {
            os.write_bool(11, self.is_read)?;
        }
        if self.is_attachment_got != false {
            os.write_bool(12, self.is_attachment_got)?;
        }
        if self.config_id != 0 {
            os.write_uint32(13, self.config_id)?;
        }
        for v in &self.argument_list {
            os.write_string(14, &v)?;
        };
        if self.collect_state != ::protobuf::EnumOrUnknown::new(super::MailCollectState::MailCollectState::MAIL_COLLECT_STATE_COLLECTIBLE_UNKNOWN) {
            os.write_enum(15, ::protobuf::EnumOrUnknown::value(&self.collect_state))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MailData {
        MailData::new()
    }

    fn clear(&mut self) {
        self.mailId = 0;
        self.mail_text_content.clear();
        self.item_list.clear();
        self.send_time = 0;
        self.expire_time = 0;
        self.importance = 0;
        self.is_read = false;
        self.is_attachment_got = false;
        self.config_id = 0;
        self.argument_list.clear();
        self.collect_state = ::protobuf::EnumOrUnknown::new(super::MailCollectState::MailCollectState::MAIL_COLLECT_STATE_COLLECTIBLE_UNKNOWN);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MailData {
        static instance: MailData = MailData {
            mailId: 0,
            mail_text_content: ::protobuf::MessageField::none(),
            item_list: ::std::vec::Vec::new(),
            send_time: 0,
            expire_time: 0,
            importance: 0,
            is_read: false,
            is_attachment_got: false,
            config_id: 0,
            argument_list: ::std::vec::Vec::new(),
            collect_state: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MailData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MailData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MailData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MailData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eMailData.proto\x1a\x15MailTextContent.proto\x1a\x0eMailItem.proto\
    \x1a\x16MailCollectState.proto\"\xa5\x03\n\x08MailData\x12\x16\n\x06mail\
    Id\x18\x01\x20\x01(\rR\x06mailId\x12<\n\x11mail_text_content\x18\x04\x20\
    \x01(\x0b2\x10.MailTextContentR\x0fmailTextContent\x12&\n\titem_list\x18\
    \x07\x20\x03(\x0b2\t.MailItemR\x08itemList\x12\x1b\n\tsend_time\x18\x08\
    \x20\x01(\rR\x08sendTime\x12\x1f\n\x0bexpire_time\x18\t\x20\x01(\rR\nexp\
    ireTime\x12\x1e\n\nimportance\x18\n\x20\x01(\rR\nimportance\x12\x17\n\
    \x07is_read\x18\x0b\x20\x01(\x08R\x06isRead\x12*\n\x11is_attachment_got\
    \x18\x0c\x20\x01(\x08R\x0fisAttachmentGot\x12\x1b\n\tconfig_id\x18\r\x20\
    \x01(\rR\x08configId\x12#\n\rargument_list\x18\x0e\x20\x03(\tR\x0cargume\
    ntList\x126\n\rcollect_state\x18\x0f\x20\x01(\x0e2\x11.MailCollectStateR\
    \x0ccollectStateB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::MailTextContent::file_descriptor().clone());
            deps.push(super::MailItem::file_descriptor().clone());
            deps.push(super::MailCollectState::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MailData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
