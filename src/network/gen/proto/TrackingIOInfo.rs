// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `TrackingIOInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:TrackingIOInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TrackingIOInfo {
    // message fields
    // @@protoc_insertion_point(field:TrackingIOInfo.JFEEMKEKMKN)
    pub JFEEMKEKMKN: ::std::string::String,
    // @@protoc_insertion_point(field:TrackingIOInfo.FCPKNHGBLCF)
    pub FCPKNHGBLCF: ::std::string::String,
    // @@protoc_insertion_point(field:TrackingIOInfo.OHMDCAEDJPG)
    pub OHMDCAEDJPG: ::std::string::String,
    // @@protoc_insertion_point(field:TrackingIOInfo.DPKNOBIHNPI)
    pub DPKNOBIHNPI: ::std::string::String,
    // @@protoc_insertion_point(field:TrackingIOInfo.MDBEAHIPNIC)
    pub MDBEAHIPNIC: ::std::string::String,
    // @@protoc_insertion_point(field:TrackingIOInfo.LCNCLEJILOF)
    pub LCNCLEJILOF: ::std::string::String,
    // @@protoc_insertion_point(field:TrackingIOInfo.GIAEKBEHJIC)
    pub GIAEKBEHJIC: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:TrackingIOInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TrackingIOInfo {
    fn default() -> &'a TrackingIOInfo {
        <TrackingIOInfo as ::protobuf::Message>::default_instance()
    }
}

impl TrackingIOInfo {
    pub fn new() -> TrackingIOInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JFEEMKEKMKN",
            |m: &TrackingIOInfo| { &m.JFEEMKEKMKN },
            |m: &mut TrackingIOInfo| { &mut m.JFEEMKEKMKN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FCPKNHGBLCF",
            |m: &TrackingIOInfo| { &m.FCPKNHGBLCF },
            |m: &mut TrackingIOInfo| { &mut m.FCPKNHGBLCF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OHMDCAEDJPG",
            |m: &TrackingIOInfo| { &m.OHMDCAEDJPG },
            |m: &mut TrackingIOInfo| { &mut m.OHMDCAEDJPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DPKNOBIHNPI",
            |m: &TrackingIOInfo| { &m.DPKNOBIHNPI },
            |m: &mut TrackingIOInfo| { &mut m.DPKNOBIHNPI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MDBEAHIPNIC",
            |m: &TrackingIOInfo| { &m.MDBEAHIPNIC },
            |m: &mut TrackingIOInfo| { &mut m.MDBEAHIPNIC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LCNCLEJILOF",
            |m: &TrackingIOInfo| { &m.LCNCLEJILOF },
            |m: &mut TrackingIOInfo| { &mut m.LCNCLEJILOF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GIAEKBEHJIC",
            |m: &TrackingIOInfo| { &m.GIAEKBEHJIC },
            |m: &mut TrackingIOInfo| { &mut m.GIAEKBEHJIC },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TrackingIOInfo>(
            "TrackingIOInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TrackingIOInfo {
    const NAME: &'static str = "TrackingIOInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    self.JFEEMKEKMKN = is.read_string()?;
                },
                58 => {
                    self.FCPKNHGBLCF = is.read_string()?;
                },
                122 => {
                    self.OHMDCAEDJPG = is.read_string()?;
                },
                34 => {
                    self.DPKNOBIHNPI = is.read_string()?;
                },
                10 => {
                    self.MDBEAHIPNIC = is.read_string()?;
                },
                90 => {
                    self.LCNCLEJILOF = is.read_string()?;
                },
                98 => {
                    self.GIAEKBEHJIC = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.JFEEMKEKMKN.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.JFEEMKEKMKN);
        }
        if !self.FCPKNHGBLCF.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.FCPKNHGBLCF);
        }
        if !self.OHMDCAEDJPG.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.OHMDCAEDJPG);
        }
        if !self.DPKNOBIHNPI.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.DPKNOBIHNPI);
        }
        if !self.MDBEAHIPNIC.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.MDBEAHIPNIC);
        }
        if !self.LCNCLEJILOF.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.LCNCLEJILOF);
        }
        if !self.GIAEKBEHJIC.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.GIAEKBEHJIC);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.JFEEMKEKMKN.is_empty() {
            os.write_string(6, &self.JFEEMKEKMKN)?;
        }
        if !self.FCPKNHGBLCF.is_empty() {
            os.write_string(7, &self.FCPKNHGBLCF)?;
        }
        if !self.OHMDCAEDJPG.is_empty() {
            os.write_string(15, &self.OHMDCAEDJPG)?;
        }
        if !self.DPKNOBIHNPI.is_empty() {
            os.write_string(4, &self.DPKNOBIHNPI)?;
        }
        if !self.MDBEAHIPNIC.is_empty() {
            os.write_string(1, &self.MDBEAHIPNIC)?;
        }
        if !self.LCNCLEJILOF.is_empty() {
            os.write_string(11, &self.LCNCLEJILOF)?;
        }
        if !self.GIAEKBEHJIC.is_empty() {
            os.write_string(12, &self.GIAEKBEHJIC)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TrackingIOInfo {
        TrackingIOInfo::new()
    }

    fn clear(&mut self) {
        self.JFEEMKEKMKN.clear();
        self.FCPKNHGBLCF.clear();
        self.OHMDCAEDJPG.clear();
        self.DPKNOBIHNPI.clear();
        self.MDBEAHIPNIC.clear();
        self.LCNCLEJILOF.clear();
        self.GIAEKBEHJIC.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TrackingIOInfo {
        static instance: TrackingIOInfo = TrackingIOInfo {
            JFEEMKEKMKN: ::std::string::String::new(),
            FCPKNHGBLCF: ::std::string::String::new(),
            OHMDCAEDJPG: ::std::string::String::new(),
            DPKNOBIHNPI: ::std::string::String::new(),
            MDBEAHIPNIC: ::std::string::String::new(),
            LCNCLEJILOF: ::std::string::String::new(),
            GIAEKBEHJIC: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TrackingIOInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TrackingIOInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TrackingIOInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackingIOInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14TrackingIOInfo.proto\"\xfe\x01\n\x0eTrackingIOInfo\x12\x20\n\x0bJF\
    EEMKEKMKN\x18\x06\x20\x01(\tR\x0bJFEEMKEKMKN\x12\x20\n\x0bFCPKNHGBLCF\
    \x18\x07\x20\x01(\tR\x0bFCPKNHGBLCF\x12\x20\n\x0bOHMDCAEDJPG\x18\x0f\x20\
    \x01(\tR\x0bOHMDCAEDJPG\x12\x20\n\x0bDPKNOBIHNPI\x18\x04\x20\x01(\tR\x0b\
    DPKNOBIHNPI\x12\x20\n\x0bMDBEAHIPNIC\x18\x01\x20\x01(\tR\x0bMDBEAHIPNIC\
    \x12\x20\n\x0bLCNCLEJILOF\x18\x0b\x20\x01(\tR\x0bLCNCLEJILOF\x12\x20\n\
    \x0bGIAEKBEHJIC\x18\x0c\x20\x01(\tR\x0bGIAEKBEHJICB\x1b\n\x19emu.grasscu\
    tter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(TrackingIOInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
