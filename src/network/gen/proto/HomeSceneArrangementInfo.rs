// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HomeSceneArrangementInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:HomeSceneArrangementInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HomeSceneArrangementInfo {
    // message fields
    // @@protoc_insertion_point(field:HomeSceneArrangementInfo.block_arrangement_info_list)
    pub block_arrangement_info_list: ::std::vec::Vec<super::HomeBlockArrangementInfo::HomeBlockArrangementInfo>,
    // @@protoc_insertion_point(field:HomeSceneArrangementInfo.HDOFAHGPJGK)
    pub HDOFAHGPJGK: ::std::vec::Vec<super::HomeFurnitureData::HomeFurnitureData>,
    // @@protoc_insertion_point(field:HomeSceneArrangementInfo.MLECLIOFALA)
    pub MLECLIOFALA: ::std::vec::Vec<super::HomeFurnitureData::HomeFurnitureData>,
    // @@protoc_insertion_point(field:HomeSceneArrangementInfo.born_rot)
    pub born_rot: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:HomeSceneArrangementInfo.scene_id)
    pub scene_id: u32,
    // @@protoc_insertion_point(field:HomeSceneArrangementInfo.bgm_id)
    pub bgm_id: u32,
    // @@protoc_insertion_point(field:HomeSceneArrangementInfo.comfort_value)
    pub comfort_value: u32,
    // @@protoc_insertion_point(field:HomeSceneArrangementInfo.main_house)
    pub main_house: ::protobuf::MessageField<super::HomeFurnitureData::HomeFurnitureData>,
    // @@protoc_insertion_point(field:HomeSceneArrangementInfo.tmp_version)
    pub tmp_version: u32,
    // @@protoc_insertion_point(field:HomeSceneArrangementInfo.is_set_born_pos)
    pub is_set_born_pos: bool,
    // @@protoc_insertion_point(field:HomeSceneArrangementInfo.djinn_pos)
    pub djinn_pos: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:HomeSceneArrangementInfo.born_pos)
    pub born_pos: ::protobuf::MessageField<super::Vector::Vector>,
    // special fields
    // @@protoc_insertion_point(special_field:HomeSceneArrangementInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HomeSceneArrangementInfo {
    fn default() -> &'a HomeSceneArrangementInfo {
        <HomeSceneArrangementInfo as ::protobuf::Message>::default_instance()
    }
}

impl HomeSceneArrangementInfo {
    pub fn new() -> HomeSceneArrangementInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "block_arrangement_info_list",
            |m: &HomeSceneArrangementInfo| { &m.block_arrangement_info_list },
            |m: &mut HomeSceneArrangementInfo| { &mut m.block_arrangement_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HDOFAHGPJGK",
            |m: &HomeSceneArrangementInfo| { &m.HDOFAHGPJGK },
            |m: &mut HomeSceneArrangementInfo| { &mut m.HDOFAHGPJGK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MLECLIOFALA",
            |m: &HomeSceneArrangementInfo| { &m.MLECLIOFALA },
            |m: &mut HomeSceneArrangementInfo| { &mut m.MLECLIOFALA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "born_rot",
            |m: &HomeSceneArrangementInfo| { &m.born_rot },
            |m: &mut HomeSceneArrangementInfo| { &mut m.born_rot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_id",
            |m: &HomeSceneArrangementInfo| { &m.scene_id },
            |m: &mut HomeSceneArrangementInfo| { &mut m.scene_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bgm_id",
            |m: &HomeSceneArrangementInfo| { &m.bgm_id },
            |m: &mut HomeSceneArrangementInfo| { &mut m.bgm_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "comfort_value",
            |m: &HomeSceneArrangementInfo| { &m.comfort_value },
            |m: &mut HomeSceneArrangementInfo| { &mut m.comfort_value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HomeFurnitureData::HomeFurnitureData>(
            "main_house",
            |m: &HomeSceneArrangementInfo| { &m.main_house },
            |m: &mut HomeSceneArrangementInfo| { &mut m.main_house },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tmp_version",
            |m: &HomeSceneArrangementInfo| { &m.tmp_version },
            |m: &mut HomeSceneArrangementInfo| { &mut m.tmp_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_set_born_pos",
            |m: &HomeSceneArrangementInfo| { &m.is_set_born_pos },
            |m: &mut HomeSceneArrangementInfo| { &mut m.is_set_born_pos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "djinn_pos",
            |m: &HomeSceneArrangementInfo| { &m.djinn_pos },
            |m: &mut HomeSceneArrangementInfo| { &mut m.djinn_pos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "born_pos",
            |m: &HomeSceneArrangementInfo| { &m.born_pos },
            |m: &mut HomeSceneArrangementInfo| { &mut m.born_pos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HomeSceneArrangementInfo>(
            "HomeSceneArrangementInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HomeSceneArrangementInfo {
    const NAME: &'static str = "HomeSceneArrangementInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.block_arrangement_info_list.push(is.read_message()?);
                },
                58 => {
                    self.HDOFAHGPJGK.push(is.read_message()?);
                },
                98 => {
                    self.MLECLIOFALA.push(is.read_message()?);
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.born_rot)?;
                },
                64 => {
                    self.scene_id = is.read_uint32()?;
                },
                24 => {
                    self.bgm_id = is.read_uint32()?;
                },
                40 => {
                    self.comfort_value = is.read_uint32()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.main_house)?;
                },
                104 => {
                    self.tmp_version = is.read_uint32()?;
                },
                8 => {
                    self.is_set_born_pos = is.read_bool()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.djinn_pos)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.born_pos)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.block_arrangement_info_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.HDOFAHGPJGK {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.MLECLIOFALA {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.born_rot.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.scene_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.scene_id);
        }
        if self.bgm_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.bgm_id);
        }
        if self.comfort_value != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.comfort_value);
        }
        if let Some(v) = self.main_house.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.tmp_version != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.tmp_version);
        }
        if self.is_set_born_pos != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.djinn_pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.born_pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.block_arrangement_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.HDOFAHGPJGK {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.MLECLIOFALA {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        if let Some(v) = self.born_rot.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if self.scene_id != 0 {
            os.write_uint32(8, self.scene_id)?;
        }
        if self.bgm_id != 0 {
            os.write_uint32(3, self.bgm_id)?;
        }
        if self.comfort_value != 0 {
            os.write_uint32(5, self.comfort_value)?;
        }
        if let Some(v) = self.main_house.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.tmp_version != 0 {
            os.write_uint32(13, self.tmp_version)?;
        }
        if self.is_set_born_pos != false {
            os.write_bool(1, self.is_set_born_pos)?;
        }
        if let Some(v) = self.djinn_pos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.born_pos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HomeSceneArrangementInfo {
        HomeSceneArrangementInfo::new()
    }

    fn clear(&mut self) {
        self.block_arrangement_info_list.clear();
        self.HDOFAHGPJGK.clear();
        self.MLECLIOFALA.clear();
        self.born_rot.clear();
        self.scene_id = 0;
        self.bgm_id = 0;
        self.comfort_value = 0;
        self.main_house.clear();
        self.tmp_version = 0;
        self.is_set_born_pos = false;
        self.djinn_pos.clear();
        self.born_pos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HomeSceneArrangementInfo {
        static instance: HomeSceneArrangementInfo = HomeSceneArrangementInfo {
            block_arrangement_info_list: ::std::vec::Vec::new(),
            HDOFAHGPJGK: ::std::vec::Vec::new(),
            MLECLIOFALA: ::std::vec::Vec::new(),
            born_rot: ::protobuf::MessageField::none(),
            scene_id: 0,
            bgm_id: 0,
            comfort_value: 0,
            main_house: ::protobuf::MessageField::none(),
            tmp_version: 0,
            is_set_born_pos: false,
            djinn_pos: ::protobuf::MessageField::none(),
            born_pos: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HomeSceneArrangementInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HomeSceneArrangementInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HomeSceneArrangementInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HomeSceneArrangementInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1eHomeSceneArrangementInfo.proto\x1a\x1eHomeBlockArrangementInfo.pro\
    to\x1a\x17HomeFurnitureData.proto\x1a\x0cVector.proto\"\xa0\x04\n\x18Hom\
    eSceneArrangementInfo\x12X\n\x1bblock_arrangement_info_list\x18\x02\x20\
    \x03(\x0b2\x19.HomeBlockArrangementInfoR\x18blockArrangementInfoList\x12\
    4\n\x0bHDOFAHGPJGK\x18\x07\x20\x03(\x0b2\x12.HomeFurnitureDataR\x0bHDOFA\
    HGPJGK\x124\n\x0bMLECLIOFALA\x18\x0c\x20\x03(\x0b2\x12.HomeFurnitureData\
    R\x0bMLECLIOFALA\x12\"\n\x08born_rot\x18\t\x20\x01(\x0b2\x07.VectorR\x07\
    bornRot\x12\x19\n\x08scene_id\x18\x08\x20\x01(\rR\x07sceneId\x12\x15\n\
    \x06bgm_id\x18\x03\x20\x01(\rR\x05bgmId\x12#\n\rcomfort_value\x18\x05\
    \x20\x01(\rR\x0ccomfortValue\x121\n\nmain_house\x18\x06\x20\x01(\x0b2\
    \x12.HomeFurnitureDataR\tmainHouse\x12\x1f\n\x0btmp_version\x18\r\x20\
    \x01(\rR\ntmpVersion\x12%\n\x0fis_set_born_pos\x18\x01\x20\x01(\x08R\x0c\
    isSetBornPos\x12$\n\tdjinn_pos\x18\x04\x20\x01(\x0b2\x07.VectorR\x08djin\
    nPos\x12\"\n\x08born_pos\x18\n\x20\x01(\x0b2\x07.VectorR\x07bornPosB\x1b\
    \n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::HomeBlockArrangementInfo::file_descriptor().clone());
            deps.push(super::HomeFurnitureData::file_descriptor().clone());
            deps.push(super::Vector::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HomeSceneArrangementInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
