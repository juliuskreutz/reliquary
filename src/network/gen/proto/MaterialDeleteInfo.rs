// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MaterialDeleteInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:MaterialDeleteInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MaterialDeleteInfo {
    // message fields
    // @@protoc_insertion_point(field:MaterialDeleteInfo.has_delete_config)
    pub has_delete_config: bool,
    // message oneof groups
    pub delete_info: ::std::option::Option<material_delete_info::Delete_info>,
    // special fields
    // @@protoc_insertion_point(special_field:MaterialDeleteInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MaterialDeleteInfo {
    fn default() -> &'a MaterialDeleteInfo {
        <MaterialDeleteInfo as ::protobuf::Message>::default_instance()
    }
}

impl MaterialDeleteInfo {
    pub fn new() -> MaterialDeleteInfo {
        ::std::default::Default::default()
    }

    // .MaterialDeleteInfo.CountDownDelete count_down_delete = 2;

    pub fn count_down_delete(&self) -> &material_delete_info::CountDownDelete {
        match self.delete_info {
            ::std::option::Option::Some(material_delete_info::Delete_info::CountDownDelete(ref v)) => v,
            _ => <material_delete_info::CountDownDelete as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_count_down_delete(&mut self) {
        self.delete_info = ::std::option::Option::None;
    }

    pub fn has_count_down_delete(&self) -> bool {
        match self.delete_info {
            ::std::option::Option::Some(material_delete_info::Delete_info::CountDownDelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_count_down_delete(&mut self, v: material_delete_info::CountDownDelete) {
        self.delete_info = ::std::option::Option::Some(material_delete_info::Delete_info::CountDownDelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_count_down_delete(&mut self) -> &mut material_delete_info::CountDownDelete {
        if let ::std::option::Option::Some(material_delete_info::Delete_info::CountDownDelete(_)) = self.delete_info {
        } else {
            self.delete_info = ::std::option::Option::Some(material_delete_info::Delete_info::CountDownDelete(material_delete_info::CountDownDelete::new()));
        }
        match self.delete_info {
            ::std::option::Option::Some(material_delete_info::Delete_info::CountDownDelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_count_down_delete(&mut self) -> material_delete_info::CountDownDelete {
        if self.has_count_down_delete() {
            match self.delete_info.take() {
                ::std::option::Option::Some(material_delete_info::Delete_info::CountDownDelete(v)) => v,
                _ => panic!(),
            }
        } else {
            material_delete_info::CountDownDelete::new()
        }
    }

    // .MaterialDeleteInfo.DateTimeDelete date_delete = 3;

    pub fn date_delete(&self) -> &material_delete_info::DateTimeDelete {
        match self.delete_info {
            ::std::option::Option::Some(material_delete_info::Delete_info::DateDelete(ref v)) => v,
            _ => <material_delete_info::DateTimeDelete as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_date_delete(&mut self) {
        self.delete_info = ::std::option::Option::None;
    }

    pub fn has_date_delete(&self) -> bool {
        match self.delete_info {
            ::std::option::Option::Some(material_delete_info::Delete_info::DateDelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_date_delete(&mut self, v: material_delete_info::DateTimeDelete) {
        self.delete_info = ::std::option::Option::Some(material_delete_info::Delete_info::DateDelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_date_delete(&mut self) -> &mut material_delete_info::DateTimeDelete {
        if let ::std::option::Option::Some(material_delete_info::Delete_info::DateDelete(_)) = self.delete_info {
        } else {
            self.delete_info = ::std::option::Option::Some(material_delete_info::Delete_info::DateDelete(material_delete_info::DateTimeDelete::new()));
        }
        match self.delete_info {
            ::std::option::Option::Some(material_delete_info::Delete_info::DateDelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_date_delete(&mut self) -> material_delete_info::DateTimeDelete {
        if self.has_date_delete() {
            match self.delete_info.take() {
                ::std::option::Option::Some(material_delete_info::Delete_info::DateDelete(v)) => v,
                _ => panic!(),
            }
        } else {
            material_delete_info::DateTimeDelete::new()
        }
    }

    // .MaterialDeleteInfo.DelayWeekCountDownDelete delay_week_count_down_delete = 4;

    pub fn delay_week_count_down_delete(&self) -> &material_delete_info::DelayWeekCountDownDelete {
        match self.delete_info {
            ::std::option::Option::Some(material_delete_info::Delete_info::DelayWeekCountDownDelete(ref v)) => v,
            _ => <material_delete_info::DelayWeekCountDownDelete as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_delay_week_count_down_delete(&mut self) {
        self.delete_info = ::std::option::Option::None;
    }

    pub fn has_delay_week_count_down_delete(&self) -> bool {
        match self.delete_info {
            ::std::option::Option::Some(material_delete_info::Delete_info::DelayWeekCountDownDelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delay_week_count_down_delete(&mut self, v: material_delete_info::DelayWeekCountDownDelete) {
        self.delete_info = ::std::option::Option::Some(material_delete_info::Delete_info::DelayWeekCountDownDelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delay_week_count_down_delete(&mut self) -> &mut material_delete_info::DelayWeekCountDownDelete {
        if let ::std::option::Option::Some(material_delete_info::Delete_info::DelayWeekCountDownDelete(_)) = self.delete_info {
        } else {
            self.delete_info = ::std::option::Option::Some(material_delete_info::Delete_info::DelayWeekCountDownDelete(material_delete_info::DelayWeekCountDownDelete::new()));
        }
        match self.delete_info {
            ::std::option::Option::Some(material_delete_info::Delete_info::DelayWeekCountDownDelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delay_week_count_down_delete(&mut self) -> material_delete_info::DelayWeekCountDownDelete {
        if self.has_delay_week_count_down_delete() {
            match self.delete_info.take() {
                ::std::option::Option::Some(material_delete_info::Delete_info::DelayWeekCountDownDelete(v)) => v,
                _ => panic!(),
            }
        } else {
            material_delete_info::DelayWeekCountDownDelete::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_delete_config",
            |m: &MaterialDeleteInfo| { &m.has_delete_config },
            |m: &mut MaterialDeleteInfo| { &mut m.has_delete_config },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, material_delete_info::CountDownDelete>(
            "count_down_delete",
            MaterialDeleteInfo::has_count_down_delete,
            MaterialDeleteInfo::count_down_delete,
            MaterialDeleteInfo::mut_count_down_delete,
            MaterialDeleteInfo::set_count_down_delete,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, material_delete_info::DateTimeDelete>(
            "date_delete",
            MaterialDeleteInfo::has_date_delete,
            MaterialDeleteInfo::date_delete,
            MaterialDeleteInfo::mut_date_delete,
            MaterialDeleteInfo::set_date_delete,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, material_delete_info::DelayWeekCountDownDelete>(
            "delay_week_count_down_delete",
            MaterialDeleteInfo::has_delay_week_count_down_delete,
            MaterialDeleteInfo::delay_week_count_down_delete,
            MaterialDeleteInfo::mut_delay_week_count_down_delete,
            MaterialDeleteInfo::set_delay_week_count_down_delete,
        ));
        oneofs.push(material_delete_info::Delete_info::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MaterialDeleteInfo>(
            "MaterialDeleteInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MaterialDeleteInfo {
    const NAME: &'static str = "MaterialDeleteInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.has_delete_config = is.read_bool()?;
                },
                18 => {
                    self.delete_info = ::std::option::Option::Some(material_delete_info::Delete_info::CountDownDelete(is.read_message()?));
                },
                26 => {
                    self.delete_info = ::std::option::Option::Some(material_delete_info::Delete_info::DateDelete(is.read_message()?));
                },
                34 => {
                    self.delete_info = ::std::option::Option::Some(material_delete_info::Delete_info::DelayWeekCountDownDelete(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.has_delete_config != false {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.delete_info {
            match v {
                &material_delete_info::Delete_info::CountDownDelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &material_delete_info::Delete_info::DateDelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &material_delete_info::Delete_info::DelayWeekCountDownDelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.has_delete_config != false {
            os.write_bool(1, self.has_delete_config)?;
        }
        if let ::std::option::Option::Some(ref v) = self.delete_info {
            match v {
                &material_delete_info::Delete_info::CountDownDelete(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &material_delete_info::Delete_info::DateDelete(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &material_delete_info::Delete_info::DelayWeekCountDownDelete(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MaterialDeleteInfo {
        MaterialDeleteInfo::new()
    }

    fn clear(&mut self) {
        self.has_delete_config = false;
        self.delete_info = ::std::option::Option::None;
        self.delete_info = ::std::option::Option::None;
        self.delete_info = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MaterialDeleteInfo {
        static instance: MaterialDeleteInfo = MaterialDeleteInfo {
            has_delete_config: false,
            delete_info: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MaterialDeleteInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MaterialDeleteInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MaterialDeleteInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MaterialDeleteInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MaterialDeleteInfo`
pub mod material_delete_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:MaterialDeleteInfo.delete_info)
    pub enum Delete_info {
        // @@protoc_insertion_point(oneof_field:MaterialDeleteInfo.count_down_delete)
        CountDownDelete(CountDownDelete),
        // @@protoc_insertion_point(oneof_field:MaterialDeleteInfo.date_delete)
        DateDelete(DateTimeDelete),
        // @@protoc_insertion_point(oneof_field:MaterialDeleteInfo.delay_week_count_down_delete)
        DelayWeekCountDownDelete(DelayWeekCountDownDelete),
    }

    impl ::protobuf::Oneof for Delete_info {
    }

    impl ::protobuf::OneofFull for Delete_info {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::MaterialDeleteInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("delete_info").unwrap()).clone()
        }
    }

    impl Delete_info {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Delete_info>("delete_info")
        }
    }
    // @@protoc_insertion_point(message:MaterialDeleteInfo.CountDownDelete)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CountDownDelete {
        // message fields
        // @@protoc_insertion_point(field:MaterialDeleteInfo.CountDownDelete.delete_time_num_map)
        pub delete_time_num_map: ::std::collections::HashMap<u32, u32>,
        // @@protoc_insertion_point(field:MaterialDeleteInfo.CountDownDelete.config_count_down_time)
        pub config_count_down_time: u32,
        // special fields
        // @@protoc_insertion_point(special_field:MaterialDeleteInfo.CountDownDelete.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CountDownDelete {
        fn default() -> &'a CountDownDelete {
            <CountDownDelete as ::protobuf::Message>::default_instance()
        }
    }

    impl CountDownDelete {
        pub fn new() -> CountDownDelete {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
                "delete_time_num_map",
                |m: &CountDownDelete| { &m.delete_time_num_map },
                |m: &mut CountDownDelete| { &mut m.delete_time_num_map },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "config_count_down_time",
                |m: &CountDownDelete| { &m.config_count_down_time },
                |m: &mut CountDownDelete| { &mut m.config_count_down_time },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CountDownDelete>(
                "MaterialDeleteInfo.CountDownDelete",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for CountDownDelete {
        const NAME: &'static str = "CountDownDelete";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        let len = is.read_raw_varint32()?;
                        let old_limit = is.push_limit(len as u64)?;
                        let mut key = ::std::default::Default::default();
                        let mut value = ::std::default::Default::default();
                        while let Some(tag) = is.read_raw_tag_or_eof()? {
                            match tag {
                                8 => key = is.read_uint32()?,
                                16 => value = is.read_uint32()?,
                                _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                            };
                        }
                        is.pop_limit(old_limit);
                        self.delete_time_num_map.insert(key, value);
                    },
                    16 => {
                        self.config_count_down_time = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for (k, v) in &self.delete_time_num_map {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::uint32_size(1, *k);
                entry_size += ::protobuf::rt::uint32_size(2, *v);
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
            };
            if self.config_count_down_time != 0 {
                my_size += ::protobuf::rt::uint32_size(2, self.config_count_down_time);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for (k, v) in &self.delete_time_num_map {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::uint32_size(1, *k);
                entry_size += ::protobuf::rt::uint32_size(2, *v);
                os.write_raw_varint32(10)?; // Tag.
                os.write_raw_varint32(entry_size as u32)?;
                os.write_uint32(1, *k)?;
                os.write_uint32(2, *v)?;
            };
            if self.config_count_down_time != 0 {
                os.write_uint32(2, self.config_count_down_time)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CountDownDelete {
            CountDownDelete::new()
        }

        fn clear(&mut self) {
            self.delete_time_num_map.clear();
            self.config_count_down_time = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CountDownDelete {
            static instance: ::protobuf::rt::Lazy<CountDownDelete> = ::protobuf::rt::Lazy::new();
            instance.get(CountDownDelete::new)
        }
    }

    impl ::protobuf::MessageFull for CountDownDelete {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("MaterialDeleteInfo.CountDownDelete").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for CountDownDelete {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CountDownDelete {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:MaterialDeleteInfo.DateTimeDelete)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DateTimeDelete {
        // message fields
        // @@protoc_insertion_point(field:MaterialDeleteInfo.DateTimeDelete.delete_time)
        pub delete_time: u32,
        // special fields
        // @@protoc_insertion_point(special_field:MaterialDeleteInfo.DateTimeDelete.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DateTimeDelete {
        fn default() -> &'a DateTimeDelete {
            <DateTimeDelete as ::protobuf::Message>::default_instance()
        }
    }

    impl DateTimeDelete {
        pub fn new() -> DateTimeDelete {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "delete_time",
                |m: &DateTimeDelete| { &m.delete_time },
                |m: &mut DateTimeDelete| { &mut m.delete_time },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DateTimeDelete>(
                "MaterialDeleteInfo.DateTimeDelete",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for DateTimeDelete {
        const NAME: &'static str = "DateTimeDelete";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.delete_time = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.delete_time != 0 {
                my_size += ::protobuf::rt::uint32_size(1, self.delete_time);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.delete_time != 0 {
                os.write_uint32(1, self.delete_time)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DateTimeDelete {
            DateTimeDelete::new()
        }

        fn clear(&mut self) {
            self.delete_time = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DateTimeDelete {
            static instance: DateTimeDelete = DateTimeDelete {
                delete_time: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for DateTimeDelete {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("MaterialDeleteInfo.DateTimeDelete").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for DateTimeDelete {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DateTimeDelete {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:MaterialDeleteInfo.DelayWeekCountDownDelete)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DelayWeekCountDownDelete {
        // message fields
        // @@protoc_insertion_point(field:MaterialDeleteInfo.DelayWeekCountDownDelete.delete_time_num_map)
        pub delete_time_num_map: ::std::collections::HashMap<u32, u32>,
        // @@protoc_insertion_point(field:MaterialDeleteInfo.DelayWeekCountDownDelete.config_delay_week)
        pub config_delay_week: u32,
        // @@protoc_insertion_point(field:MaterialDeleteInfo.DelayWeekCountDownDelete.config_count_down_time)
        pub config_count_down_time: u32,
        // special fields
        // @@protoc_insertion_point(special_field:MaterialDeleteInfo.DelayWeekCountDownDelete.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DelayWeekCountDownDelete {
        fn default() -> &'a DelayWeekCountDownDelete {
            <DelayWeekCountDownDelete as ::protobuf::Message>::default_instance()
        }
    }

    impl DelayWeekCountDownDelete {
        pub fn new() -> DelayWeekCountDownDelete {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
                "delete_time_num_map",
                |m: &DelayWeekCountDownDelete| { &m.delete_time_num_map },
                |m: &mut DelayWeekCountDownDelete| { &mut m.delete_time_num_map },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "config_delay_week",
                |m: &DelayWeekCountDownDelete| { &m.config_delay_week },
                |m: &mut DelayWeekCountDownDelete| { &mut m.config_delay_week },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "config_count_down_time",
                |m: &DelayWeekCountDownDelete| { &m.config_count_down_time },
                |m: &mut DelayWeekCountDownDelete| { &mut m.config_count_down_time },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DelayWeekCountDownDelete>(
                "MaterialDeleteInfo.DelayWeekCountDownDelete",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for DelayWeekCountDownDelete {
        const NAME: &'static str = "DelayWeekCountDownDelete";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        let len = is.read_raw_varint32()?;
                        let old_limit = is.push_limit(len as u64)?;
                        let mut key = ::std::default::Default::default();
                        let mut value = ::std::default::Default::default();
                        while let Some(tag) = is.read_raw_tag_or_eof()? {
                            match tag {
                                8 => key = is.read_uint32()?,
                                16 => value = is.read_uint32()?,
                                _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                            };
                        }
                        is.pop_limit(old_limit);
                        self.delete_time_num_map.insert(key, value);
                    },
                    16 => {
                        self.config_delay_week = is.read_uint32()?;
                    },
                    24 => {
                        self.config_count_down_time = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for (k, v) in &self.delete_time_num_map {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::uint32_size(1, *k);
                entry_size += ::protobuf::rt::uint32_size(2, *v);
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
            };
            if self.config_delay_week != 0 {
                my_size += ::protobuf::rt::uint32_size(2, self.config_delay_week);
            }
            if self.config_count_down_time != 0 {
                my_size += ::protobuf::rt::uint32_size(3, self.config_count_down_time);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for (k, v) in &self.delete_time_num_map {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::uint32_size(1, *k);
                entry_size += ::protobuf::rt::uint32_size(2, *v);
                os.write_raw_varint32(10)?; // Tag.
                os.write_raw_varint32(entry_size as u32)?;
                os.write_uint32(1, *k)?;
                os.write_uint32(2, *v)?;
            };
            if self.config_delay_week != 0 {
                os.write_uint32(2, self.config_delay_week)?;
            }
            if self.config_count_down_time != 0 {
                os.write_uint32(3, self.config_count_down_time)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DelayWeekCountDownDelete {
            DelayWeekCountDownDelete::new()
        }

        fn clear(&mut self) {
            self.delete_time_num_map.clear();
            self.config_delay_week = 0;
            self.config_count_down_time = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DelayWeekCountDownDelete {
            static instance: ::protobuf::rt::Lazy<DelayWeekCountDownDelete> = ::protobuf::rt::Lazy::new();
            instance.get(DelayWeekCountDownDelete::new)
        }
    }

    impl ::protobuf::MessageFull for DelayWeekCountDownDelete {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("MaterialDeleteInfo.DelayWeekCountDownDelete").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for DelayWeekCountDownDelete {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DelayWeekCountDownDelete {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18MaterialDeleteInfo.proto\"\xba\x07\n\x12MaterialDeleteInfo\x12*\n\
    \x11has_delete_config\x18\x01\x20\x01(\x08R\x0fhasDeleteConfig\x12Q\n\
    \x11count_down_delete\x18\x02\x20\x01(\x0b2#.MaterialDeleteInfo.CountDow\
    nDeleteH\0R\x0fcountDownDelete\x12E\n\x0bdate_delete\x18\x03\x20\x01(\
    \x0b2\".MaterialDeleteInfo.DateTimeDeleteH\0R\ndateDelete\x12n\n\x1cdela\
    y_week_count_down_delete\x18\x04\x20\x01(\x0b2,.MaterialDeleteInfo.Delay\
    WeekCountDownDeleteH\0R\x18delayWeekCountDownDelete\x1a\xf5\x01\n\x0fCou\
    ntDownDelete\x12h\n\x13delete_time_num_map\x18\x01\x20\x03(\x0b29.Materi\
    alDeleteInfo.CountDownDelete.DeleteTimeNumMapEntryR\x10deleteTimeNumMap\
    \x123\n\x16config_count_down_time\x18\x02\x20\x01(\rR\x13configCountDown\
    Time\x1aC\n\x15DeleteTimeNumMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\r\
    R\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01\x1a1\
    \n\x0eDateTimeDelete\x12\x1f\n\x0bdelete_time\x18\x01\x20\x01(\rR\ndelet\
    eTime\x1a\xb3\x02\n\x18DelayWeekCountDownDelete\x12q\n\x13delete_time_nu\
    m_map\x18\x01\x20\x03(\x0b2B.MaterialDeleteInfo.DelayWeekCountDownDelete\
    .DeleteTimeNumMapEntryR\x10deleteTimeNumMap\x12*\n\x11config_delay_week\
    \x18\x02\x20\x01(\rR\x0fconfigDelayWeek\x123\n\x16config_count_down_time\
    \x18\x03\x20\x01(\rR\x13configCountDownTime\x1aC\n\x15DeleteTimeNumMapEn\
    try\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\rR\x05value:\x028\x01B\r\n\x0bdelete_infoB\x1b\n\x19emu.gr\
    asscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(MaterialDeleteInfo::generated_message_descriptor_data());
            messages.push(material_delete_info::CountDownDelete::generated_message_descriptor_data());
            messages.push(material_delete_info::DateTimeDelete::generated_message_descriptor_data());
            messages.push(material_delete_info::DelayWeekCountDownDelete::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
