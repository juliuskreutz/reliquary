// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AbilityMixinRecoverInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AbilityMixinRecoverInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AbilityMixinRecoverInfo {
    // message fields
    // @@protoc_insertion_point(field:AbilityMixinRecoverInfo.local_id)
    pub local_id: u32,
    // @@protoc_insertion_point(field:AbilityMixinRecoverInfo.data_list)
    pub data_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:AbilityMixinRecoverInfo.is_serverbuff_modifier)
    pub is_serverbuff_modifier: bool,
    // @@protoc_insertion_point(field:AbilityMixinRecoverInfo.massive_prop_list)
    pub massive_prop_list: ::std::vec::Vec<super::MassivePropSyncInfo::MassivePropSyncInfo>,
    // @@protoc_insertion_point(field:AbilityMixinRecoverInfo.breakout_snap_shot)
    pub breakout_snap_shot: ::protobuf::MessageField<super::BreakoutSnapShot::BreakoutSnapShot>,
    // message oneof groups
    pub Source: ::std::option::Option<ability_mixin_recover_info::Source>,
    // special fields
    // @@protoc_insertion_point(special_field:AbilityMixinRecoverInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AbilityMixinRecoverInfo {
    fn default() -> &'a AbilityMixinRecoverInfo {
        <AbilityMixinRecoverInfo as ::protobuf::Message>::default_instance()
    }
}

impl AbilityMixinRecoverInfo {
    pub fn new() -> AbilityMixinRecoverInfo {
        ::std::default::Default::default()
    }

    // uint32 instanced_ability_id = 1;

    pub fn instanced_ability_id(&self) -> u32 {
        match self.Source {
            ::std::option::Option::Some(ability_mixin_recover_info::Source::InstancedAbilityId(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_instanced_ability_id(&mut self) {
        self.Source = ::std::option::Option::None;
    }

    pub fn has_instanced_ability_id(&self) -> bool {
        match self.Source {
            ::std::option::Option::Some(ability_mixin_recover_info::Source::InstancedAbilityId(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_instanced_ability_id(&mut self, v: u32) {
        self.Source = ::std::option::Option::Some(ability_mixin_recover_info::Source::InstancedAbilityId(v))
    }

    // uint32 instanced_modifier_id = 2;

    pub fn instanced_modifier_id(&self) -> u32 {
        match self.Source {
            ::std::option::Option::Some(ability_mixin_recover_info::Source::InstancedModifierId(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_instanced_modifier_id(&mut self) {
        self.Source = ::std::option::Option::None;
    }

    pub fn has_instanced_modifier_id(&self) -> bool {
        match self.Source {
            ::std::option::Option::Some(ability_mixin_recover_info::Source::InstancedModifierId(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_instanced_modifier_id(&mut self, v: u32) {
        self.Source = ::std::option::Option::Some(ability_mixin_recover_info::Source::InstancedModifierId(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "local_id",
            |m: &AbilityMixinRecoverInfo| { &m.local_id },
            |m: &mut AbilityMixinRecoverInfo| { &mut m.local_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data_list",
            |m: &AbilityMixinRecoverInfo| { &m.data_list },
            |m: &mut AbilityMixinRecoverInfo| { &mut m.data_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_serverbuff_modifier",
            |m: &AbilityMixinRecoverInfo| { &m.is_serverbuff_modifier },
            |m: &mut AbilityMixinRecoverInfo| { &mut m.is_serverbuff_modifier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "massive_prop_list",
            |m: &AbilityMixinRecoverInfo| { &m.massive_prop_list },
            |m: &mut AbilityMixinRecoverInfo| { &mut m.massive_prop_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BreakoutSnapShot::BreakoutSnapShot>(
            "breakout_snap_shot",
            |m: &AbilityMixinRecoverInfo| { &m.breakout_snap_shot },
            |m: &mut AbilityMixinRecoverInfo| { &mut m.breakout_snap_shot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "instanced_ability_id",
            AbilityMixinRecoverInfo::has_instanced_ability_id,
            AbilityMixinRecoverInfo::instanced_ability_id,
            AbilityMixinRecoverInfo::set_instanced_ability_id,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "instanced_modifier_id",
            AbilityMixinRecoverInfo::has_instanced_modifier_id,
            AbilityMixinRecoverInfo::instanced_modifier_id,
            AbilityMixinRecoverInfo::set_instanced_modifier_id,
        ));
        oneofs.push(ability_mixin_recover_info::Source::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AbilityMixinRecoverInfo>(
            "AbilityMixinRecoverInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AbilityMixinRecoverInfo {
    const NAME: &'static str = "AbilityMixinRecoverInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.local_id = is.read_uint32()?;
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.data_list)?;
                },
                32 => {
                    self.data_list.push(is.read_uint32()?);
                },
                40 => {
                    self.is_serverbuff_modifier = is.read_bool()?;
                },
                50 => {
                    self.massive_prop_list.push(is.read_message()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.breakout_snap_shot)?;
                },
                8 => {
                    self.Source = ::std::option::Option::Some(ability_mixin_recover_info::Source::InstancedAbilityId(is.read_uint32()?));
                },
                16 => {
                    self.Source = ::std::option::Option::Some(ability_mixin_recover_info::Source::InstancedModifierId(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.local_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.local_id);
        }
        for value in &self.data_list {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        if self.is_serverbuff_modifier != false {
            my_size += 1 + 1;
        }
        for value in &self.massive_prop_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.breakout_snap_shot.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.Source {
            match v {
                &ability_mixin_recover_info::Source::InstancedAbilityId(v) => {
                    my_size += ::protobuf::rt::uint32_size(1, v);
                },
                &ability_mixin_recover_info::Source::InstancedModifierId(v) => {
                    my_size += ::protobuf::rt::uint32_size(2, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.local_id != 0 {
            os.write_uint32(3, self.local_id)?;
        }
        for v in &self.data_list {
            os.write_uint32(4, *v)?;
        };
        if self.is_serverbuff_modifier != false {
            os.write_bool(5, self.is_serverbuff_modifier)?;
        }
        for v in &self.massive_prop_list {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if let Some(v) = self.breakout_snap_shot.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.Source {
            match v {
                &ability_mixin_recover_info::Source::InstancedAbilityId(v) => {
                    os.write_uint32(1, v)?;
                },
                &ability_mixin_recover_info::Source::InstancedModifierId(v) => {
                    os.write_uint32(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AbilityMixinRecoverInfo {
        AbilityMixinRecoverInfo::new()
    }

    fn clear(&mut self) {
        self.local_id = 0;
        self.data_list.clear();
        self.is_serverbuff_modifier = false;
        self.massive_prop_list.clear();
        self.breakout_snap_shot.clear();
        self.Source = ::std::option::Option::None;
        self.Source = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AbilityMixinRecoverInfo {
        static instance: AbilityMixinRecoverInfo = AbilityMixinRecoverInfo {
            local_id: 0,
            data_list: ::std::vec::Vec::new(),
            is_serverbuff_modifier: false,
            massive_prop_list: ::std::vec::Vec::new(),
            breakout_snap_shot: ::protobuf::MessageField::none(),
            Source: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AbilityMixinRecoverInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AbilityMixinRecoverInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AbilityMixinRecoverInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AbilityMixinRecoverInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AbilityMixinRecoverInfo`
pub mod ability_mixin_recover_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:AbilityMixinRecoverInfo.Source)
    pub enum Source {
        // @@protoc_insertion_point(oneof_field:AbilityMixinRecoverInfo.instanced_ability_id)
        InstancedAbilityId(u32),
        // @@protoc_insertion_point(oneof_field:AbilityMixinRecoverInfo.instanced_modifier_id)
        InstancedModifierId(u32),
    }

    impl ::protobuf::Oneof for Source {
    }

    impl ::protobuf::OneofFull for Source {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AbilityMixinRecoverInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("Source").unwrap()).clone()
        }
    }

    impl Source {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Source>("Source")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dAbilityMixinRecoverInfo.proto\x1a\x19MassivePropSyncInfo.proto\x1a\
    \x16BreakoutSnapShot.proto\"\xfe\x02\n\x17AbilityMixinRecoverInfo\x12\
    \x19\n\x08local_id\x18\x03\x20\x01(\rR\x07localId\x12\x1b\n\tdata_list\
    \x18\x04\x20\x03(\rR\x08dataList\x124\n\x16is_serverbuff_modifier\x18\
    \x05\x20\x01(\x08R\x14isServerbuffModifier\x12@\n\x11massive_prop_list\
    \x18\x06\x20\x03(\x0b2\x14.MassivePropSyncInfoR\x0fmassivePropList\x12?\
    \n\x12breakout_snap_shot\x18\x07\x20\x01(\x0b2\x11.BreakoutSnapShotR\x10\
    breakoutSnapShot\x122\n\x14instanced_ability_id\x18\x01\x20\x01(\rH\0R\
    \x12instancedAbilityId\x124\n\x15instanced_modifier_id\x18\x02\x20\x01(\
    \rH\0R\x13instancedModifierIdB\x08\n\x06SourceB\x1b\n\x19emu.grasscutter\
    .net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::MassivePropSyncInfo::file_descriptor().clone());
            deps.push(super::BreakoutSnapShot::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AbilityMixinRecoverInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
