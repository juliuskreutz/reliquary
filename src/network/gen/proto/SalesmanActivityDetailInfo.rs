// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `SalesmanActivityDetailInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:SalesmanActivityDetailInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SalesmanActivityDetailInfo {
    // message fields
    // @@protoc_insertion_point(field:SalesmanActivityDetailInfo.AFJBNMCAMOB)
    pub AFJBNMCAMOB: u32,
    // @@protoc_insertion_point(field:SalesmanActivityDetailInfo.status)
    pub status: ::protobuf::EnumOrUnknown<super::SalesmanStatusType::SalesmanStatusType>,
    // @@protoc_insertion_point(field:SalesmanActivityDetailInfo.FNPJPBEODBN)
    pub FNPJPBEODBN: bool,
    // @@protoc_insertion_point(field:SalesmanActivityDetailInfo.GCGDGLAKAIC)
    pub GCGDGLAKAIC: u32,
    // @@protoc_insertion_point(field:SalesmanActivityDetailInfo.day_index)
    pub day_index: u32,
    // @@protoc_insertion_point(field:SalesmanActivityDetailInfo.selected_reward_id_map)
    pub selected_reward_id_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:SalesmanActivityDetailInfo.CCKNCIGDIDH)
    pub CCKNCIGDIDH: u32,
    // @@protoc_insertion_point(field:SalesmanActivityDetailInfo.day_reward_id)
    pub day_reward_id: u32,
    // @@protoc_insertion_point(field:SalesmanActivityDetailInfo.PNGNAEEEEHC)
    pub PNGNAEEEEHC: bool,
    // @@protoc_insertion_point(field:SalesmanActivityDetailInfo.HCAIPINLEJC)
    pub HCAIPINLEJC: u32,
    // special fields
    // @@protoc_insertion_point(special_field:SalesmanActivityDetailInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SalesmanActivityDetailInfo {
    fn default() -> &'a SalesmanActivityDetailInfo {
        <SalesmanActivityDetailInfo as ::protobuf::Message>::default_instance()
    }
}

impl SalesmanActivityDetailInfo {
    pub fn new() -> SalesmanActivityDetailInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AFJBNMCAMOB",
            |m: &SalesmanActivityDetailInfo| { &m.AFJBNMCAMOB },
            |m: &mut SalesmanActivityDetailInfo| { &mut m.AFJBNMCAMOB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &SalesmanActivityDetailInfo| { &m.status },
            |m: &mut SalesmanActivityDetailInfo| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FNPJPBEODBN",
            |m: &SalesmanActivityDetailInfo| { &m.FNPJPBEODBN },
            |m: &mut SalesmanActivityDetailInfo| { &mut m.FNPJPBEODBN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GCGDGLAKAIC",
            |m: &SalesmanActivityDetailInfo| { &m.GCGDGLAKAIC },
            |m: &mut SalesmanActivityDetailInfo| { &mut m.GCGDGLAKAIC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "day_index",
            |m: &SalesmanActivityDetailInfo| { &m.day_index },
            |m: &mut SalesmanActivityDetailInfo| { &mut m.day_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "selected_reward_id_map",
            |m: &SalesmanActivityDetailInfo| { &m.selected_reward_id_map },
            |m: &mut SalesmanActivityDetailInfo| { &mut m.selected_reward_id_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CCKNCIGDIDH",
            |m: &SalesmanActivityDetailInfo| { &m.CCKNCIGDIDH },
            |m: &mut SalesmanActivityDetailInfo| { &mut m.CCKNCIGDIDH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "day_reward_id",
            |m: &SalesmanActivityDetailInfo| { &m.day_reward_id },
            |m: &mut SalesmanActivityDetailInfo| { &mut m.day_reward_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PNGNAEEEEHC",
            |m: &SalesmanActivityDetailInfo| { &m.PNGNAEEEEHC },
            |m: &mut SalesmanActivityDetailInfo| { &mut m.PNGNAEEEEHC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HCAIPINLEJC",
            |m: &SalesmanActivityDetailInfo| { &m.HCAIPINLEJC },
            |m: &mut SalesmanActivityDetailInfo| { &mut m.HCAIPINLEJC },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SalesmanActivityDetailInfo>(
            "SalesmanActivityDetailInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SalesmanActivityDetailInfo {
    const NAME: &'static str = "SalesmanActivityDetailInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                72 => {
                    self.AFJBNMCAMOB = is.read_uint32()?;
                },
                96 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.FNPJPBEODBN = is.read_bool()?;
                },
                24 => {
                    self.GCGDGLAKAIC = is.read_uint32()?;
                },
                32 => {
                    self.day_index = is.read_uint32()?;
                },
                50 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.selected_reward_id_map.insert(key, value);
                },
                112 => {
                    self.CCKNCIGDIDH = is.read_uint32()?;
                },
                64 => {
                    self.day_reward_id = is.read_uint32()?;
                },
                8 => {
                    self.PNGNAEEEEHC = is.read_bool()?;
                },
                120 => {
                    self.HCAIPINLEJC = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.AFJBNMCAMOB != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.AFJBNMCAMOB);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::SalesmanStatusType::SalesmanStatusType::SALESMAN_STATUS_NONE) {
            my_size += ::protobuf::rt::int32_size(12, self.status.value());
        }
        if self.FNPJPBEODBN != false {
            my_size += 1 + 1;
        }
        if self.GCGDGLAKAIC != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.GCGDGLAKAIC);
        }
        if self.day_index != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.day_index);
        }
        for (k, v) in &self.selected_reward_id_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.CCKNCIGDIDH != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.CCKNCIGDIDH);
        }
        if self.day_reward_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.day_reward_id);
        }
        if self.PNGNAEEEEHC != false {
            my_size += 1 + 1;
        }
        if self.HCAIPINLEJC != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.HCAIPINLEJC);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.AFJBNMCAMOB != 0 {
            os.write_uint32(9, self.AFJBNMCAMOB)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::SalesmanStatusType::SalesmanStatusType::SALESMAN_STATUS_NONE) {
            os.write_enum(12, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if self.FNPJPBEODBN != false {
            os.write_bool(2, self.FNPJPBEODBN)?;
        }
        if self.GCGDGLAKAIC != 0 {
            os.write_uint32(3, self.GCGDGLAKAIC)?;
        }
        if self.day_index != 0 {
            os.write_uint32(4, self.day_index)?;
        }
        for (k, v) in &self.selected_reward_id_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(50)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if self.CCKNCIGDIDH != 0 {
            os.write_uint32(14, self.CCKNCIGDIDH)?;
        }
        if self.day_reward_id != 0 {
            os.write_uint32(8, self.day_reward_id)?;
        }
        if self.PNGNAEEEEHC != false {
            os.write_bool(1, self.PNGNAEEEEHC)?;
        }
        if self.HCAIPINLEJC != 0 {
            os.write_uint32(15, self.HCAIPINLEJC)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SalesmanActivityDetailInfo {
        SalesmanActivityDetailInfo::new()
    }

    fn clear(&mut self) {
        self.AFJBNMCAMOB = 0;
        self.status = ::protobuf::EnumOrUnknown::new(super::SalesmanStatusType::SalesmanStatusType::SALESMAN_STATUS_NONE);
        self.FNPJPBEODBN = false;
        self.GCGDGLAKAIC = 0;
        self.day_index = 0;
        self.selected_reward_id_map.clear();
        self.CCKNCIGDIDH = 0;
        self.day_reward_id = 0;
        self.PNGNAEEEEHC = false;
        self.HCAIPINLEJC = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SalesmanActivityDetailInfo {
        static instance: ::protobuf::rt::Lazy<SalesmanActivityDetailInfo> = ::protobuf::rt::Lazy::new();
        instance.get(SalesmanActivityDetailInfo::new)
    }
}

impl ::protobuf::MessageFull for SalesmanActivityDetailInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SalesmanActivityDetailInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SalesmanActivityDetailInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SalesmanActivityDetailInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20SalesmanActivityDetailInfo.proto\x1a\x18SalesmanStatusType.proto\"\
    \x89\x04\n\x1aSalesmanActivityDetailInfo\x12\x20\n\x0bAFJBNMCAMOB\x18\t\
    \x20\x01(\rR\x0bAFJBNMCAMOB\x12+\n\x06status\x18\x0c\x20\x01(\x0e2\x13.S\
    alesmanStatusTypeR\x06status\x12\x20\n\x0bFNPJPBEODBN\x18\x02\x20\x01(\
    \x08R\x0bFNPJPBEODBN\x12\x20\n\x0bGCGDGLAKAIC\x18\x03\x20\x01(\rR\x0bGCG\
    DGLAKAIC\x12\x1b\n\tday_index\x18\x04\x20\x01(\rR\x08dayIndex\x12i\n\x16\
    selected_reward_id_map\x18\x06\x20\x03(\x0b24.SalesmanActivityDetailInfo\
    .SelectedRewardIdMapEntryR\x13selectedRewardIdMap\x12\x20\n\x0bCCKNCIGDI\
    DH\x18\x0e\x20\x01(\rR\x0bCCKNCIGDIDH\x12\"\n\rday_reward_id\x18\x08\x20\
    \x01(\rR\x0bdayRewardId\x12\x20\n\x0bPNGNAEEEEHC\x18\x01\x20\x01(\x08R\
    \x0bPNGNAEEEEHC\x12\x20\n\x0bHCAIPINLEJC\x18\x0f\x20\x01(\rR\x0bHCAIPINL\
    EJC\x1aF\n\x18SelectedRewardIdMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\
    \rR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01B\
    \x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::SalesmanStatusType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SalesmanActivityDetailInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
