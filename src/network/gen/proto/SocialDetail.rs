// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `SocialDetail.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:SocialDetail)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SocialDetail {
    // message fields
    // @@protoc_insertion_point(field:SocialDetail.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:SocialDetail.nickname)
    pub nickname: ::std::string::String,
    // @@protoc_insertion_point(field:SocialDetail.level)
    pub level: u32,
    // @@protoc_insertion_point(field:SocialDetail.avatar_id)
    pub avatar_id: u32,
    // @@protoc_insertion_point(field:SocialDetail.signature)
    pub signature: ::std::string::String,
    // @@protoc_insertion_point(field:SocialDetail.birthday)
    pub birthday: ::protobuf::MessageField<super::Birthday::Birthday>,
    // @@protoc_insertion_point(field:SocialDetail.world_level)
    pub world_level: u32,
    // @@protoc_insertion_point(field:SocialDetail.reserved_list)
    pub reserved_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SocialDetail.online_state)
    pub online_state: ::protobuf::EnumOrUnknown<super::FriendOnlineState::FriendOnlineState>,
    // @@protoc_insertion_point(field:SocialDetail.param)
    pub param: u32,
    // @@protoc_insertion_point(field:SocialDetail.is_friend)
    pub is_friend: bool,
    // @@protoc_insertion_point(field:SocialDetail.is_mp_mode_available)
    pub is_mp_mode_available: bool,
    // @@protoc_insertion_point(field:SocialDetail.online_id)
    pub online_id: ::std::string::String,
    // @@protoc_insertion_point(field:SocialDetail.name_card_id)
    pub name_card_id: u32,
    // @@protoc_insertion_point(field:SocialDetail.is_in_blacklist)
    pub is_in_blacklist: bool,
    // @@protoc_insertion_point(field:SocialDetail.is_chat_no_disturb)
    pub is_chat_no_disturb: bool,
    // @@protoc_insertion_point(field:SocialDetail.remark_name)
    pub remark_name: ::std::string::String,
    // @@protoc_insertion_point(field:SocialDetail.finish_achievement_num)
    pub finish_achievement_num: u32,
    // @@protoc_insertion_point(field:SocialDetail.tower_floor_index)
    pub tower_floor_index: u32,
    // @@protoc_insertion_point(field:SocialDetail.tower_level_index)
    pub tower_level_index: u32,
    // @@protoc_insertion_point(field:SocialDetail.is_show_avatar)
    pub is_show_avatar: bool,
    // @@protoc_insertion_point(field:SocialDetail.show_avatar_info_list)
    pub show_avatar_info_list: ::std::vec::Vec<super::SocialShowAvatarInfo::SocialShowAvatarInfo>,
    // @@protoc_insertion_point(field:SocialDetail.show_name_card_id_list)
    pub show_name_card_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SocialDetail.friend_enter_home_option)
    pub friend_enter_home_option: ::protobuf::EnumOrUnknown<super::FriendEnterHomeOption::FriendEnterHomeOption>,
    // @@protoc_insertion_point(field:SocialDetail.profile_picture)
    pub profile_picture: ::protobuf::MessageField<super::ProfilePicture::ProfilePicture>,
    // @@protoc_insertion_point(field:SocialDetail.ip_code)
    pub ip_code: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:SocialDetail.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SocialDetail {
    fn default() -> &'a SocialDetail {
        <SocialDetail as ::protobuf::Message>::default_instance()
    }
}

impl SocialDetail {
    pub fn new() -> SocialDetail {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(26);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &SocialDetail| { &m.uid },
            |m: &mut SocialDetail| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nickname",
            |m: &SocialDetail| { &m.nickname },
            |m: &mut SocialDetail| { &mut m.nickname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &SocialDetail| { &m.level },
            |m: &mut SocialDetail| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_id",
            |m: &SocialDetail| { &m.avatar_id },
            |m: &mut SocialDetail| { &mut m.avatar_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &SocialDetail| { &m.signature },
            |m: &mut SocialDetail| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Birthday::Birthday>(
            "birthday",
            |m: &SocialDetail| { &m.birthday },
            |m: &mut SocialDetail| { &mut m.birthday },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "world_level",
            |m: &SocialDetail| { &m.world_level },
            |m: &mut SocialDetail| { &mut m.world_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "reserved_list",
            |m: &SocialDetail| { &m.reserved_list },
            |m: &mut SocialDetail| { &mut m.reserved_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "online_state",
            |m: &SocialDetail| { &m.online_state },
            |m: &mut SocialDetail| { &mut m.online_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "param",
            |m: &SocialDetail| { &m.param },
            |m: &mut SocialDetail| { &mut m.param },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_friend",
            |m: &SocialDetail| { &m.is_friend },
            |m: &mut SocialDetail| { &mut m.is_friend },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_mp_mode_available",
            |m: &SocialDetail| { &m.is_mp_mode_available },
            |m: &mut SocialDetail| { &mut m.is_mp_mode_available },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "online_id",
            |m: &SocialDetail| { &m.online_id },
            |m: &mut SocialDetail| { &mut m.online_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name_card_id",
            |m: &SocialDetail| { &m.name_card_id },
            |m: &mut SocialDetail| { &mut m.name_card_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_in_blacklist",
            |m: &SocialDetail| { &m.is_in_blacklist },
            |m: &mut SocialDetail| { &mut m.is_in_blacklist },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_chat_no_disturb",
            |m: &SocialDetail| { &m.is_chat_no_disturb },
            |m: &mut SocialDetail| { &mut m.is_chat_no_disturb },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "remark_name",
            |m: &SocialDetail| { &m.remark_name },
            |m: &mut SocialDetail| { &mut m.remark_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "finish_achievement_num",
            |m: &SocialDetail| { &m.finish_achievement_num },
            |m: &mut SocialDetail| { &mut m.finish_achievement_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tower_floor_index",
            |m: &SocialDetail| { &m.tower_floor_index },
            |m: &mut SocialDetail| { &mut m.tower_floor_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tower_level_index",
            |m: &SocialDetail| { &m.tower_level_index },
            |m: &mut SocialDetail| { &mut m.tower_level_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_show_avatar",
            |m: &SocialDetail| { &m.is_show_avatar },
            |m: &mut SocialDetail| { &mut m.is_show_avatar },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "show_avatar_info_list",
            |m: &SocialDetail| { &m.show_avatar_info_list },
            |m: &mut SocialDetail| { &mut m.show_avatar_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "show_name_card_id_list",
            |m: &SocialDetail| { &m.show_name_card_id_list },
            |m: &mut SocialDetail| { &mut m.show_name_card_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "friend_enter_home_option",
            |m: &SocialDetail| { &m.friend_enter_home_option },
            |m: &mut SocialDetail| { &mut m.friend_enter_home_option },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ProfilePicture::ProfilePicture>(
            "profile_picture",
            |m: &SocialDetail| { &m.profile_picture },
            |m: &mut SocialDetail| { &mut m.profile_picture },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ip_code",
            |m: &SocialDetail| { &m.ip_code },
            |m: &mut SocialDetail| { &mut m.ip_code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SocialDetail>(
            "SocialDetail",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SocialDetail {
    const NAME: &'static str = "SocialDetail";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.uid = is.read_uint32()?;
                },
                18 => {
                    self.nickname = is.read_string()?;
                },
                24 => {
                    self.level = is.read_uint32()?;
                },
                32 => {
                    self.avatar_id = is.read_uint32()?;
                },
                42 => {
                    self.signature = is.read_string()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.birthday)?;
                },
                56 => {
                    self.world_level = is.read_uint32()?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.reserved_list)?;
                },
                64 => {
                    self.reserved_list.push(is.read_uint32()?);
                },
                72 => {
                    self.online_state = is.read_enum_or_unknown()?;
                },
                80 => {
                    self.param = is.read_uint32()?;
                },
                88 => {
                    self.is_friend = is.read_bool()?;
                },
                96 => {
                    self.is_mp_mode_available = is.read_bool()?;
                },
                106 => {
                    self.online_id = is.read_string()?;
                },
                112 => {
                    self.name_card_id = is.read_uint32()?;
                },
                120 => {
                    self.is_in_blacklist = is.read_bool()?;
                },
                128 => {
                    self.is_chat_no_disturb = is.read_bool()?;
                },
                138 => {
                    self.remark_name = is.read_string()?;
                },
                144 => {
                    self.finish_achievement_num = is.read_uint32()?;
                },
                152 => {
                    self.tower_floor_index = is.read_uint32()?;
                },
                160 => {
                    self.tower_level_index = is.read_uint32()?;
                },
                168 => {
                    self.is_show_avatar = is.read_bool()?;
                },
                178 => {
                    self.show_avatar_info_list.push(is.read_message()?);
                },
                186 => {
                    is.read_repeated_packed_uint32_into(&mut self.show_name_card_id_list)?;
                },
                184 => {
                    self.show_name_card_id_list.push(is.read_uint32()?);
                },
                192 => {
                    self.friend_enter_home_option = is.read_enum_or_unknown()?;
                },
                202 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.profile_picture)?;
                },
                210 => {
                    self.ip_code = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.uid);
        }
        if !self.nickname.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.nickname);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.level);
        }
        if self.avatar_id != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.avatar_id);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.signature);
        }
        if let Some(v) = self.birthday.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.world_level != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.world_level);
        }
        for value in &self.reserved_list {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        if self.online_state != ::protobuf::EnumOrUnknown::new(super::FriendOnlineState::FriendOnlineState::FRIEND_ONLINE_STATE_DISCONNECT) {
            my_size += ::protobuf::rt::int32_size(9, self.online_state.value());
        }
        if self.param != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.param);
        }
        if self.is_friend != false {
            my_size += 1 + 1;
        }
        if self.is_mp_mode_available != false {
            my_size += 1 + 1;
        }
        if !self.online_id.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.online_id);
        }
        if self.name_card_id != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.name_card_id);
        }
        if self.is_in_blacklist != false {
            my_size += 1 + 1;
        }
        if self.is_chat_no_disturb != false {
            my_size += 2 + 1;
        }
        if !self.remark_name.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.remark_name);
        }
        if self.finish_achievement_num != 0 {
            my_size += ::protobuf::rt::uint32_size(18, self.finish_achievement_num);
        }
        if self.tower_floor_index != 0 {
            my_size += ::protobuf::rt::uint32_size(19, self.tower_floor_index);
        }
        if self.tower_level_index != 0 {
            my_size += ::protobuf::rt::uint32_size(20, self.tower_level_index);
        }
        if self.is_show_avatar != false {
            my_size += 2 + 1;
        }
        for value in &self.show_avatar_info_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.show_name_card_id_list {
            my_size += ::protobuf::rt::uint32_size(23, *value);
        };
        if self.friend_enter_home_option != ::protobuf::EnumOrUnknown::new(super::FriendEnterHomeOption::FriendEnterHomeOption::FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM) {
            my_size += ::protobuf::rt::int32_size(24, self.friend_enter_home_option.value());
        }
        if let Some(v) = self.profile_picture.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.ip_code.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.ip_code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.uid != 0 {
            os.write_uint32(1, self.uid)?;
        }
        if !self.nickname.is_empty() {
            os.write_string(2, &self.nickname)?;
        }
        if self.level != 0 {
            os.write_uint32(3, self.level)?;
        }
        if self.avatar_id != 0 {
            os.write_uint32(4, self.avatar_id)?;
        }
        if !self.signature.is_empty() {
            os.write_string(5, &self.signature)?;
        }
        if let Some(v) = self.birthday.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.world_level != 0 {
            os.write_uint32(7, self.world_level)?;
        }
        for v in &self.reserved_list {
            os.write_uint32(8, *v)?;
        };
        if self.online_state != ::protobuf::EnumOrUnknown::new(super::FriendOnlineState::FriendOnlineState::FRIEND_ONLINE_STATE_DISCONNECT) {
            os.write_enum(9, ::protobuf::EnumOrUnknown::value(&self.online_state))?;
        }
        if self.param != 0 {
            os.write_uint32(10, self.param)?;
        }
        if self.is_friend != false {
            os.write_bool(11, self.is_friend)?;
        }
        if self.is_mp_mode_available != false {
            os.write_bool(12, self.is_mp_mode_available)?;
        }
        if !self.online_id.is_empty() {
            os.write_string(13, &self.online_id)?;
        }
        if self.name_card_id != 0 {
            os.write_uint32(14, self.name_card_id)?;
        }
        if self.is_in_blacklist != false {
            os.write_bool(15, self.is_in_blacklist)?;
        }
        if self.is_chat_no_disturb != false {
            os.write_bool(16, self.is_chat_no_disturb)?;
        }
        if !self.remark_name.is_empty() {
            os.write_string(17, &self.remark_name)?;
        }
        if self.finish_achievement_num != 0 {
            os.write_uint32(18, self.finish_achievement_num)?;
        }
        if self.tower_floor_index != 0 {
            os.write_uint32(19, self.tower_floor_index)?;
        }
        if self.tower_level_index != 0 {
            os.write_uint32(20, self.tower_level_index)?;
        }
        if self.is_show_avatar != false {
            os.write_bool(21, self.is_show_avatar)?;
        }
        for v in &self.show_avatar_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(22, v, os)?;
        };
        for v in &self.show_name_card_id_list {
            os.write_uint32(23, *v)?;
        };
        if self.friend_enter_home_option != ::protobuf::EnumOrUnknown::new(super::FriendEnterHomeOption::FriendEnterHomeOption::FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM) {
            os.write_enum(24, ::protobuf::EnumOrUnknown::value(&self.friend_enter_home_option))?;
        }
        if let Some(v) = self.profile_picture.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(25, v, os)?;
        }
        if !self.ip_code.is_empty() {
            os.write_string(26, &self.ip_code)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SocialDetail {
        SocialDetail::new()
    }

    fn clear(&mut self) {
        self.uid = 0;
        self.nickname.clear();
        self.level = 0;
        self.avatar_id = 0;
        self.signature.clear();
        self.birthday.clear();
        self.world_level = 0;
        self.reserved_list.clear();
        self.online_state = ::protobuf::EnumOrUnknown::new(super::FriendOnlineState::FriendOnlineState::FRIEND_ONLINE_STATE_DISCONNECT);
        self.param = 0;
        self.is_friend = false;
        self.is_mp_mode_available = false;
        self.online_id.clear();
        self.name_card_id = 0;
        self.is_in_blacklist = false;
        self.is_chat_no_disturb = false;
        self.remark_name.clear();
        self.finish_achievement_num = 0;
        self.tower_floor_index = 0;
        self.tower_level_index = 0;
        self.is_show_avatar = false;
        self.show_avatar_info_list.clear();
        self.show_name_card_id_list.clear();
        self.friend_enter_home_option = ::protobuf::EnumOrUnknown::new(super::FriendEnterHomeOption::FriendEnterHomeOption::FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM);
        self.profile_picture.clear();
        self.ip_code.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SocialDetail {
        static instance: SocialDetail = SocialDetail {
            uid: 0,
            nickname: ::std::string::String::new(),
            level: 0,
            avatar_id: 0,
            signature: ::std::string::String::new(),
            birthday: ::protobuf::MessageField::none(),
            world_level: 0,
            reserved_list: ::std::vec::Vec::new(),
            online_state: ::protobuf::EnumOrUnknown::from_i32(0),
            param: 0,
            is_friend: false,
            is_mp_mode_available: false,
            online_id: ::std::string::String::new(),
            name_card_id: 0,
            is_in_blacklist: false,
            is_chat_no_disturb: false,
            remark_name: ::std::string::String::new(),
            finish_achievement_num: 0,
            tower_floor_index: 0,
            tower_level_index: 0,
            is_show_avatar: false,
            show_avatar_info_list: ::std::vec::Vec::new(),
            show_name_card_id_list: ::std::vec::Vec::new(),
            friend_enter_home_option: ::protobuf::EnumOrUnknown::from_i32(0),
            profile_picture: ::protobuf::MessageField::none(),
            ip_code: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SocialDetail {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SocialDetail").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SocialDetail {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SocialDetail {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12SocialDetail.proto\x1a\x0eBirthday.proto\x1a\x17FriendOnlineState.\
    proto\x1a\x1aSocialShowAvatarInfo.proto\x1a\x1bFriendEnterHomeOption.pro\
    to\x1a\x14ProfilePicture.proto\"\xa0\x08\n\x0cSocialDetail\x12\x10\n\x03\
    uid\x18\x01\x20\x01(\rR\x03uid\x12\x1a\n\x08nickname\x18\x02\x20\x01(\tR\
    \x08nickname\x12\x14\n\x05level\x18\x03\x20\x01(\rR\x05level\x12\x1b\n\t\
    avatar_id\x18\x04\x20\x01(\rR\x08avatarId\x12\x1c\n\tsignature\x18\x05\
    \x20\x01(\tR\tsignature\x12%\n\x08birthday\x18\x06\x20\x01(\x0b2\t.Birth\
    dayR\x08birthday\x12\x1f\n\x0bworld_level\x18\x07\x20\x01(\rR\nworldLeve\
    l\x12#\n\rreserved_list\x18\x08\x20\x03(\rR\x0creservedList\x125\n\x0con\
    line_state\x18\t\x20\x01(\x0e2\x12.FriendOnlineStateR\x0bonlineState\x12\
    \x14\n\x05param\x18\n\x20\x01(\rR\x05param\x12\x1b\n\tis_friend\x18\x0b\
    \x20\x01(\x08R\x08isFriend\x12/\n\x14is_mp_mode_available\x18\x0c\x20\
    \x01(\x08R\x11isMpModeAvailable\x12\x1b\n\tonline_id\x18\r\x20\x01(\tR\
    \x08onlineId\x12\x20\n\x0cname_card_id\x18\x0e\x20\x01(\rR\nnameCardId\
    \x12&\n\x0fis_in_blacklist\x18\x0f\x20\x01(\x08R\risInBlacklist\x12+\n\
    \x12is_chat_no_disturb\x18\x10\x20\x01(\x08R\x0fisChatNoDisturb\x12\x1f\
    \n\x0bremark_name\x18\x11\x20\x01(\tR\nremarkName\x124\n\x16finish_achie\
    vement_num\x18\x12\x20\x01(\rR\x14finishAchievementNum\x12*\n\x11tower_f\
    loor_index\x18\x13\x20\x01(\rR\x0ftowerFloorIndex\x12*\n\x11tower_level_\
    index\x18\x14\x20\x01(\rR\x0ftowerLevelIndex\x12$\n\x0eis_show_avatar\
    \x18\x15\x20\x01(\x08R\x0cisShowAvatar\x12H\n\x15show_avatar_info_list\
    \x18\x16\x20\x03(\x0b2\x15.SocialShowAvatarInfoR\x12showAvatarInfoList\
    \x122\n\x16show_name_card_id_list\x18\x17\x20\x03(\rR\x12showNameCardIdL\
    ist\x12O\n\x18friend_enter_home_option\x18\x18\x20\x01(\x0e2\x16.FriendE\
    nterHomeOptionR\x15friendEnterHomeOption\x128\n\x0fprofile_picture\x18\
    \x19\x20\x01(\x0b2\x0f.ProfilePictureR\x0eprofilePicture\x12\x17\n\x07ip\
    _code\x18\x1a\x20\x01(\tR\x06ipCodeB\x1b\n\x19emu.grasscutter.net.protob\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::Birthday::file_descriptor().clone());
            deps.push(super::FriendOnlineState::file_descriptor().clone());
            deps.push(super::SocialShowAvatarInfo::file_descriptor().clone());
            deps.push(super::FriendEnterHomeOption::file_descriptor().clone());
            deps.push(super::ProfilePicture::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SocialDetail::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
