// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AbilityScalarValueEntry.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AbilityScalarValueEntry)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AbilityScalarValueEntry {
    // message fields
    // @@protoc_insertion_point(field:AbilityScalarValueEntry.key)
    pub key: ::protobuf::MessageField<super::AbilityString::AbilityString>,
    // @@protoc_insertion_point(field:AbilityScalarValueEntry.value_type)
    pub value_type: ::protobuf::EnumOrUnknown<super::AbilityScalarType::AbilityScalarType>,
    // message oneof groups
    pub value: ::std::option::Option<ability_scalar_value_entry::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:AbilityScalarValueEntry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AbilityScalarValueEntry {
    fn default() -> &'a AbilityScalarValueEntry {
        <AbilityScalarValueEntry as ::protobuf::Message>::default_instance()
    }
}

impl AbilityScalarValueEntry {
    pub fn new() -> AbilityScalarValueEntry {
        ::std::default::Default::default()
    }

    // float float_value = 3;

    pub fn float_value(&self) -> f32 {
        match self.value {
            ::std::option::Option::Some(ability_scalar_value_entry::Value::FloatValue(v)) => v,
            _ => 0.,
        }
    }

    pub fn clear_float_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_float_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(ability_scalar_value_entry::Value::FloatValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_float_value(&mut self, v: f32) {
        self.value = ::std::option::Option::Some(ability_scalar_value_entry::Value::FloatValue(v))
    }

    // string string_value = 4;

    pub fn string_value(&self) -> &str {
        match self.value {
            ::std::option::Option::Some(ability_scalar_value_entry::Value::StringValue(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_string_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_string_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(ability_scalar_value_entry::Value::StringValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(ability_scalar_value_entry::Value::StringValue(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(ability_scalar_value_entry::Value::StringValue(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(ability_scalar_value_entry::Value::StringValue(::std::string::String::new()));
        }
        match self.value {
            ::std::option::Option::Some(ability_scalar_value_entry::Value::StringValue(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_value(&mut self) -> ::std::string::String {
        if self.has_string_value() {
            match self.value.take() {
                ::std::option::Option::Some(ability_scalar_value_entry::Value::StringValue(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // int32 int_value = 5;

    pub fn int_value(&self) -> i32 {
        match self.value {
            ::std::option::Option::Some(ability_scalar_value_entry::Value::IntValue(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_int_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_int_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(ability_scalar_value_entry::Value::IntValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int_value(&mut self, v: i32) {
        self.value = ::std::option::Option::Some(ability_scalar_value_entry::Value::IntValue(v))
    }

    // uint32 uint_value = 6;

    pub fn uint_value(&self) -> u32 {
        match self.value {
            ::std::option::Option::Some(ability_scalar_value_entry::Value::UintValue(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_uint_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_uint_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(ability_scalar_value_entry::Value::UintValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uint_value(&mut self, v: u32) {
        self.value = ::std::option::Option::Some(ability_scalar_value_entry::Value::UintValue(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AbilityString::AbilityString>(
            "key",
            |m: &AbilityScalarValueEntry| { &m.key },
            |m: &mut AbilityScalarValueEntry| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value_type",
            |m: &AbilityScalarValueEntry| { &m.value_type },
            |m: &mut AbilityScalarValueEntry| { &mut m.value_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "float_value",
            AbilityScalarValueEntry::has_float_value,
            AbilityScalarValueEntry::float_value,
            AbilityScalarValueEntry::set_float_value,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "string_value",
            AbilityScalarValueEntry::has_string_value,
            AbilityScalarValueEntry::string_value,
            AbilityScalarValueEntry::set_string_value,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "int_value",
            AbilityScalarValueEntry::has_int_value,
            AbilityScalarValueEntry::int_value,
            AbilityScalarValueEntry::set_int_value,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "uint_value",
            AbilityScalarValueEntry::has_uint_value,
            AbilityScalarValueEntry::uint_value,
            AbilityScalarValueEntry::set_uint_value,
        ));
        oneofs.push(ability_scalar_value_entry::Value::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AbilityScalarValueEntry>(
            "AbilityScalarValueEntry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AbilityScalarValueEntry {
    const NAME: &'static str = "AbilityScalarValueEntry";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.key)?;
                },
                16 => {
                    self.value_type = is.read_enum_or_unknown()?;
                },
                29 => {
                    self.value = ::std::option::Option::Some(ability_scalar_value_entry::Value::FloatValue(is.read_float()?));
                },
                34 => {
                    self.value = ::std::option::Option::Some(ability_scalar_value_entry::Value::StringValue(is.read_string()?));
                },
                40 => {
                    self.value = ::std::option::Option::Some(ability_scalar_value_entry::Value::IntValue(is.read_int32()?));
                },
                48 => {
                    self.value = ::std::option::Option::Some(ability_scalar_value_entry::Value::UintValue(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.value_type != ::protobuf::EnumOrUnknown::new(super::AbilityScalarType::AbilityScalarType::ABILITY_SCALAR_TYPE_UNKNOW) {
            my_size += ::protobuf::rt::int32_size(2, self.value_type.value());
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &ability_scalar_value_entry::Value::FloatValue(v) => {
                    my_size += 1 + 4;
                },
                &ability_scalar_value_entry::Value::StringValue(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
                &ability_scalar_value_entry::Value::IntValue(v) => {
                    my_size += ::protobuf::rt::int32_size(5, v);
                },
                &ability_scalar_value_entry::Value::UintValue(v) => {
                    my_size += ::protobuf::rt::uint32_size(6, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.value_type != ::protobuf::EnumOrUnknown::new(super::AbilityScalarType::AbilityScalarType::ABILITY_SCALAR_TYPE_UNKNOW) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.value_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &ability_scalar_value_entry::Value::FloatValue(v) => {
                    os.write_float(3, v)?;
                },
                &ability_scalar_value_entry::Value::StringValue(ref v) => {
                    os.write_string(4, v)?;
                },
                &ability_scalar_value_entry::Value::IntValue(v) => {
                    os.write_int32(5, v)?;
                },
                &ability_scalar_value_entry::Value::UintValue(v) => {
                    os.write_uint32(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AbilityScalarValueEntry {
        AbilityScalarValueEntry::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value_type = ::protobuf::EnumOrUnknown::new(super::AbilityScalarType::AbilityScalarType::ABILITY_SCALAR_TYPE_UNKNOW);
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AbilityScalarValueEntry {
        static instance: AbilityScalarValueEntry = AbilityScalarValueEntry {
            key: ::protobuf::MessageField::none(),
            value_type: ::protobuf::EnumOrUnknown::from_i32(0),
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AbilityScalarValueEntry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AbilityScalarValueEntry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AbilityScalarValueEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AbilityScalarValueEntry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AbilityScalarValueEntry`
pub mod ability_scalar_value_entry {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:AbilityScalarValueEntry.value)
    pub enum Value {
        // @@protoc_insertion_point(oneof_field:AbilityScalarValueEntry.float_value)
        FloatValue(f32),
        // @@protoc_insertion_point(oneof_field:AbilityScalarValueEntry.string_value)
        StringValue(::std::string::String),
        // @@protoc_insertion_point(oneof_field:AbilityScalarValueEntry.int_value)
        IntValue(i32),
        // @@protoc_insertion_point(oneof_field:AbilityScalarValueEntry.uint_value)
        UintValue(u32),
    }

    impl ::protobuf::Oneof for Value {
    }

    impl ::protobuf::OneofFull for Value {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AbilityScalarValueEntry as ::protobuf::MessageFull>::descriptor().oneof_by_name("value").unwrap()).clone()
        }
    }

    impl Value {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Value>("value")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dAbilityScalarValueEntry.proto\x1a\x13AbilityString.proto\x1a\x17Ab\
    ilityScalarType.proto\"\xff\x01\n\x17AbilityScalarValueEntry\x12\x20\n\
    \x03key\x18\x01\x20\x01(\x0b2\x0e.AbilityStringR\x03key\x121\n\nvalue_ty\
    pe\x18\x02\x20\x01(\x0e2\x12.AbilityScalarTypeR\tvalueType\x12!\n\x0bflo\
    at_value\x18\x03\x20\x01(\x02H\0R\nfloatValue\x12#\n\x0cstring_value\x18\
    \x04\x20\x01(\tH\0R\x0bstringValue\x12\x1d\n\tint_value\x18\x05\x20\x01(\
    \x05H\0R\x08intValue\x12\x1f\n\nuint_value\x18\x06\x20\x01(\rH\0R\tuintV\
    alueB\x07\n\x05valueB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::AbilityString::file_descriptor().clone());
            deps.push(super::AbilityScalarType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AbilityScalarValueEntry::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
