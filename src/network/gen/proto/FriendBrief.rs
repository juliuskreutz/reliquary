// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FriendBrief.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:FriendBrief)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FriendBrief {
    // message fields
    // @@protoc_insertion_point(field:FriendBrief.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:FriendBrief.nickname)
    pub nickname: ::std::string::String,
    // @@protoc_insertion_point(field:FriendBrief.level)
    pub level: u32,
    // @@protoc_insertion_point(field:FriendBrief.avatar_id)
    pub avatar_id: u32,
    // @@protoc_insertion_point(field:FriendBrief.world_level)
    pub world_level: u32,
    // @@protoc_insertion_point(field:FriendBrief.signature)
    pub signature: ::std::string::String,
    // @@protoc_insertion_point(field:FriendBrief.online_state)
    pub online_state: ::protobuf::EnumOrUnknown<super::FriendOnlineState::FriendOnlineState>,
    // @@protoc_insertion_point(field:FriendBrief.param)
    pub param: u32,
    // @@protoc_insertion_point(field:FriendBrief.is_mp_mode_available)
    pub is_mp_mode_available: bool,
    // @@protoc_insertion_point(field:FriendBrief.online_id)
    pub online_id: ::std::string::String,
    // @@protoc_insertion_point(field:FriendBrief.last_active_time)
    pub last_active_time: u32,
    // @@protoc_insertion_point(field:FriendBrief.name_card_id)
    pub name_card_id: u32,
    // @@protoc_insertion_point(field:FriendBrief.mp_player_num)
    pub mp_player_num: u32,
    // @@protoc_insertion_point(field:FriendBrief.is_chat_no_disturb)
    pub is_chat_no_disturb: bool,
    // @@protoc_insertion_point(field:FriendBrief.chat_sequence)
    pub chat_sequence: u32,
    // @@protoc_insertion_point(field:FriendBrief.remark_name)
    pub remark_name: ::std::string::String,
    // @@protoc_insertion_point(field:FriendBrief.show_avatar_info_list)
    pub show_avatar_info_list: ::std::vec::Vec<super::SocialShowAvatarInfo::SocialShowAvatarInfo>,
    // @@protoc_insertion_point(field:FriendBrief.friend_enter_home_option)
    pub friend_enter_home_option: ::protobuf::EnumOrUnknown<super::FriendEnterHomeOption::FriendEnterHomeOption>,
    // @@protoc_insertion_point(field:FriendBrief.profile_picture)
    pub profile_picture: ::protobuf::MessageField<super::ProfilePicture::ProfilePicture>,
    // @@protoc_insertion_point(field:FriendBrief.is_game_source)
    pub is_game_source: bool,
    // @@protoc_insertion_point(field:FriendBrief.is_psn_source)
    pub is_psn_source: bool,
    // @@protoc_insertion_point(field:FriendBrief.platform_type)
    pub platform_type: ::protobuf::EnumOrUnknown<super::PlatformType::PlatformType>,
    // @@protoc_insertion_point(field:FriendBrief.is_in_duel)
    pub is_in_duel: bool,
    // @@protoc_insertion_point(field:FriendBrief.is_duel_observable)
    pub is_duel_observable: bool,
    // special fields
    // @@protoc_insertion_point(special_field:FriendBrief.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FriendBrief {
    fn default() -> &'a FriendBrief {
        <FriendBrief as ::protobuf::Message>::default_instance()
    }
}

impl FriendBrief {
    pub fn new() -> FriendBrief {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(24);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &FriendBrief| { &m.uid },
            |m: &mut FriendBrief| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nickname",
            |m: &FriendBrief| { &m.nickname },
            |m: &mut FriendBrief| { &mut m.nickname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &FriendBrief| { &m.level },
            |m: &mut FriendBrief| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_id",
            |m: &FriendBrief| { &m.avatar_id },
            |m: &mut FriendBrief| { &mut m.avatar_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "world_level",
            |m: &FriendBrief| { &m.world_level },
            |m: &mut FriendBrief| { &mut m.world_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &FriendBrief| { &m.signature },
            |m: &mut FriendBrief| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "online_state",
            |m: &FriendBrief| { &m.online_state },
            |m: &mut FriendBrief| { &mut m.online_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "param",
            |m: &FriendBrief| { &m.param },
            |m: &mut FriendBrief| { &mut m.param },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_mp_mode_available",
            |m: &FriendBrief| { &m.is_mp_mode_available },
            |m: &mut FriendBrief| { &mut m.is_mp_mode_available },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "online_id",
            |m: &FriendBrief| { &m.online_id },
            |m: &mut FriendBrief| { &mut m.online_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_active_time",
            |m: &FriendBrief| { &m.last_active_time },
            |m: &mut FriendBrief| { &mut m.last_active_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name_card_id",
            |m: &FriendBrief| { &m.name_card_id },
            |m: &mut FriendBrief| { &mut m.name_card_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mp_player_num",
            |m: &FriendBrief| { &m.mp_player_num },
            |m: &mut FriendBrief| { &mut m.mp_player_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_chat_no_disturb",
            |m: &FriendBrief| { &m.is_chat_no_disturb },
            |m: &mut FriendBrief| { &mut m.is_chat_no_disturb },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chat_sequence",
            |m: &FriendBrief| { &m.chat_sequence },
            |m: &mut FriendBrief| { &mut m.chat_sequence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "remark_name",
            |m: &FriendBrief| { &m.remark_name },
            |m: &mut FriendBrief| { &mut m.remark_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "show_avatar_info_list",
            |m: &FriendBrief| { &m.show_avatar_info_list },
            |m: &mut FriendBrief| { &mut m.show_avatar_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "friend_enter_home_option",
            |m: &FriendBrief| { &m.friend_enter_home_option },
            |m: &mut FriendBrief| { &mut m.friend_enter_home_option },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ProfilePicture::ProfilePicture>(
            "profile_picture",
            |m: &FriendBrief| { &m.profile_picture },
            |m: &mut FriendBrief| { &mut m.profile_picture },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_game_source",
            |m: &FriendBrief| { &m.is_game_source },
            |m: &mut FriendBrief| { &mut m.is_game_source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_psn_source",
            |m: &FriendBrief| { &m.is_psn_source },
            |m: &mut FriendBrief| { &mut m.is_psn_source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "platform_type",
            |m: &FriendBrief| { &m.platform_type },
            |m: &mut FriendBrief| { &mut m.platform_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_in_duel",
            |m: &FriendBrief| { &m.is_in_duel },
            |m: &mut FriendBrief| { &mut m.is_in_duel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_duel_observable",
            |m: &FriendBrief| { &m.is_duel_observable },
            |m: &mut FriendBrief| { &mut m.is_duel_observable },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FriendBrief>(
            "FriendBrief",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FriendBrief {
    const NAME: &'static str = "FriendBrief";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.uid = is.read_uint32()?;
                },
                18 => {
                    self.nickname = is.read_string()?;
                },
                24 => {
                    self.level = is.read_uint32()?;
                },
                32 => {
                    self.avatar_id = is.read_uint32()?;
                },
                40 => {
                    self.world_level = is.read_uint32()?;
                },
                50 => {
                    self.signature = is.read_string()?;
                },
                56 => {
                    self.online_state = is.read_enum_or_unknown()?;
                },
                64 => {
                    self.param = is.read_uint32()?;
                },
                80 => {
                    self.is_mp_mode_available = is.read_bool()?;
                },
                90 => {
                    self.online_id = is.read_string()?;
                },
                96 => {
                    self.last_active_time = is.read_uint32()?;
                },
                104 => {
                    self.name_card_id = is.read_uint32()?;
                },
                112 => {
                    self.mp_player_num = is.read_uint32()?;
                },
                120 => {
                    self.is_chat_no_disturb = is.read_bool()?;
                },
                128 => {
                    self.chat_sequence = is.read_uint32()?;
                },
                138 => {
                    self.remark_name = is.read_string()?;
                },
                178 => {
                    self.show_avatar_info_list.push(is.read_message()?);
                },
                184 => {
                    self.friend_enter_home_option = is.read_enum_or_unknown()?;
                },
                194 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.profile_picture)?;
                },
                200 => {
                    self.is_game_source = is.read_bool()?;
                },
                208 => {
                    self.is_psn_source = is.read_bool()?;
                },
                216 => {
                    self.platform_type = is.read_enum_or_unknown()?;
                },
                224 => {
                    self.is_in_duel = is.read_bool()?;
                },
                232 => {
                    self.is_duel_observable = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.uid);
        }
        if !self.nickname.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.nickname);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.level);
        }
        if self.avatar_id != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.avatar_id);
        }
        if self.world_level != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.world_level);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.signature);
        }
        if self.online_state != ::protobuf::EnumOrUnknown::new(super::FriendOnlineState::FriendOnlineState::FRIEND_ONLINE_STATE_DISCONNECT) {
            my_size += ::protobuf::rt::int32_size(7, self.online_state.value());
        }
        if self.param != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.param);
        }
        if self.is_mp_mode_available != false {
            my_size += 1 + 1;
        }
        if !self.online_id.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.online_id);
        }
        if self.last_active_time != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.last_active_time);
        }
        if self.name_card_id != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.name_card_id);
        }
        if self.mp_player_num != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.mp_player_num);
        }
        if self.is_chat_no_disturb != false {
            my_size += 1 + 1;
        }
        if self.chat_sequence != 0 {
            my_size += ::protobuf::rt::uint32_size(16, self.chat_sequence);
        }
        if !self.remark_name.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.remark_name);
        }
        for value in &self.show_avatar_info_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.friend_enter_home_option != ::protobuf::EnumOrUnknown::new(super::FriendEnterHomeOption::FriendEnterHomeOption::FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM) {
            my_size += ::protobuf::rt::int32_size(23, self.friend_enter_home_option.value());
        }
        if let Some(v) = self.profile_picture.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.is_game_source != false {
            my_size += 2 + 1;
        }
        if self.is_psn_source != false {
            my_size += 2 + 1;
        }
        if self.platform_type != ::protobuf::EnumOrUnknown::new(super::PlatformType::PlatformType::PLATFORM_TYPE_EDITOR) {
            my_size += ::protobuf::rt::int32_size(27, self.platform_type.value());
        }
        if self.is_in_duel != false {
            my_size += 2 + 1;
        }
        if self.is_duel_observable != false {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.uid != 0 {
            os.write_uint32(1, self.uid)?;
        }
        if !self.nickname.is_empty() {
            os.write_string(2, &self.nickname)?;
        }
        if self.level != 0 {
            os.write_uint32(3, self.level)?;
        }
        if self.avatar_id != 0 {
            os.write_uint32(4, self.avatar_id)?;
        }
        if self.world_level != 0 {
            os.write_uint32(5, self.world_level)?;
        }
        if !self.signature.is_empty() {
            os.write_string(6, &self.signature)?;
        }
        if self.online_state != ::protobuf::EnumOrUnknown::new(super::FriendOnlineState::FriendOnlineState::FRIEND_ONLINE_STATE_DISCONNECT) {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&self.online_state))?;
        }
        if self.param != 0 {
            os.write_uint32(8, self.param)?;
        }
        if self.is_mp_mode_available != false {
            os.write_bool(10, self.is_mp_mode_available)?;
        }
        if !self.online_id.is_empty() {
            os.write_string(11, &self.online_id)?;
        }
        if self.last_active_time != 0 {
            os.write_uint32(12, self.last_active_time)?;
        }
        if self.name_card_id != 0 {
            os.write_uint32(13, self.name_card_id)?;
        }
        if self.mp_player_num != 0 {
            os.write_uint32(14, self.mp_player_num)?;
        }
        if self.is_chat_no_disturb != false {
            os.write_bool(15, self.is_chat_no_disturb)?;
        }
        if self.chat_sequence != 0 {
            os.write_uint32(16, self.chat_sequence)?;
        }
        if !self.remark_name.is_empty() {
            os.write_string(17, &self.remark_name)?;
        }
        for v in &self.show_avatar_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(22, v, os)?;
        };
        if self.friend_enter_home_option != ::protobuf::EnumOrUnknown::new(super::FriendEnterHomeOption::FriendEnterHomeOption::FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM) {
            os.write_enum(23, ::protobuf::EnumOrUnknown::value(&self.friend_enter_home_option))?;
        }
        if let Some(v) = self.profile_picture.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(24, v, os)?;
        }
        if self.is_game_source != false {
            os.write_bool(25, self.is_game_source)?;
        }
        if self.is_psn_source != false {
            os.write_bool(26, self.is_psn_source)?;
        }
        if self.platform_type != ::protobuf::EnumOrUnknown::new(super::PlatformType::PlatformType::PLATFORM_TYPE_EDITOR) {
            os.write_enum(27, ::protobuf::EnumOrUnknown::value(&self.platform_type))?;
        }
        if self.is_in_duel != false {
            os.write_bool(28, self.is_in_duel)?;
        }
        if self.is_duel_observable != false {
            os.write_bool(29, self.is_duel_observable)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FriendBrief {
        FriendBrief::new()
    }

    fn clear(&mut self) {
        self.uid = 0;
        self.nickname.clear();
        self.level = 0;
        self.avatar_id = 0;
        self.world_level = 0;
        self.signature.clear();
        self.online_state = ::protobuf::EnumOrUnknown::new(super::FriendOnlineState::FriendOnlineState::FRIEND_ONLINE_STATE_DISCONNECT);
        self.param = 0;
        self.is_mp_mode_available = false;
        self.online_id.clear();
        self.last_active_time = 0;
        self.name_card_id = 0;
        self.mp_player_num = 0;
        self.is_chat_no_disturb = false;
        self.chat_sequence = 0;
        self.remark_name.clear();
        self.show_avatar_info_list.clear();
        self.friend_enter_home_option = ::protobuf::EnumOrUnknown::new(super::FriendEnterHomeOption::FriendEnterHomeOption::FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM);
        self.profile_picture.clear();
        self.is_game_source = false;
        self.is_psn_source = false;
        self.platform_type = ::protobuf::EnumOrUnknown::new(super::PlatformType::PlatformType::PLATFORM_TYPE_EDITOR);
        self.is_in_duel = false;
        self.is_duel_observable = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FriendBrief {
        static instance: FriendBrief = FriendBrief {
            uid: 0,
            nickname: ::std::string::String::new(),
            level: 0,
            avatar_id: 0,
            world_level: 0,
            signature: ::std::string::String::new(),
            online_state: ::protobuf::EnumOrUnknown::from_i32(0),
            param: 0,
            is_mp_mode_available: false,
            online_id: ::std::string::String::new(),
            last_active_time: 0,
            name_card_id: 0,
            mp_player_num: 0,
            is_chat_no_disturb: false,
            chat_sequence: 0,
            remark_name: ::std::string::String::new(),
            show_avatar_info_list: ::std::vec::Vec::new(),
            friend_enter_home_option: ::protobuf::EnumOrUnknown::from_i32(0),
            profile_picture: ::protobuf::MessageField::none(),
            is_game_source: false,
            is_psn_source: false,
            platform_type: ::protobuf::EnumOrUnknown::from_i32(0),
            is_in_duel: false,
            is_duel_observable: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FriendBrief {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FriendBrief").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FriendBrief {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FriendBrief {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FriendBrief.proto\x1a\x17FriendOnlineState.proto\x1a\x1aSocialShow\
    AvatarInfo.proto\x1a\x1bFriendEnterHomeOption.proto\x1a\x14ProfilePictur\
    e.proto\x1a\x12PlatformType.proto\"\xca\x07\n\x0bFriendBrief\x12\x10\n\
    \x03uid\x18\x01\x20\x01(\rR\x03uid\x12\x1a\n\x08nickname\x18\x02\x20\x01\
    (\tR\x08nickname\x12\x14\n\x05level\x18\x03\x20\x01(\rR\x05level\x12\x1b\
    \n\tavatar_id\x18\x04\x20\x01(\rR\x08avatarId\x12\x1f\n\x0bworld_level\
    \x18\x05\x20\x01(\rR\nworldLevel\x12\x1c\n\tsignature\x18\x06\x20\x01(\t\
    R\tsignature\x125\n\x0conline_state\x18\x07\x20\x01(\x0e2\x12.FriendOnli\
    neStateR\x0bonlineState\x12\x14\n\x05param\x18\x08\x20\x01(\rR\x05param\
    \x12/\n\x14is_mp_mode_available\x18\n\x20\x01(\x08R\x11isMpModeAvailable\
    \x12\x1b\n\tonline_id\x18\x0b\x20\x01(\tR\x08onlineId\x12(\n\x10last_act\
    ive_time\x18\x0c\x20\x01(\rR\x0elastActiveTime\x12\x20\n\x0cname_card_id\
    \x18\r\x20\x01(\rR\nnameCardId\x12\"\n\rmp_player_num\x18\x0e\x20\x01(\r\
    R\x0bmpPlayerNum\x12+\n\x12is_chat_no_disturb\x18\x0f\x20\x01(\x08R\x0fi\
    sChatNoDisturb\x12#\n\rchat_sequence\x18\x10\x20\x01(\rR\x0cchatSequence\
    \x12\x1f\n\x0bremark_name\x18\x11\x20\x01(\tR\nremarkName\x12H\n\x15show\
    _avatar_info_list\x18\x16\x20\x03(\x0b2\x15.SocialShowAvatarInfoR\x12sho\
    wAvatarInfoList\x12O\n\x18friend_enter_home_option\x18\x17\x20\x01(\x0e2\
    \x16.FriendEnterHomeOptionR\x15friendEnterHomeOption\x128\n\x0fprofile_p\
    icture\x18\x18\x20\x01(\x0b2\x0f.ProfilePictureR\x0eprofilePicture\x12$\
    \n\x0eis_game_source\x18\x19\x20\x01(\x08R\x0cisGameSource\x12\"\n\ris_p\
    sn_source\x18\x1a\x20\x01(\x08R\x0bisPsnSource\x122\n\rplatform_type\x18\
    \x1b\x20\x01(\x0e2\r.PlatformTypeR\x0cplatformType\x12\x1c\n\nis_in_duel\
    \x18\x1c\x20\x01(\x08R\x08isInDuel\x12,\n\x12is_duel_observable\x18\x1d\
    \x20\x01(\x08R\x10isDuelObservableB\x1b\n\x19emu.grasscutter.net.protob\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::FriendOnlineState::file_descriptor().clone());
            deps.push(super::SocialShowAvatarInfo::file_descriptor().clone());
            deps.push(super::FriendEnterHomeOption::file_descriptor().clone());
            deps.push(super::ProfilePicture::file_descriptor().clone());
            deps.push(super::PlatformType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FriendBrief::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
