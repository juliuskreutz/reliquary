// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `TowerAllDataRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:TowerAllDataRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TowerAllDataRsp {
    // message fields
    // @@protoc_insertion_point(field:TowerAllDataRsp.tower_schedule_id)
    pub tower_schedule_id: u32,
    // @@protoc_insertion_point(field:TowerAllDataRsp.is_finished_entrance_floor)
    pub is_finished_entrance_floor: bool,
    // @@protoc_insertion_point(field:TowerAllDataRsp.valid_floor_record_list)
    pub valid_floor_record_list: u32,
    // @@protoc_insertion_point(field:TowerAllDataRsp.cur_level_record)
    pub cur_level_record: ::protobuf::MessageField<super::TowerCurLevelRecord::TowerCurLevelRecord>,
    // @@protoc_insertion_point(field:TowerAllDataRsp.retcode)
    pub retcode: i32,
    // @@protoc_insertion_point(field:TowerAllDataRsp.skip_floor_granted_reward_item_map)
    pub skip_floor_granted_reward_item_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:TowerAllDataRsp.is_first_interact)
    pub is_first_interact: bool,
    // @@protoc_insertion_point(field:TowerAllDataRsp.NNIGLOKAEAI)
    pub NNIGLOKAEAI: u32,
    // @@protoc_insertion_point(field:TowerAllDataRsp.floor_open_time_map)
    pub floor_open_time_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:TowerAllDataRsp.ANOHIMHLMID)
    pub ANOHIMHLMID: u32,
    // @@protoc_insertion_point(field:TowerAllDataRsp.MICBOPDAEFN)
    pub MICBOPDAEFN: u32,
    // @@protoc_insertion_point(field:TowerAllDataRsp.next_schedule_change_time)
    pub next_schedule_change_time: u32,
    // @@protoc_insertion_point(field:TowerAllDataRsp.monthly_brief)
    pub monthly_brief: ::protobuf::MessageField<super::TowerMonthlyBrief::TowerMonthlyBrief>,
    // @@protoc_insertion_point(field:TowerAllDataRsp.tower_floor_record_list)
    pub tower_floor_record_list: ::std::vec::Vec<super::TowerFloorRecord::TowerFloorRecord>,
    // @@protoc_insertion_point(field:TowerAllDataRsp.LKDMPGCGDCJ)
    pub LKDMPGCGDCJ: u32,
    // @@protoc_insertion_point(field:TowerAllDataRsp.schedule_start_time)
    pub schedule_start_time: u32,
    // @@protoc_insertion_point(field:TowerAllDataRsp.last_schedule_monthly_brief)
    pub last_schedule_monthly_brief: ::protobuf::MessageField<super::TowerMonthlyBrief::TowerMonthlyBrief>,
    // special fields
    // @@protoc_insertion_point(special_field:TowerAllDataRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TowerAllDataRsp {
    fn default() -> &'a TowerAllDataRsp {
        <TowerAllDataRsp as ::protobuf::Message>::default_instance()
    }
}

impl TowerAllDataRsp {
    pub fn new() -> TowerAllDataRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(17);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tower_schedule_id",
            |m: &TowerAllDataRsp| { &m.tower_schedule_id },
            |m: &mut TowerAllDataRsp| { &mut m.tower_schedule_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_finished_entrance_floor",
            |m: &TowerAllDataRsp| { &m.is_finished_entrance_floor },
            |m: &mut TowerAllDataRsp| { &mut m.is_finished_entrance_floor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "valid_floor_record_list",
            |m: &TowerAllDataRsp| { &m.valid_floor_record_list },
            |m: &mut TowerAllDataRsp| { &mut m.valid_floor_record_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::TowerCurLevelRecord::TowerCurLevelRecord>(
            "cur_level_record",
            |m: &TowerAllDataRsp| { &m.cur_level_record },
            |m: &mut TowerAllDataRsp| { &mut m.cur_level_record },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &TowerAllDataRsp| { &m.retcode },
            |m: &mut TowerAllDataRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "skip_floor_granted_reward_item_map",
            |m: &TowerAllDataRsp| { &m.skip_floor_granted_reward_item_map },
            |m: &mut TowerAllDataRsp| { &mut m.skip_floor_granted_reward_item_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_first_interact",
            |m: &TowerAllDataRsp| { &m.is_first_interact },
            |m: &mut TowerAllDataRsp| { &mut m.is_first_interact },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NNIGLOKAEAI",
            |m: &TowerAllDataRsp| { &m.NNIGLOKAEAI },
            |m: &mut TowerAllDataRsp| { &mut m.NNIGLOKAEAI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "floor_open_time_map",
            |m: &TowerAllDataRsp| { &m.floor_open_time_map },
            |m: &mut TowerAllDataRsp| { &mut m.floor_open_time_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ANOHIMHLMID",
            |m: &TowerAllDataRsp| { &m.ANOHIMHLMID },
            |m: &mut TowerAllDataRsp| { &mut m.ANOHIMHLMID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MICBOPDAEFN",
            |m: &TowerAllDataRsp| { &m.MICBOPDAEFN },
            |m: &mut TowerAllDataRsp| { &mut m.MICBOPDAEFN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next_schedule_change_time",
            |m: &TowerAllDataRsp| { &m.next_schedule_change_time },
            |m: &mut TowerAllDataRsp| { &mut m.next_schedule_change_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::TowerMonthlyBrief::TowerMonthlyBrief>(
            "monthly_brief",
            |m: &TowerAllDataRsp| { &m.monthly_brief },
            |m: &mut TowerAllDataRsp| { &mut m.monthly_brief },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tower_floor_record_list",
            |m: &TowerAllDataRsp| { &m.tower_floor_record_list },
            |m: &mut TowerAllDataRsp| { &mut m.tower_floor_record_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LKDMPGCGDCJ",
            |m: &TowerAllDataRsp| { &m.LKDMPGCGDCJ },
            |m: &mut TowerAllDataRsp| { &mut m.LKDMPGCGDCJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_start_time",
            |m: &TowerAllDataRsp| { &m.schedule_start_time },
            |m: &mut TowerAllDataRsp| { &mut m.schedule_start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::TowerMonthlyBrief::TowerMonthlyBrief>(
            "last_schedule_monthly_brief",
            |m: &TowerAllDataRsp| { &m.last_schedule_monthly_brief },
            |m: &mut TowerAllDataRsp| { &mut m.last_schedule_monthly_brief },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TowerAllDataRsp>(
            "TowerAllDataRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TowerAllDataRsp {
    const NAME: &'static str = "TowerAllDataRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.tower_schedule_id = is.read_uint32()?;
                },
                16 => {
                    self.is_finished_entrance_floor = is.read_bool()?;
                },
                24 => {
                    self.valid_floor_record_list = is.read_uint32()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cur_level_record)?;
                },
                40 => {
                    self.retcode = is.read_int32()?;
                },
                50 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.skip_floor_granted_reward_item_map.insert(key, value);
                },
                56 => {
                    self.is_first_interact = is.read_bool()?;
                },
                64 => {
                    self.NNIGLOKAEAI = is.read_uint32()?;
                },
                74 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.floor_open_time_map.insert(key, value);
                },
                80 => {
                    self.ANOHIMHLMID = is.read_uint32()?;
                },
                88 => {
                    self.MICBOPDAEFN = is.read_uint32()?;
                },
                96 => {
                    self.next_schedule_change_time = is.read_uint32()?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.monthly_brief)?;
                },
                114 => {
                    self.tower_floor_record_list.push(is.read_message()?);
                },
                120 => {
                    self.LKDMPGCGDCJ = is.read_uint32()?;
                },
                7536 => {
                    self.schedule_start_time = is.read_uint32()?;
                },
                13922 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_schedule_monthly_brief)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.tower_schedule_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.tower_schedule_id);
        }
        if self.is_finished_entrance_floor != false {
            my_size += 1 + 1;
        }
        if self.valid_floor_record_list != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.valid_floor_record_list);
        }
        if let Some(v) = self.cur_level_record.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.retcode);
        }
        for (k, v) in &self.skip_floor_granted_reward_item_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.is_first_interact != false {
            my_size += 1 + 1;
        }
        if self.NNIGLOKAEAI != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.NNIGLOKAEAI);
        }
        for (k, v) in &self.floor_open_time_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.ANOHIMHLMID != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.ANOHIMHLMID);
        }
        if self.MICBOPDAEFN != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.MICBOPDAEFN);
        }
        if self.next_schedule_change_time != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.next_schedule_change_time);
        }
        if let Some(v) = self.monthly_brief.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.tower_floor_record_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.LKDMPGCGDCJ != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.LKDMPGCGDCJ);
        }
        if self.schedule_start_time != 0 {
            my_size += ::protobuf::rt::uint32_size(942, self.schedule_start_time);
        }
        if let Some(v) = self.last_schedule_monthly_brief.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.tower_schedule_id != 0 {
            os.write_uint32(1, self.tower_schedule_id)?;
        }
        if self.is_finished_entrance_floor != false {
            os.write_bool(2, self.is_finished_entrance_floor)?;
        }
        if self.valid_floor_record_list != 0 {
            os.write_uint32(3, self.valid_floor_record_list)?;
        }
        if let Some(v) = self.cur_level_record.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.retcode != 0 {
            os.write_int32(5, self.retcode)?;
        }
        for (k, v) in &self.skip_floor_granted_reward_item_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(50)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if self.is_first_interact != false {
            os.write_bool(7, self.is_first_interact)?;
        }
        if self.NNIGLOKAEAI != 0 {
            os.write_uint32(8, self.NNIGLOKAEAI)?;
        }
        for (k, v) in &self.floor_open_time_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(74)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if self.ANOHIMHLMID != 0 {
            os.write_uint32(10, self.ANOHIMHLMID)?;
        }
        if self.MICBOPDAEFN != 0 {
            os.write_uint32(11, self.MICBOPDAEFN)?;
        }
        if self.next_schedule_change_time != 0 {
            os.write_uint32(12, self.next_schedule_change_time)?;
        }
        if let Some(v) = self.monthly_brief.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        for v in &self.tower_floor_record_list {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        if self.LKDMPGCGDCJ != 0 {
            os.write_uint32(15, self.LKDMPGCGDCJ)?;
        }
        if self.schedule_start_time != 0 {
            os.write_uint32(942, self.schedule_start_time)?;
        }
        if let Some(v) = self.last_schedule_monthly_brief.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1740, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TowerAllDataRsp {
        TowerAllDataRsp::new()
    }

    fn clear(&mut self) {
        self.tower_schedule_id = 0;
        self.is_finished_entrance_floor = false;
        self.valid_floor_record_list = 0;
        self.cur_level_record.clear();
        self.retcode = 0;
        self.skip_floor_granted_reward_item_map.clear();
        self.is_first_interact = false;
        self.NNIGLOKAEAI = 0;
        self.floor_open_time_map.clear();
        self.ANOHIMHLMID = 0;
        self.MICBOPDAEFN = 0;
        self.next_schedule_change_time = 0;
        self.monthly_brief.clear();
        self.tower_floor_record_list.clear();
        self.LKDMPGCGDCJ = 0;
        self.schedule_start_time = 0;
        self.last_schedule_monthly_brief.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TowerAllDataRsp {
        static instance: ::protobuf::rt::Lazy<TowerAllDataRsp> = ::protobuf::rt::Lazy::new();
        instance.get(TowerAllDataRsp::new)
    }
}

impl ::protobuf::MessageFull for TowerAllDataRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TowerAllDataRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TowerAllDataRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TowerAllDataRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15TowerAllDataRsp.proto\x1a\x19TowerCurLevelRecord.proto\x1a\x16Towe\
    rFloorRecord.proto\x1a\x17TowerMonthlyBrief.proto\"\xf0\x08\n\x0fTowerAl\
    lDataRsp\x12*\n\x11tower_schedule_id\x18\x01\x20\x01(\rR\x0ftowerSchedul\
    eId\x12;\n\x1ais_finished_entrance_floor\x18\x02\x20\x01(\x08R\x17isFini\
    shedEntranceFloor\x125\n\x17valid_floor_record_list\x18\x03\x20\x01(\rR\
    \x14validFloorRecordList\x12>\n\x10cur_level_record\x18\x04\x20\x01(\x0b\
    2\x14.TowerCurLevelRecordR\x0ecurLevelRecord\x12\x18\n\x07retcode\x18\
    \x05\x20\x01(\x05R\x07retcode\x12~\n\"skip_floor_granted_reward_item_map\
    \x18\x06\x20\x03(\x0b23.TowerAllDataRsp.SkipFloorGrantedRewardItemMapEnt\
    ryR\x1dskipFloorGrantedRewardItemMap\x12*\n\x11is_first_interact\x18\x07\
    \x20\x01(\x08R\x0fisFirstInteract\x12\x20\n\x0bNNIGLOKAEAI\x18\x08\x20\
    \x01(\rR\x0bNNIGLOKAEAI\x12U\n\x13floor_open_time_map\x18\t\x20\x03(\x0b\
    2&.TowerAllDataRsp.FloorOpenTimeMapEntryR\x10floorOpenTimeMap\x12\x20\n\
    \x0bANOHIMHLMID\x18\n\x20\x01(\rR\x0bANOHIMHLMID\x12\x20\n\x0bMICBOPDAEF\
    N\x18\x0b\x20\x01(\rR\x0bMICBOPDAEFN\x129\n\x19next_schedule_change_time\
    \x18\x0c\x20\x01(\rR\x16nextScheduleChangeTime\x127\n\rmonthly_brief\x18\
    \r\x20\x01(\x0b2\x12.TowerMonthlyBriefR\x0cmonthlyBrief\x12H\n\x17tower_\
    floor_record_list\x18\x0e\x20\x03(\x0b2\x11.TowerFloorRecordR\x14towerFl\
    oorRecordList\x12\x20\n\x0bLKDMPGCGDCJ\x18\x0f\x20\x01(\rR\x0bLKDMPGCGDC\
    J\x12/\n\x13schedule_start_time\x18\xae\x07\x20\x01(\rR\x11scheduleStart\
    Time\x12R\n\x1blast_schedule_monthly_brief\x18\xcc\r\x20\x01(\x0b2\x12.T\
    owerMonthlyBriefR\x18lastScheduleMonthlyBrief\x1aP\n\"SkipFloorGrantedRe\
    wardItemMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01\x1aC\n\x15FloorOpenTime\
    MapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\rR\x05value:\x028\x01B\x1b\n\x19emu.grasscutter.net.pr\
    otob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::TowerCurLevelRecord::file_descriptor().clone());
            deps.push(super::TowerFloorRecord::file_descriptor().clone());
            deps.push(super::TowerMonthlyBrief::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(TowerAllDataRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
