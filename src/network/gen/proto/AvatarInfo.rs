// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AvatarInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AvatarInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AvatarInfo {
    // message fields
    // @@protoc_insertion_point(field:AvatarInfo.avatar_id)
    pub avatar_id: u32,
    // @@protoc_insertion_point(field:AvatarInfo.guid)
    pub guid: u64,
    // @@protoc_insertion_point(field:AvatarInfo.prop_map)
    pub prop_map: ::std::collections::HashMap<u32, super::PropValue::PropValue>,
    // @@protoc_insertion_point(field:AvatarInfo.life_state)
    pub life_state: u32,
    // @@protoc_insertion_point(field:AvatarInfo.equip_guid_list)
    pub equip_guid_list: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:AvatarInfo.talent_id_list)
    pub talent_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:AvatarInfo.fight_prop_map)
    pub fight_prop_map: ::std::collections::HashMap<u32, f32>,
    // @@protoc_insertion_point(field:AvatarInfo.trial_avatar_info)
    pub trial_avatar_info: ::protobuf::MessageField<super::TrialAvatarInfo::TrialAvatarInfo>,
    // @@protoc_insertion_point(field:AvatarInfo.skill_map)
    pub skill_map: ::std::collections::HashMap<u32, super::AvatarSkillInfo::AvatarSkillInfo>,
    // @@protoc_insertion_point(field:AvatarInfo.skill_depot_id)
    pub skill_depot_id: u32,
    // @@protoc_insertion_point(field:AvatarInfo.fetter_info)
    pub fetter_info: ::protobuf::MessageField<super::AvatarFetterInfo::AvatarFetterInfo>,
    // @@protoc_insertion_point(field:AvatarInfo.core_proud_skill_level)
    pub core_proud_skill_level: u32,
    // @@protoc_insertion_point(field:AvatarInfo.inherent_proud_skill_list)
    pub inherent_proud_skill_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:AvatarInfo.skill_level_map)
    pub skill_level_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:AvatarInfo.expedition_state)
    pub expedition_state: ::protobuf::EnumOrUnknown<super::AvatarExpeditionState::AvatarExpeditionState>,
    // @@protoc_insertion_point(field:AvatarInfo.proud_skill_extra_level_map)
    pub proud_skill_extra_level_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:AvatarInfo.is_focus)
    pub is_focus: bool,
    // @@protoc_insertion_point(field:AvatarInfo.avatar_type)
    pub avatar_type: u32,
    // @@protoc_insertion_point(field:AvatarInfo.team_resonance_list)
    pub team_resonance_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:AvatarInfo.wearing_flycloak_id)
    pub wearing_flycloak_id: u32,
    // @@protoc_insertion_point(field:AvatarInfo.equip_affix_list)
    pub equip_affix_list: ::std::vec::Vec<super::AvatarEquipAffixInfo::AvatarEquipAffixInfo>,
    // @@protoc_insertion_point(field:AvatarInfo.born_time)
    pub born_time: u32,
    // @@protoc_insertion_point(field:AvatarInfo.pending_promote_reward_list)
    pub pending_promote_reward_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:AvatarInfo.costume_id)
    pub costume_id: u32,
    // @@protoc_insertion_point(field:AvatarInfo.excel_info)
    pub excel_info: ::protobuf::MessageField<super::AvatarExcelInfo::AvatarExcelInfo>,
    // @@protoc_insertion_point(field:AvatarInfo.anim_hash)
    pub anim_hash: u32,
    // @@protoc_insertion_point(field:AvatarInfo.GJFKDCJENJE)
    pub GJFKDCJENJE: u32,
    // special fields
    // @@protoc_insertion_point(special_field:AvatarInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AvatarInfo {
    fn default() -> &'a AvatarInfo {
        <AvatarInfo as ::protobuf::Message>::default_instance()
    }
}

impl AvatarInfo {
    pub fn new() -> AvatarInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(27);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_id",
            |m: &AvatarInfo| { &m.avatar_id },
            |m: &mut AvatarInfo| { &mut m.avatar_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "guid",
            |m: &AvatarInfo| { &m.guid },
            |m: &mut AvatarInfo| { &mut m.guid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "prop_map",
            |m: &AvatarInfo| { &m.prop_map },
            |m: &mut AvatarInfo| { &mut m.prop_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "life_state",
            |m: &AvatarInfo| { &m.life_state },
            |m: &mut AvatarInfo| { &mut m.life_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "equip_guid_list",
            |m: &AvatarInfo| { &m.equip_guid_list },
            |m: &mut AvatarInfo| { &mut m.equip_guid_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "talent_id_list",
            |m: &AvatarInfo| { &m.talent_id_list },
            |m: &mut AvatarInfo| { &mut m.talent_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "fight_prop_map",
            |m: &AvatarInfo| { &m.fight_prop_map },
            |m: &mut AvatarInfo| { &mut m.fight_prop_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::TrialAvatarInfo::TrialAvatarInfo>(
            "trial_avatar_info",
            |m: &AvatarInfo| { &m.trial_avatar_info },
            |m: &mut AvatarInfo| { &mut m.trial_avatar_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "skill_map",
            |m: &AvatarInfo| { &m.skill_map },
            |m: &mut AvatarInfo| { &mut m.skill_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "skill_depot_id",
            |m: &AvatarInfo| { &m.skill_depot_id },
            |m: &mut AvatarInfo| { &mut m.skill_depot_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AvatarFetterInfo::AvatarFetterInfo>(
            "fetter_info",
            |m: &AvatarInfo| { &m.fetter_info },
            |m: &mut AvatarInfo| { &mut m.fetter_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "core_proud_skill_level",
            |m: &AvatarInfo| { &m.core_proud_skill_level },
            |m: &mut AvatarInfo| { &mut m.core_proud_skill_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "inherent_proud_skill_list",
            |m: &AvatarInfo| { &m.inherent_proud_skill_list },
            |m: &mut AvatarInfo| { &mut m.inherent_proud_skill_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "skill_level_map",
            |m: &AvatarInfo| { &m.skill_level_map },
            |m: &mut AvatarInfo| { &mut m.skill_level_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expedition_state",
            |m: &AvatarInfo| { &m.expedition_state },
            |m: &mut AvatarInfo| { &mut m.expedition_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "proud_skill_extra_level_map",
            |m: &AvatarInfo| { &m.proud_skill_extra_level_map },
            |m: &mut AvatarInfo| { &mut m.proud_skill_extra_level_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_focus",
            |m: &AvatarInfo| { &m.is_focus },
            |m: &mut AvatarInfo| { &mut m.is_focus },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_type",
            |m: &AvatarInfo| { &m.avatar_type },
            |m: &mut AvatarInfo| { &mut m.avatar_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "team_resonance_list",
            |m: &AvatarInfo| { &m.team_resonance_list },
            |m: &mut AvatarInfo| { &mut m.team_resonance_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wearing_flycloak_id",
            |m: &AvatarInfo| { &m.wearing_flycloak_id },
            |m: &mut AvatarInfo| { &mut m.wearing_flycloak_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "equip_affix_list",
            |m: &AvatarInfo| { &m.equip_affix_list },
            |m: &mut AvatarInfo| { &mut m.equip_affix_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "born_time",
            |m: &AvatarInfo| { &m.born_time },
            |m: &mut AvatarInfo| { &mut m.born_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pending_promote_reward_list",
            |m: &AvatarInfo| { &m.pending_promote_reward_list },
            |m: &mut AvatarInfo| { &mut m.pending_promote_reward_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "costume_id",
            |m: &AvatarInfo| { &m.costume_id },
            |m: &mut AvatarInfo| { &mut m.costume_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AvatarExcelInfo::AvatarExcelInfo>(
            "excel_info",
            |m: &AvatarInfo| { &m.excel_info },
            |m: &mut AvatarInfo| { &mut m.excel_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "anim_hash",
            |m: &AvatarInfo| { &m.anim_hash },
            |m: &mut AvatarInfo| { &mut m.anim_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GJFKDCJENJE",
            |m: &AvatarInfo| { &m.GJFKDCJENJE },
            |m: &mut AvatarInfo| { &mut m.GJFKDCJENJE },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AvatarInfo>(
            "AvatarInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AvatarInfo {
    const NAME: &'static str = "AvatarInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.avatar_id = is.read_uint32()?;
                },
                16 => {
                    self.guid = is.read_uint64()?;
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.prop_map.insert(key, value);
                },
                32 => {
                    self.life_state = is.read_uint32()?;
                },
                42 => {
                    is.read_repeated_packed_uint64_into(&mut self.equip_guid_list)?;
                },
                40 => {
                    self.equip_guid_list.push(is.read_uint64()?);
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.talent_id_list)?;
                },
                48 => {
                    self.talent_id_list.push(is.read_uint32()?);
                },
                58 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            21 => value = is.read_float()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.fight_prop_map.insert(key, value);
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.trial_avatar_info)?;
                },
                82 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.skill_map.insert(key, value);
                },
                88 => {
                    self.skill_depot_id = is.read_uint32()?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.fetter_info)?;
                },
                104 => {
                    self.core_proud_skill_level = is.read_uint32()?;
                },
                114 => {
                    is.read_repeated_packed_uint32_into(&mut self.inherent_proud_skill_list)?;
                },
                112 => {
                    self.inherent_proud_skill_list.push(is.read_uint32()?);
                },
                122 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.skill_level_map.insert(key, value);
                },
                128 => {
                    self.expedition_state = is.read_enum_or_unknown()?;
                },
                138 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.proud_skill_extra_level_map.insert(key, value);
                },
                144 => {
                    self.is_focus = is.read_bool()?;
                },
                152 => {
                    self.avatar_type = is.read_uint32()?;
                },
                162 => {
                    is.read_repeated_packed_uint32_into(&mut self.team_resonance_list)?;
                },
                160 => {
                    self.team_resonance_list.push(is.read_uint32()?);
                },
                168 => {
                    self.wearing_flycloak_id = is.read_uint32()?;
                },
                178 => {
                    self.equip_affix_list.push(is.read_message()?);
                },
                184 => {
                    self.born_time = is.read_uint32()?;
                },
                194 => {
                    is.read_repeated_packed_uint32_into(&mut self.pending_promote_reward_list)?;
                },
                192 => {
                    self.pending_promote_reward_list.push(is.read_uint32()?);
                },
                200 => {
                    self.costume_id = is.read_uint32()?;
                },
                210 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.excel_info)?;
                },
                216 => {
                    self.anim_hash = is.read_uint32()?;
                },
                232 => {
                    self.GJFKDCJENJE = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.avatar_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.avatar_id);
        }
        if self.guid != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.guid);
        }
        for (k, v) in &self.prop_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.life_state != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.life_state);
        }
        for value in &self.equip_guid_list {
            my_size += ::protobuf::rt::uint64_size(5, *value);
        };
        for value in &self.talent_id_list {
            my_size += ::protobuf::rt::uint32_size(6, *value);
        };
        for (k, v) in &self.fight_prop_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += 1 + 4;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.trial_avatar_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.skill_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.skill_depot_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.skill_depot_id);
        }
        if let Some(v) = self.fetter_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.core_proud_skill_level != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.core_proud_skill_level);
        }
        for value in &self.inherent_proud_skill_list {
            my_size += ::protobuf::rt::uint32_size(14, *value);
        };
        for (k, v) in &self.skill_level_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.expedition_state != ::protobuf::EnumOrUnknown::new(super::AvatarExpeditionState::AvatarExpeditionState::AVATAR_EXPEDITION_NONE) {
            my_size += ::protobuf::rt::int32_size(16, self.expedition_state.value());
        }
        for (k, v) in &self.proud_skill_extra_level_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.is_focus != false {
            my_size += 2 + 1;
        }
        if self.avatar_type != 0 {
            my_size += ::protobuf::rt::uint32_size(19, self.avatar_type);
        }
        for value in &self.team_resonance_list {
            my_size += ::protobuf::rt::uint32_size(20, *value);
        };
        if self.wearing_flycloak_id != 0 {
            my_size += ::protobuf::rt::uint32_size(21, self.wearing_flycloak_id);
        }
        for value in &self.equip_affix_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.born_time != 0 {
            my_size += ::protobuf::rt::uint32_size(23, self.born_time);
        }
        for value in &self.pending_promote_reward_list {
            my_size += ::protobuf::rt::uint32_size(24, *value);
        };
        if self.costume_id != 0 {
            my_size += ::protobuf::rt::uint32_size(25, self.costume_id);
        }
        if let Some(v) = self.excel_info.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.anim_hash != 0 {
            my_size += ::protobuf::rt::uint32_size(27, self.anim_hash);
        }
        if self.GJFKDCJENJE != 0 {
            my_size += ::protobuf::rt::uint32_size(29, self.GJFKDCJENJE);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.avatar_id != 0 {
            os.write_uint32(1, self.avatar_id)?;
        }
        if self.guid != 0 {
            os.write_uint64(2, self.guid)?;
        }
        for (k, v) in &self.prop_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.life_state != 0 {
            os.write_uint32(4, self.life_state)?;
        }
        for v in &self.equip_guid_list {
            os.write_uint64(5, *v)?;
        };
        for v in &self.talent_id_list {
            os.write_uint32(6, *v)?;
        };
        for (k, v) in &self.fight_prop_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += 1 + 4;
            os.write_raw_varint32(58)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_float(2, *v)?;
        };
        if let Some(v) = self.trial_avatar_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        for (k, v) in &self.skill_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(82)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.skill_depot_id != 0 {
            os.write_uint32(11, self.skill_depot_id)?;
        }
        if let Some(v) = self.fetter_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if self.core_proud_skill_level != 0 {
            os.write_uint32(13, self.core_proud_skill_level)?;
        }
        for v in &self.inherent_proud_skill_list {
            os.write_uint32(14, *v)?;
        };
        for (k, v) in &self.skill_level_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(122)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if self.expedition_state != ::protobuf::EnumOrUnknown::new(super::AvatarExpeditionState::AvatarExpeditionState::AVATAR_EXPEDITION_NONE) {
            os.write_enum(16, ::protobuf::EnumOrUnknown::value(&self.expedition_state))?;
        }
        for (k, v) in &self.proud_skill_extra_level_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(138)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if self.is_focus != false {
            os.write_bool(18, self.is_focus)?;
        }
        if self.avatar_type != 0 {
            os.write_uint32(19, self.avatar_type)?;
        }
        for v in &self.team_resonance_list {
            os.write_uint32(20, *v)?;
        };
        if self.wearing_flycloak_id != 0 {
            os.write_uint32(21, self.wearing_flycloak_id)?;
        }
        for v in &self.equip_affix_list {
            ::protobuf::rt::write_message_field_with_cached_size(22, v, os)?;
        };
        if self.born_time != 0 {
            os.write_uint32(23, self.born_time)?;
        }
        for v in &self.pending_promote_reward_list {
            os.write_uint32(24, *v)?;
        };
        if self.costume_id != 0 {
            os.write_uint32(25, self.costume_id)?;
        }
        if let Some(v) = self.excel_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(26, v, os)?;
        }
        if self.anim_hash != 0 {
            os.write_uint32(27, self.anim_hash)?;
        }
        if self.GJFKDCJENJE != 0 {
            os.write_uint32(29, self.GJFKDCJENJE)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AvatarInfo {
        AvatarInfo::new()
    }

    fn clear(&mut self) {
        self.avatar_id = 0;
        self.guid = 0;
        self.prop_map.clear();
        self.life_state = 0;
        self.equip_guid_list.clear();
        self.talent_id_list.clear();
        self.fight_prop_map.clear();
        self.trial_avatar_info.clear();
        self.skill_map.clear();
        self.skill_depot_id = 0;
        self.fetter_info.clear();
        self.core_proud_skill_level = 0;
        self.inherent_proud_skill_list.clear();
        self.skill_level_map.clear();
        self.expedition_state = ::protobuf::EnumOrUnknown::new(super::AvatarExpeditionState::AvatarExpeditionState::AVATAR_EXPEDITION_NONE);
        self.proud_skill_extra_level_map.clear();
        self.is_focus = false;
        self.avatar_type = 0;
        self.team_resonance_list.clear();
        self.wearing_flycloak_id = 0;
        self.equip_affix_list.clear();
        self.born_time = 0;
        self.pending_promote_reward_list.clear();
        self.costume_id = 0;
        self.excel_info.clear();
        self.anim_hash = 0;
        self.GJFKDCJENJE = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AvatarInfo {
        static instance: ::protobuf::rt::Lazy<AvatarInfo> = ::protobuf::rt::Lazy::new();
        instance.get(AvatarInfo::new)
    }
}

impl ::protobuf::MessageFull for AvatarInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AvatarInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AvatarInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AvatarInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10AvatarInfo.proto\x1a\x0fPropValue.proto\x1a\x15TrialAvatarInfo.pro\
    to\x1a\x15AvatarSkillInfo.proto\x1a\x16AvatarFetterInfo.proto\x1a\x1bAva\
    tarExpeditionState.proto\x1a\x1aAvatarEquipAffixInfo.proto\x1a\x15Avatar\
    ExcelInfo.proto\"\x85\r\n\nAvatarInfo\x12\x1b\n\tavatar_id\x18\x01\x20\
    \x01(\rR\x08avatarId\x12\x12\n\x04guid\x18\x02\x20\x01(\x04R\x04guid\x12\
    3\n\x08prop_map\x18\x03\x20\x03(\x0b2\x18.AvatarInfo.PropMapEntryR\x07pr\
    opMap\x12\x1d\n\nlife_state\x18\x04\x20\x01(\rR\tlifeState\x12&\n\x0fequ\
    ip_guid_list\x18\x05\x20\x03(\x04R\requipGuidList\x12$\n\x0etalent_id_li\
    st\x18\x06\x20\x03(\rR\x0ctalentIdList\x12C\n\x0efight_prop_map\x18\x07\
    \x20\x03(\x0b2\x1d.AvatarInfo.FightPropMapEntryR\x0cfightPropMap\x12<\n\
    \x11trial_avatar_info\x18\t\x20\x01(\x0b2\x10.TrialAvatarInfoR\x0ftrialA\
    vatarInfo\x126\n\tskill_map\x18\n\x20\x03(\x0b2\x19.AvatarInfo.SkillMapE\
    ntryR\x08skillMap\x12$\n\x0eskill_depot_id\x18\x0b\x20\x01(\rR\x0cskillD\
    epotId\x122\n\x0bfetter_info\x18\x0c\x20\x01(\x0b2\x11.AvatarFetterInfoR\
    \nfetterInfo\x123\n\x16core_proud_skill_level\x18\r\x20\x01(\rR\x13coreP\
    roudSkillLevel\x129\n\x19inherent_proud_skill_list\x18\x0e\x20\x03(\rR\
    \x16inherentProudSkillList\x12F\n\x0fskill_level_map\x18\x0f\x20\x03(\
    \x0b2\x1e.AvatarInfo.SkillLevelMapEntryR\rskillLevelMap\x12A\n\x10expedi\
    tion_state\x18\x10\x20\x01(\x0e2\x16.AvatarExpeditionStateR\x0fexpeditio\
    nState\x12f\n\x1bproud_skill_extra_level_map\x18\x11\x20\x03(\x0b2(.Avat\
    arInfo.ProudSkillExtraLevelMapEntryR\x17proudSkillExtraLevelMap\x12\x19\
    \n\x08is_focus\x18\x12\x20\x01(\x08R\x07isFocus\x12\x1f\n\x0bavatar_type\
    \x18\x13\x20\x01(\rR\navatarType\x12.\n\x13team_resonance_list\x18\x14\
    \x20\x03(\rR\x11teamResonanceList\x12.\n\x13wearing_flycloak_id\x18\x15\
    \x20\x01(\rR\x11wearingFlycloakId\x12?\n\x10equip_affix_list\x18\x16\x20\
    \x03(\x0b2\x15.AvatarEquipAffixInfoR\x0eequipAffixList\x12\x1b\n\tborn_t\
    ime\x18\x17\x20\x01(\rR\x08bornTime\x12=\n\x1bpending_promote_reward_lis\
    t\x18\x18\x20\x03(\rR\x18pendingPromoteRewardList\x12\x1d\n\ncostume_id\
    \x18\x19\x20\x01(\rR\tcostumeId\x12/\n\nexcel_info\x18\x1a\x20\x01(\x0b2\
    \x10.AvatarExcelInfoR\texcelInfo\x12\x1b\n\tanim_hash\x18\x1b\x20\x01(\r\
    R\x08animHash\x12\x20\n\x0bGJFKDCJENJE\x18\x1d\x20\x01(\rR\x0bGJFKDCJENJ\
    E\x1aF\n\x0cPropMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\
    \x20\n\x05value\x18\x02\x20\x01(\x0b2\n.PropValueR\x05value:\x028\x01\
    \x1a?\n\x11FightPropMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\x02R\x05value:\x028\x01\x1aM\n\rSki\
    llMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12&\n\x05value\
    \x18\x02\x20\x01(\x0b2\x10.AvatarSkillInfoR\x05value:\x028\x01\x1a@\n\
    \x12SkillLevelMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01\x1aJ\n\x1cProudSk\
    illExtraLevelMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01B\x1b\n\x19emu.gra\
    sscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::PropValue::file_descriptor().clone());
            deps.push(super::TrialAvatarInfo::file_descriptor().clone());
            deps.push(super::AvatarSkillInfo::file_descriptor().clone());
            deps.push(super::AvatarFetterInfo::file_descriptor().clone());
            deps.push(super::AvatarExpeditionState::file_descriptor().clone());
            deps.push(super::AvatarEquipAffixInfo::file_descriptor().clone());
            deps.push(super::AvatarExcelInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AvatarInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
