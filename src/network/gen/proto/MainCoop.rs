// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MainCoop.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:MainCoop)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MainCoop {
    // message fields
    // @@protoc_insertion_point(field:MainCoop.self_confidence)
    pub self_confidence: u32,
    // @@protoc_insertion_point(field:MainCoop.status)
    pub status: ::protobuf::EnumOrUnknown<main_coop::Status>,
    // @@protoc_insertion_point(field:MainCoop.save_point_id_list)
    pub save_point_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:MainCoop.id)
    pub id: u32,
    // @@protoc_insertion_point(field:MainCoop.GEHNFJEPCJL)
    pub GEHNFJEPCJL: ::std::collections::HashMap<u32, i32>,
    // @@protoc_insertion_point(field:MainCoop.GDBKBKACDFO)
    pub GDBKBKACDFO: ::std::collections::HashMap<u32, i32>,
    // @@protoc_insertion_point(field:MainCoop.seen_ending_map)
    pub seen_ending_map: ::std::collections::HashMap<u32, u32>,
    // special fields
    // @@protoc_insertion_point(special_field:MainCoop.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MainCoop {
    fn default() -> &'a MainCoop {
        <MainCoop as ::protobuf::Message>::default_instance()
    }
}

impl MainCoop {
    pub fn new() -> MainCoop {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "self_confidence",
            |m: &MainCoop| { &m.self_confidence },
            |m: &mut MainCoop| { &mut m.self_confidence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &MainCoop| { &m.status },
            |m: &mut MainCoop| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "save_point_id_list",
            |m: &MainCoop| { &m.save_point_id_list },
            |m: &mut MainCoop| { &mut m.save_point_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &MainCoop| { &m.id },
            |m: &mut MainCoop| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "GEHNFJEPCJL",
            |m: &MainCoop| { &m.GEHNFJEPCJL },
            |m: &mut MainCoop| { &mut m.GEHNFJEPCJL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "GDBKBKACDFO",
            |m: &MainCoop| { &m.GDBKBKACDFO },
            |m: &mut MainCoop| { &mut m.GDBKBKACDFO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "seen_ending_map",
            |m: &MainCoop| { &m.seen_ending_map },
            |m: &mut MainCoop| { &mut m.seen_ending_map },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MainCoop>(
            "MainCoop",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MainCoop {
    const NAME: &'static str = "MainCoop";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                40 => {
                    self.self_confidence = is.read_uint32()?;
                },
                8 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.save_point_id_list)?;
                },
                72 => {
                    self.save_point_id_list.push(is.read_uint32()?);
                },
                48 => {
                    self.id = is.read_uint32()?;
                },
                98 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_int32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.GEHNFJEPCJL.insert(key, value);
                },
                66 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_int32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.GDBKBKACDFO.insert(key, value);
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.seen_ending_map.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.self_confidence != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.self_confidence);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(main_coop::Status::INVALID) {
            my_size += ::protobuf::rt::int32_size(1, self.status.value());
        }
        for value in &self.save_point_id_list {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.id);
        }
        for (k, v) in &self.GEHNFJEPCJL {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for (k, v) in &self.GDBKBKACDFO {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for (k, v) in &self.seen_ending_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.self_confidence != 0 {
            os.write_uint32(5, self.self_confidence)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(main_coop::Status::INVALID) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        for v in &self.save_point_id_list {
            os.write_uint32(9, *v)?;
        };
        if self.id != 0 {
            os.write_uint32(6, self.id)?;
        }
        for (k, v) in &self.GEHNFJEPCJL {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            os.write_raw_varint32(98)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_int32(2, *v)?;
        };
        for (k, v) in &self.GDBKBKACDFO {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            os.write_raw_varint32(66)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_int32(2, *v)?;
        };
        for (k, v) in &self.seen_ending_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MainCoop {
        MainCoop::new()
    }

    fn clear(&mut self) {
        self.self_confidence = 0;
        self.status = ::protobuf::EnumOrUnknown::new(main_coop::Status::INVALID);
        self.save_point_id_list.clear();
        self.id = 0;
        self.GEHNFJEPCJL.clear();
        self.GDBKBKACDFO.clear();
        self.seen_ending_map.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MainCoop {
        static instance: ::protobuf::rt::Lazy<MainCoop> = ::protobuf::rt::Lazy::new();
        instance.get(MainCoop::new)
    }
}

impl ::protobuf::MessageFull for MainCoop {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MainCoop").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MainCoop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MainCoop {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MainCoop`
pub mod main_coop {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:MainCoop.Status)
    pub enum Status {
        // @@protoc_insertion_point(enum_value:MainCoop.Status.INVALID)
        INVALID = 0,
        // @@protoc_insertion_point(enum_value:MainCoop.Status.RUNNING)
        RUNNING = 1,
        // @@protoc_insertion_point(enum_value:MainCoop.Status.FINISHED)
        FINISHED = 2,
    }

    impl ::protobuf::Enum for Status {
        const NAME: &'static str = "Status";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Status> {
            match value {
                0 => ::std::option::Option::Some(Status::INVALID),
                1 => ::std::option::Option::Some(Status::RUNNING),
                2 => ::std::option::Option::Some(Status::FINISHED),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Status> {
            match str {
                "INVALID" => ::std::option::Option::Some(Status::INVALID),
                "RUNNING" => ::std::option::Option::Some(Status::RUNNING),
                "FINISHED" => ::std::option::Option::Some(Status::FINISHED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Status] = &[
            Status::INVALID,
            Status::RUNNING,
            Status::FINISHED,
        ];
    }

    impl ::protobuf::EnumFull for Status {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("MainCoop.Status").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Status {
        fn default() -> Self {
            Status::INVALID
        }
    }

    impl Status {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Status>("MainCoop.Status")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eMainCoop.proto\"\xd0\x04\n\x08MainCoop\x12'\n\x0fself_confidence\
    \x18\x05\x20\x01(\rR\x0eselfConfidence\x12(\n\x06status\x18\x01\x20\x01(\
    \x0e2\x10.MainCoop.StatusR\x06status\x12+\n\x12save_point_id_list\x18\t\
    \x20\x03(\rR\x0fsavePointIdList\x12\x0e\n\x02id\x18\x06\x20\x01(\rR\x02i\
    d\x12<\n\x0bGEHNFJEPCJL\x18\x0c\x20\x03(\x0b2\x1a.MainCoop.GEHNFJEPCJLEn\
    tryR\x0bGEHNFJEPCJL\x12<\n\x0bGDBKBKACDFO\x18\x08\x20\x03(\x0b2\x1a.Main\
    Coop.GDBKBKACDFOEntryR\x0bGDBKBKACDFO\x12D\n\x0fseen_ending_map\x18\x03\
    \x20\x03(\x0b2\x1c.MainCoop.SeenEndingMapEntryR\rseenEndingMap\x1a>\n\
    \x10GEHNFJEPCJLEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\x14\
    \n\x05value\x18\x02\x20\x01(\x05R\x05value:\x028\x01\x1a>\n\x10GDBKBKACD\
    FOEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\x05R\x05value:\x028\x01\x1a@\n\x12SeenEndingMapEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\x14\n\x05value\x18\x02\
    \x20\x01(\rR\x05value:\x028\x01\"0\n\x06Status\x12\x0b\n\x07INVALID\x10\
    \0\x12\x0b\n\x07RUNNING\x10\x01\x12\x0c\n\x08FINISHED\x10\x02B\x1b\n\x19\
    emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MainCoop::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(main_coop::Status::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
