// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetPlayerTokenRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GetPlayerTokenRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayerTokenRsp {
    // message fields
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.account_uid)
    pub account_uid: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.server_rand_key)
    pub server_rand_key: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.sign)
    pub sign: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.country_code)
    pub country_code: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.security_cmd_buffer)
    pub security_cmd_buffer: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.client_ip_str)
    pub client_ip_str: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.token)
    pub token: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.psn_id)
    pub psn_id: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.platform_type)
    pub platform_type: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.key_id)
    pub key_id: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.PELBMOHDKHJ)
    pub PELBMOHDKHJ: bool,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.ILGBPPMFHIF)
    pub ILGBPPMFHIF: bool,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.secret_key_seed)
    pub secret_key_seed: u64,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.client_version_random_key)
    pub client_version_random_key: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.stop_server)
    pub stop_server: ::protobuf::MessageField<super::StopServerInfo::StopServerInfo>,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.channel_id)
    pub channel_id: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.reg_platform)
    pub reg_platform: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.tag)
    pub tag: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.birthday)
    pub birthday: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.retcode)
    pub retcode: i32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.is_guest)
    pub is_guest: bool,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.finish_collection_id_list)
    pub finish_collection_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.msg)
    pub msg: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.is_proficient_player)
    pub is_proficient_player: bool,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.account_type)
    pub account_type: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.extra_bin_data)
    pub extra_bin_data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.sub_channel_id)
    pub sub_channel_id: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.secret_key)
    pub secret_key: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.blackUidEndTime)
    pub blackUidEndTime: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.KCFIGJAPNIB)
    pub KCFIGJAPNIB: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.cloudClientIp)
    pub cloudClientIp: u32,
    // special fields
    // @@protoc_insertion_point(special_field:GetPlayerTokenRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayerTokenRsp {
    fn default() -> &'a GetPlayerTokenRsp {
        <GetPlayerTokenRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayerTokenRsp {
    pub fn new() -> GetPlayerTokenRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(32);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &GetPlayerTokenRsp| { &m.uid },
            |m: &mut GetPlayerTokenRsp| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "account_uid",
            |m: &GetPlayerTokenRsp| { &m.account_uid },
            |m: &mut GetPlayerTokenRsp| { &mut m.account_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "server_rand_key",
            |m: &GetPlayerTokenRsp| { &m.server_rand_key },
            |m: &mut GetPlayerTokenRsp| { &mut m.server_rand_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sign",
            |m: &GetPlayerTokenRsp| { &m.sign },
            |m: &mut GetPlayerTokenRsp| { &mut m.sign },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "country_code",
            |m: &GetPlayerTokenRsp| { &m.country_code },
            |m: &mut GetPlayerTokenRsp| { &mut m.country_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "security_cmd_buffer",
            |m: &GetPlayerTokenRsp| { &m.security_cmd_buffer },
            |m: &mut GetPlayerTokenRsp| { &mut m.security_cmd_buffer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_ip_str",
            |m: &GetPlayerTokenRsp| { &m.client_ip_str },
            |m: &mut GetPlayerTokenRsp| { &mut m.client_ip_str },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &GetPlayerTokenRsp| { &m.token },
            |m: &mut GetPlayerTokenRsp| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "psn_id",
            |m: &GetPlayerTokenRsp| { &m.psn_id },
            |m: &mut GetPlayerTokenRsp| { &mut m.psn_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "platform_type",
            |m: &GetPlayerTokenRsp| { &m.platform_type },
            |m: &mut GetPlayerTokenRsp| { &mut m.platform_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key_id",
            |m: &GetPlayerTokenRsp| { &m.key_id },
            |m: &mut GetPlayerTokenRsp| { &mut m.key_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PELBMOHDKHJ",
            |m: &GetPlayerTokenRsp| { &m.PELBMOHDKHJ },
            |m: &mut GetPlayerTokenRsp| { &mut m.PELBMOHDKHJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ILGBPPMFHIF",
            |m: &GetPlayerTokenRsp| { &m.ILGBPPMFHIF },
            |m: &mut GetPlayerTokenRsp| { &mut m.ILGBPPMFHIF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "secret_key_seed",
            |m: &GetPlayerTokenRsp| { &m.secret_key_seed },
            |m: &mut GetPlayerTokenRsp| { &mut m.secret_key_seed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_version_random_key",
            |m: &GetPlayerTokenRsp| { &m.client_version_random_key },
            |m: &mut GetPlayerTokenRsp| { &mut m.client_version_random_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::StopServerInfo::StopServerInfo>(
            "stop_server",
            |m: &GetPlayerTokenRsp| { &m.stop_server },
            |m: &mut GetPlayerTokenRsp| { &mut m.stop_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_id",
            |m: &GetPlayerTokenRsp| { &m.channel_id },
            |m: &mut GetPlayerTokenRsp| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reg_platform",
            |m: &GetPlayerTokenRsp| { &m.reg_platform },
            |m: &mut GetPlayerTokenRsp| { &mut m.reg_platform },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tag",
            |m: &GetPlayerTokenRsp| { &m.tag },
            |m: &mut GetPlayerTokenRsp| { &mut m.tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "birthday",
            |m: &GetPlayerTokenRsp| { &m.birthday },
            |m: &mut GetPlayerTokenRsp| { &mut m.birthday },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetPlayerTokenRsp| { &m.retcode },
            |m: &mut GetPlayerTokenRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_guest",
            |m: &GetPlayerTokenRsp| { &m.is_guest },
            |m: &mut GetPlayerTokenRsp| { &mut m.is_guest },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "finish_collection_id_list",
            |m: &GetPlayerTokenRsp| { &m.finish_collection_id_list },
            |m: &mut GetPlayerTokenRsp| { &mut m.finish_collection_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg",
            |m: &GetPlayerTokenRsp| { &m.msg },
            |m: &mut GetPlayerTokenRsp| { &mut m.msg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_proficient_player",
            |m: &GetPlayerTokenRsp| { &m.is_proficient_player },
            |m: &mut GetPlayerTokenRsp| { &mut m.is_proficient_player },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "account_type",
            |m: &GetPlayerTokenRsp| { &m.account_type },
            |m: &mut GetPlayerTokenRsp| { &mut m.account_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "extra_bin_data",
            |m: &GetPlayerTokenRsp| { &m.extra_bin_data },
            |m: &mut GetPlayerTokenRsp| { &mut m.extra_bin_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sub_channel_id",
            |m: &GetPlayerTokenRsp| { &m.sub_channel_id },
            |m: &mut GetPlayerTokenRsp| { &mut m.sub_channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "secret_key",
            |m: &GetPlayerTokenRsp| { &m.secret_key },
            |m: &mut GetPlayerTokenRsp| { &mut m.secret_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "blackUidEndTime",
            |m: &GetPlayerTokenRsp| { &m.blackUidEndTime },
            |m: &mut GetPlayerTokenRsp| { &mut m.blackUidEndTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KCFIGJAPNIB",
            |m: &GetPlayerTokenRsp| { &m.KCFIGJAPNIB },
            |m: &mut GetPlayerTokenRsp| { &mut m.KCFIGJAPNIB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cloudClientIp",
            |m: &GetPlayerTokenRsp| { &m.cloudClientIp },
            |m: &mut GetPlayerTokenRsp| { &mut m.cloudClientIp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPlayerTokenRsp>(
            "GetPlayerTokenRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPlayerTokenRsp {
    const NAME: &'static str = "GetPlayerTokenRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.uid = is.read_uint32()?;
                },
                74 => {
                    self.account_uid = is.read_string()?;
                },
                7282 => {
                    self.server_rand_key = is.read_string()?;
                },
                3314 => {
                    self.sign = is.read_string()?;
                },
                2034 => {
                    self.country_code = is.read_string()?;
                },
                26 => {
                    self.security_cmd_buffer = is.read_bytes()?;
                },
                15602 => {
                    self.client_ip_str = is.read_string()?;
                },
                18 => {
                    self.token = is.read_string()?;
                },
                11218 => {
                    self.psn_id = is.read_string()?;
                },
                112 => {
                    self.platform_type = is.read_uint32()?;
                },
                5760 => {
                    self.key_id = is.read_uint32()?;
                },
                10336 => {
                    self.PELBMOHDKHJ = is.read_bool()?;
                },
                15696 => {
                    self.ILGBPPMFHIF = is.read_bool()?;
                },
                104 => {
                    self.secret_key_seed = is.read_uint64()?;
                },
                5426 => {
                    self.client_version_random_key = is.read_string()?;
                },
                7002 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.stop_server)?;
                },
                2072 => {
                    self.channel_id = is.read_uint32()?;
                },
                9928 => {
                    self.reg_platform = is.read_uint32()?;
                },
                12576 => {
                    self.tag = is.read_uint32()?;
                },
                11498 => {
                    self.birthday = is.read_string()?;
                },
                88 => {
                    self.retcode = is.read_int32()?;
                },
                1688 => {
                    self.is_guest = is.read_bool()?;
                },
                3610 => {
                    is.read_repeated_packed_uint32_into(&mut self.finish_collection_id_list)?;
                },
                3608 => {
                    self.finish_collection_id_list.push(is.read_uint32()?);
                },
                98 => {
                    self.msg = is.read_string()?;
                },
                40 => {
                    self.is_proficient_player = is.read_bool()?;
                },
                12680 => {
                    self.account_type = is.read_uint32()?;
                },
                906 => {
                    self.extra_bin_data = is.read_bytes()?;
                },
                1128 => {
                    self.sub_channel_id = is.read_uint32()?;
                },
                730 => {
                    self.secret_key = is.read_string()?;
                },
                120 => {
                    self.blackUidEndTime = is.read_uint32()?;
                },
                48 => {
                    self.KCFIGJAPNIB = is.read_uint32()?;
                },
                4064 => {
                    self.cloudClientIp = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.uid);
        }
        if !self.account_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.account_uid);
        }
        if !self.server_rand_key.is_empty() {
            my_size += ::protobuf::rt::string_size(910, &self.server_rand_key);
        }
        if !self.sign.is_empty() {
            my_size += ::protobuf::rt::string_size(414, &self.sign);
        }
        if !self.country_code.is_empty() {
            my_size += ::protobuf::rt::string_size(254, &self.country_code);
        }
        if !self.security_cmd_buffer.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.security_cmd_buffer);
        }
        if !self.client_ip_str.is_empty() {
            my_size += ::protobuf::rt::string_size(1950, &self.client_ip_str);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.token);
        }
        if !self.psn_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1402, &self.psn_id);
        }
        if self.platform_type != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.platform_type);
        }
        if self.key_id != 0 {
            my_size += ::protobuf::rt::uint32_size(720, self.key_id);
        }
        if self.PELBMOHDKHJ != false {
            my_size += 2 + 1;
        }
        if self.ILGBPPMFHIF != false {
            my_size += 2 + 1;
        }
        if self.secret_key_seed != 0 {
            my_size += ::protobuf::rt::uint64_size(13, self.secret_key_seed);
        }
        if !self.client_version_random_key.is_empty() {
            my_size += ::protobuf::rt::string_size(678, &self.client_version_random_key);
        }
        if let Some(v) = self.stop_server.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.channel_id != 0 {
            my_size += ::protobuf::rt::uint32_size(259, self.channel_id);
        }
        if self.reg_platform != 0 {
            my_size += ::protobuf::rt::uint32_size(1241, self.reg_platform);
        }
        if self.tag != 0 {
            my_size += ::protobuf::rt::uint32_size(1572, self.tag);
        }
        if !self.birthday.is_empty() {
            my_size += ::protobuf::rt::string_size(1437, &self.birthday);
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::int32_size(11, self.retcode);
        }
        if self.is_guest != false {
            my_size += 2 + 1;
        }
        for value in &self.finish_collection_id_list {
            my_size += ::protobuf::rt::uint32_size(451, *value);
        };
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.msg);
        }
        if self.is_proficient_player != false {
            my_size += 1 + 1;
        }
        if self.account_type != 0 {
            my_size += ::protobuf::rt::uint32_size(1585, self.account_type);
        }
        if !self.extra_bin_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(113, &self.extra_bin_data);
        }
        if self.sub_channel_id != 0 {
            my_size += ::protobuf::rt::uint32_size(141, self.sub_channel_id);
        }
        if !self.secret_key.is_empty() {
            my_size += ::protobuf::rt::string_size(91, &self.secret_key);
        }
        if self.blackUidEndTime != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.blackUidEndTime);
        }
        if self.KCFIGJAPNIB != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.KCFIGJAPNIB);
        }
        if self.cloudClientIp != 0 {
            my_size += ::protobuf::rt::uint32_size(508, self.cloudClientIp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.uid != 0 {
            os.write_uint32(4, self.uid)?;
        }
        if !self.account_uid.is_empty() {
            os.write_string(9, &self.account_uid)?;
        }
        if !self.server_rand_key.is_empty() {
            os.write_string(910, &self.server_rand_key)?;
        }
        if !self.sign.is_empty() {
            os.write_string(414, &self.sign)?;
        }
        if !self.country_code.is_empty() {
            os.write_string(254, &self.country_code)?;
        }
        if !self.security_cmd_buffer.is_empty() {
            os.write_bytes(3, &self.security_cmd_buffer)?;
        }
        if !self.client_ip_str.is_empty() {
            os.write_string(1950, &self.client_ip_str)?;
        }
        if !self.token.is_empty() {
            os.write_string(2, &self.token)?;
        }
        if !self.psn_id.is_empty() {
            os.write_string(1402, &self.psn_id)?;
        }
        if self.platform_type != 0 {
            os.write_uint32(14, self.platform_type)?;
        }
        if self.key_id != 0 {
            os.write_uint32(720, self.key_id)?;
        }
        if self.PELBMOHDKHJ != false {
            os.write_bool(1292, self.PELBMOHDKHJ)?;
        }
        if self.ILGBPPMFHIF != false {
            os.write_bool(1962, self.ILGBPPMFHIF)?;
        }
        if self.secret_key_seed != 0 {
            os.write_uint64(13, self.secret_key_seed)?;
        }
        if !self.client_version_random_key.is_empty() {
            os.write_string(678, &self.client_version_random_key)?;
        }
        if let Some(v) = self.stop_server.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(875, v, os)?;
        }
        if self.channel_id != 0 {
            os.write_uint32(259, self.channel_id)?;
        }
        if self.reg_platform != 0 {
            os.write_uint32(1241, self.reg_platform)?;
        }
        if self.tag != 0 {
            os.write_uint32(1572, self.tag)?;
        }
        if !self.birthday.is_empty() {
            os.write_string(1437, &self.birthday)?;
        }
        if self.retcode != 0 {
            os.write_int32(11, self.retcode)?;
        }
        if self.is_guest != false {
            os.write_bool(211, self.is_guest)?;
        }
        for v in &self.finish_collection_id_list {
            os.write_uint32(451, *v)?;
        };
        if !self.msg.is_empty() {
            os.write_string(12, &self.msg)?;
        }
        if self.is_proficient_player != false {
            os.write_bool(5, self.is_proficient_player)?;
        }
        if self.account_type != 0 {
            os.write_uint32(1585, self.account_type)?;
        }
        if !self.extra_bin_data.is_empty() {
            os.write_bytes(113, &self.extra_bin_data)?;
        }
        if self.sub_channel_id != 0 {
            os.write_uint32(141, self.sub_channel_id)?;
        }
        if !self.secret_key.is_empty() {
            os.write_string(91, &self.secret_key)?;
        }
        if self.blackUidEndTime != 0 {
            os.write_uint32(15, self.blackUidEndTime)?;
        }
        if self.KCFIGJAPNIB != 0 {
            os.write_uint32(6, self.KCFIGJAPNIB)?;
        }
        if self.cloudClientIp != 0 {
            os.write_uint32(508, self.cloudClientIp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayerTokenRsp {
        GetPlayerTokenRsp::new()
    }

    fn clear(&mut self) {
        self.uid = 0;
        self.account_uid.clear();
        self.server_rand_key.clear();
        self.sign.clear();
        self.country_code.clear();
        self.security_cmd_buffer.clear();
        self.client_ip_str.clear();
        self.token.clear();
        self.psn_id.clear();
        self.platform_type = 0;
        self.key_id = 0;
        self.PELBMOHDKHJ = false;
        self.ILGBPPMFHIF = false;
        self.secret_key_seed = 0;
        self.client_version_random_key.clear();
        self.stop_server.clear();
        self.channel_id = 0;
        self.reg_platform = 0;
        self.tag = 0;
        self.birthday.clear();
        self.retcode = 0;
        self.is_guest = false;
        self.finish_collection_id_list.clear();
        self.msg.clear();
        self.is_proficient_player = false;
        self.account_type = 0;
        self.extra_bin_data.clear();
        self.sub_channel_id = 0;
        self.secret_key.clear();
        self.blackUidEndTime = 0;
        self.KCFIGJAPNIB = 0;
        self.cloudClientIp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayerTokenRsp {
        static instance: GetPlayerTokenRsp = GetPlayerTokenRsp {
            uid: 0,
            account_uid: ::std::string::String::new(),
            server_rand_key: ::std::string::String::new(),
            sign: ::std::string::String::new(),
            country_code: ::std::string::String::new(),
            security_cmd_buffer: ::std::vec::Vec::new(),
            client_ip_str: ::std::string::String::new(),
            token: ::std::string::String::new(),
            psn_id: ::std::string::String::new(),
            platform_type: 0,
            key_id: 0,
            PELBMOHDKHJ: false,
            ILGBPPMFHIF: false,
            secret_key_seed: 0,
            client_version_random_key: ::std::string::String::new(),
            stop_server: ::protobuf::MessageField::none(),
            channel_id: 0,
            reg_platform: 0,
            tag: 0,
            birthday: ::std::string::String::new(),
            retcode: 0,
            is_guest: false,
            finish_collection_id_list: ::std::vec::Vec::new(),
            msg: ::std::string::String::new(),
            is_proficient_player: false,
            account_type: 0,
            extra_bin_data: ::std::vec::Vec::new(),
            sub_channel_id: 0,
            secret_key: ::std::string::String::new(),
            blackUidEndTime: 0,
            KCFIGJAPNIB: 0,
            cloudClientIp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPlayerTokenRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPlayerTokenRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPlayerTokenRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPlayerTokenRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17GetPlayerTokenRsp.proto\x1a\x14StopServerInfo.proto\"\xf2\x08\n\
    \x11GetPlayerTokenRsp\x12\x10\n\x03uid\x18\x04\x20\x01(\rR\x03uid\x12\
    \x1f\n\x0baccount_uid\x18\t\x20\x01(\tR\naccountUid\x12'\n\x0fserver_ran\
    d_key\x18\x8e\x07\x20\x01(\tR\rserverRandKey\x12\x13\n\x04sign\x18\x9e\
    \x03\x20\x01(\tR\x04sign\x12\"\n\x0ccountry_code\x18\xfe\x01\x20\x01(\tR\
    \x0bcountryCode\x12.\n\x13security_cmd_buffer\x18\x03\x20\x01(\x0cR\x11s\
    ecurityCmdBuffer\x12#\n\rclient_ip_str\x18\x9e\x0f\x20\x01(\tR\x0bclient\
    IpStr\x12\x14\n\x05token\x18\x02\x20\x01(\tR\x05token\x12\x16\n\x06psn_i\
    d\x18\xfa\n\x20\x01(\tR\x05psnId\x12#\n\rplatform_type\x18\x0e\x20\x01(\
    \rR\x0cplatformType\x12\x16\n\x06key_id\x18\xd0\x05\x20\x01(\rR\x05keyId\
    \x12!\n\x0bPELBMOHDKHJ\x18\x8c\n\x20\x01(\x08R\x0bPELBMOHDKHJ\x12!\n\x0b\
    ILGBPPMFHIF\x18\xaa\x0f\x20\x01(\x08R\x0bILGBPPMFHIF\x12&\n\x0fsecret_ke\
    y_seed\x18\r\x20\x01(\x04R\rsecretKeySeed\x12:\n\x19client_version_rando\
    m_key\x18\xa6\x05\x20\x01(\tR\x16clientVersionRandomKey\x121\n\x0bstop_s\
    erver\x18\xeb\x06\x20\x01(\x0b2\x0f.StopServerInfoR\nstopServer\x12\x1e\
    \n\nchannel_id\x18\x83\x02\x20\x01(\rR\tchannelId\x12\"\n\x0creg_platfor\
    m\x18\xd9\t\x20\x01(\rR\x0bregPlatform\x12\x11\n\x03tag\x18\xa4\x0c\x20\
    \x01(\rR\x03tag\x12\x1b\n\x08birthday\x18\x9d\x0b\x20\x01(\tR\x08birthda\
    y\x12\x18\n\x07retcode\x18\x0b\x20\x01(\x05R\x07retcode\x12\x1a\n\x08is_\
    guest\x18\xd3\x01\x20\x01(\x08R\x07isGuest\x12:\n\x19finish_collection_i\
    d_list\x18\xc3\x03\x20\x03(\rR\x16finishCollectionIdList\x12\x10\n\x03ms\
    g\x18\x0c\x20\x01(\tR\x03msg\x120\n\x14is_proficient_player\x18\x05\x20\
    \x01(\x08R\x12isProficientPlayer\x12\"\n\x0caccount_type\x18\xb1\x0c\x20\
    \x01(\rR\x0baccountType\x12$\n\x0eextra_bin_data\x18q\x20\x01(\x0cR\x0ce\
    xtraBinData\x12%\n\x0esub_channel_id\x18\x8d\x01\x20\x01(\rR\x0csubChann\
    elId\x12\x1d\n\nsecret_key\x18[\x20\x01(\tR\tsecretKey\x12(\n\x0fblackUi\
    dEndTime\x18\x0f\x20\x01(\rR\x0fblackUidEndTime\x12\x20\n\x0bKCFIGJAPNIB\
    \x18\x06\x20\x01(\rR\x0bKCFIGJAPNIB\x12%\n\rcloudClientIp\x18\xfc\x03\
    \x20\x01(\rR\rcloudClientIpB\x1b\n\x19emu.grasscutter.net.protob\x06prot\
    o3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::StopServerInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetPlayerTokenRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
