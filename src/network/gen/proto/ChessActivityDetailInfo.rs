// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChessActivityDetailInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ChessActivityDetailInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChessActivityDetailInfo {
    // message fields
    // @@protoc_insertion_point(field:ChessActivityDetailInfo.OGHIGEJOHCB)
    pub OGHIGEJOHCB: u32,
    // @@protoc_insertion_point(field:ChessActivityDetailInfo.is_teach_dungeon_finished)
    pub is_teach_dungeon_finished: bool,
    // @@protoc_insertion_point(field:ChessActivityDetailInfo.exp)
    pub exp: u32,
    // @@protoc_insertion_point(field:ChessActivityDetailInfo.CNHHFJDFLNK)
    pub CNHHFJDFLNK: u32,
    // @@protoc_insertion_point(field:ChessActivityDetailInfo.is_content_closed)
    pub is_content_closed: bool,
    // @@protoc_insertion_point(field:ChessActivityDetailInfo.finished_map_id_list)
    pub finished_map_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ChessActivityDetailInfo.level)
    pub level: u32,
    // @@protoc_insertion_point(field:ChessActivityDetailInfo.content_close_time)
    pub content_close_time: u32,
    // @@protoc_insertion_point(field:ChessActivityDetailInfo.punish_over_time)
    pub punish_over_time: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ChessActivityDetailInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChessActivityDetailInfo {
    fn default() -> &'a ChessActivityDetailInfo {
        <ChessActivityDetailInfo as ::protobuf::Message>::default_instance()
    }
}

impl ChessActivityDetailInfo {
    pub fn new() -> ChessActivityDetailInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OGHIGEJOHCB",
            |m: &ChessActivityDetailInfo| { &m.OGHIGEJOHCB },
            |m: &mut ChessActivityDetailInfo| { &mut m.OGHIGEJOHCB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_teach_dungeon_finished",
            |m: &ChessActivityDetailInfo| { &m.is_teach_dungeon_finished },
            |m: &mut ChessActivityDetailInfo| { &mut m.is_teach_dungeon_finished },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exp",
            |m: &ChessActivityDetailInfo| { &m.exp },
            |m: &mut ChessActivityDetailInfo| { &mut m.exp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CNHHFJDFLNK",
            |m: &ChessActivityDetailInfo| { &m.CNHHFJDFLNK },
            |m: &mut ChessActivityDetailInfo| { &mut m.CNHHFJDFLNK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_content_closed",
            |m: &ChessActivityDetailInfo| { &m.is_content_closed },
            |m: &mut ChessActivityDetailInfo| { &mut m.is_content_closed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "finished_map_id_list",
            |m: &ChessActivityDetailInfo| { &m.finished_map_id_list },
            |m: &mut ChessActivityDetailInfo| { &mut m.finished_map_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &ChessActivityDetailInfo| { &m.level },
            |m: &mut ChessActivityDetailInfo| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content_close_time",
            |m: &ChessActivityDetailInfo| { &m.content_close_time },
            |m: &mut ChessActivityDetailInfo| { &mut m.content_close_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "punish_over_time",
            |m: &ChessActivityDetailInfo| { &m.punish_over_time },
            |m: &mut ChessActivityDetailInfo| { &mut m.punish_over_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChessActivityDetailInfo>(
            "ChessActivityDetailInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChessActivityDetailInfo {
    const NAME: &'static str = "ChessActivityDetailInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                48 => {
                    self.OGHIGEJOHCB = is.read_uint32()?;
                },
                72 => {
                    self.is_teach_dungeon_finished = is.read_bool()?;
                },
                32 => {
                    self.exp = is.read_uint32()?;
                },
                24 => {
                    self.CNHHFJDFLNK = is.read_uint32()?;
                },
                88 => {
                    self.is_content_closed = is.read_bool()?;
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.finished_map_id_list)?;
                },
                96 => {
                    self.finished_map_id_list.push(is.read_uint32()?);
                },
                40 => {
                    self.level = is.read_uint32()?;
                },
                112 => {
                    self.content_close_time = is.read_uint32()?;
                },
                120 => {
                    self.punish_over_time = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.OGHIGEJOHCB != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.OGHIGEJOHCB);
        }
        if self.is_teach_dungeon_finished != false {
            my_size += 1 + 1;
        }
        if self.exp != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.exp);
        }
        if self.CNHHFJDFLNK != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.CNHHFJDFLNK);
        }
        if self.is_content_closed != false {
            my_size += 1 + 1;
        }
        for value in &self.finished_map_id_list {
            my_size += ::protobuf::rt::uint32_size(12, *value);
        };
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.level);
        }
        if self.content_close_time != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.content_close_time);
        }
        if self.punish_over_time != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.punish_over_time);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.OGHIGEJOHCB != 0 {
            os.write_uint32(6, self.OGHIGEJOHCB)?;
        }
        if self.is_teach_dungeon_finished != false {
            os.write_bool(9, self.is_teach_dungeon_finished)?;
        }
        if self.exp != 0 {
            os.write_uint32(4, self.exp)?;
        }
        if self.CNHHFJDFLNK != 0 {
            os.write_uint32(3, self.CNHHFJDFLNK)?;
        }
        if self.is_content_closed != false {
            os.write_bool(11, self.is_content_closed)?;
        }
        for v in &self.finished_map_id_list {
            os.write_uint32(12, *v)?;
        };
        if self.level != 0 {
            os.write_uint32(5, self.level)?;
        }
        if self.content_close_time != 0 {
            os.write_uint32(14, self.content_close_time)?;
        }
        if self.punish_over_time != 0 {
            os.write_uint32(15, self.punish_over_time)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChessActivityDetailInfo {
        ChessActivityDetailInfo::new()
    }

    fn clear(&mut self) {
        self.OGHIGEJOHCB = 0;
        self.is_teach_dungeon_finished = false;
        self.exp = 0;
        self.CNHHFJDFLNK = 0;
        self.is_content_closed = false;
        self.finished_map_id_list.clear();
        self.level = 0;
        self.content_close_time = 0;
        self.punish_over_time = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChessActivityDetailInfo {
        static instance: ChessActivityDetailInfo = ChessActivityDetailInfo {
            OGHIGEJOHCB: 0,
            is_teach_dungeon_finished: false,
            exp: 0,
            CNHHFJDFLNK: 0,
            is_content_closed: false,
            finished_map_id_list: ::std::vec::Vec::new(),
            level: 0,
            content_close_time: 0,
            punish_over_time: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChessActivityDetailInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChessActivityDetailInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChessActivityDetailInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChessActivityDetailInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dChessActivityDetailInfo.proto\"\xf5\x02\n\x17ChessActivityDetailIn\
    fo\x12\x20\n\x0bOGHIGEJOHCB\x18\x06\x20\x01(\rR\x0bOGHIGEJOHCB\x129\n\
    \x19is_teach_dungeon_finished\x18\t\x20\x01(\x08R\x16isTeachDungeonFinis\
    hed\x12\x10\n\x03exp\x18\x04\x20\x01(\rR\x03exp\x12\x20\n\x0bCNHHFJDFLNK\
    \x18\x03\x20\x01(\rR\x0bCNHHFJDFLNK\x12*\n\x11is_content_closed\x18\x0b\
    \x20\x01(\x08R\x0fisContentClosed\x12/\n\x14finished_map_id_list\x18\x0c\
    \x20\x03(\rR\x11finishedMapIdList\x12\x14\n\x05level\x18\x05\x20\x01(\rR\
    \x05level\x12,\n\x12content_close_time\x18\x0e\x20\x01(\rR\x10contentClo\
    seTime\x12(\n\x10punish_over_time\x18\x0f\x20\x01(\rR\x0epunishOverTimeB\
    \x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ChessActivityDetailInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
