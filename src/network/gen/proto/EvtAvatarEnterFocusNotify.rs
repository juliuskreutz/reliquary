// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EvtAvatarEnterFocusNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:EvtAvatarEnterFocusNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EvtAvatarEnterFocusNotify {
    // message fields
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.focus_forward)
    pub focus_forward: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.forward_type)
    pub forward_type: ::protobuf::EnumOrUnknown<super::ForwardType::ForwardType>,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.CCKKABKJJGP)
    pub CCKKABKJJGP: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.MDMOIMDCOPF)
    pub MDMOIMDCOPF: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.entity_id)
    pub entity_id: u32,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.MCNECDNCLCJ)
    pub MCNECDNCLCJ: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.GMLEBIHPOKD)
    pub GMLEBIHPOKD: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.OGOLKMLFFHE)
    pub OGOLKMLFFHE: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.OEMKCENFMIM)
    pub OEMKCENFMIM: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.DBPHFOKBNCP)
    pub DBPHFOKBNCP: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.PBHFFGHHPMA)
    pub PBHFFGHHPMA: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.EGBLCMOLOMC)
    pub EGBLCMOLOMC: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.NACMCGNGDLN)
    pub NACMCGNGDLN: bool,
    // special fields
    // @@protoc_insertion_point(special_field:EvtAvatarEnterFocusNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EvtAvatarEnterFocusNotify {
    fn default() -> &'a EvtAvatarEnterFocusNotify {
        <EvtAvatarEnterFocusNotify as ::protobuf::Message>::default_instance()
    }
}

impl EvtAvatarEnterFocusNotify {
    pub fn new() -> EvtAvatarEnterFocusNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "focus_forward",
            |m: &EvtAvatarEnterFocusNotify| { &m.focus_forward },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.focus_forward },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "forward_type",
            |m: &EvtAvatarEnterFocusNotify| { &m.forward_type },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.forward_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CCKKABKJJGP",
            |m: &EvtAvatarEnterFocusNotify| { &m.CCKKABKJJGP },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.CCKKABKJJGP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MDMOIMDCOPF",
            |m: &EvtAvatarEnterFocusNotify| { &m.MDMOIMDCOPF },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.MDMOIMDCOPF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity_id",
            |m: &EvtAvatarEnterFocusNotify| { &m.entity_id },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MCNECDNCLCJ",
            |m: &EvtAvatarEnterFocusNotify| { &m.MCNECDNCLCJ },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.MCNECDNCLCJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GMLEBIHPOKD",
            |m: &EvtAvatarEnterFocusNotify| { &m.GMLEBIHPOKD },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.GMLEBIHPOKD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OGOLKMLFFHE",
            |m: &EvtAvatarEnterFocusNotify| { &m.OGOLKMLFFHE },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.OGOLKMLFFHE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OEMKCENFMIM",
            |m: &EvtAvatarEnterFocusNotify| { &m.OEMKCENFMIM },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.OEMKCENFMIM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DBPHFOKBNCP",
            |m: &EvtAvatarEnterFocusNotify| { &m.DBPHFOKBNCP },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.DBPHFOKBNCP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PBHFFGHHPMA",
            |m: &EvtAvatarEnterFocusNotify| { &m.PBHFFGHHPMA },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.PBHFFGHHPMA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EGBLCMOLOMC",
            |m: &EvtAvatarEnterFocusNotify| { &m.EGBLCMOLOMC },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.EGBLCMOLOMC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NACMCGNGDLN",
            |m: &EvtAvatarEnterFocusNotify| { &m.NACMCGNGDLN },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.NACMCGNGDLN },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EvtAvatarEnterFocusNotify>(
            "EvtAvatarEnterFocusNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EvtAvatarEnterFocusNotify {
    const NAME: &'static str = "EvtAvatarEnterFocusNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.focus_forward)?;
                },
                24 => {
                    self.forward_type = is.read_enum_or_unknown()?;
                },
                96 => {
                    self.CCKKABKJJGP = is.read_bool()?;
                },
                56 => {
                    self.MDMOIMDCOPF = is.read_bool()?;
                },
                88 => {
                    self.entity_id = is.read_uint32()?;
                },
                8 => {
                    self.MCNECDNCLCJ = is.read_bool()?;
                },
                40 => {
                    self.GMLEBIHPOKD = is.read_bool()?;
                },
                16 => {
                    self.OGOLKMLFFHE = is.read_bool()?;
                },
                80 => {
                    self.OEMKCENFMIM = is.read_bool()?;
                },
                72 => {
                    self.DBPHFOKBNCP = is.read_bool()?;
                },
                120 => {
                    self.PBHFFGHHPMA = is.read_bool()?;
                },
                64 => {
                    self.EGBLCMOLOMC = is.read_bool()?;
                },
                48 => {
                    self.NACMCGNGDLN = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.focus_forward.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.forward_type != ::protobuf::EnumOrUnknown::new(super::ForwardType::ForwardType::FORWARD_TYPE_LOCAL) {
            my_size += ::protobuf::rt::int32_size(3, self.forward_type.value());
        }
        if self.CCKKABKJJGP != false {
            my_size += 1 + 1;
        }
        if self.MDMOIMDCOPF != false {
            my_size += 1 + 1;
        }
        if self.entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.entity_id);
        }
        if self.MCNECDNCLCJ != false {
            my_size += 1 + 1;
        }
        if self.GMLEBIHPOKD != false {
            my_size += 1 + 1;
        }
        if self.OGOLKMLFFHE != false {
            my_size += 1 + 1;
        }
        if self.OEMKCENFMIM != false {
            my_size += 1 + 1;
        }
        if self.DBPHFOKBNCP != false {
            my_size += 1 + 1;
        }
        if self.PBHFFGHHPMA != false {
            my_size += 1 + 1;
        }
        if self.EGBLCMOLOMC != false {
            my_size += 1 + 1;
        }
        if self.NACMCGNGDLN != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.focus_forward.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if self.forward_type != ::protobuf::EnumOrUnknown::new(super::ForwardType::ForwardType::FORWARD_TYPE_LOCAL) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.forward_type))?;
        }
        if self.CCKKABKJJGP != false {
            os.write_bool(12, self.CCKKABKJJGP)?;
        }
        if self.MDMOIMDCOPF != false {
            os.write_bool(7, self.MDMOIMDCOPF)?;
        }
        if self.entity_id != 0 {
            os.write_uint32(11, self.entity_id)?;
        }
        if self.MCNECDNCLCJ != false {
            os.write_bool(1, self.MCNECDNCLCJ)?;
        }
        if self.GMLEBIHPOKD != false {
            os.write_bool(5, self.GMLEBIHPOKD)?;
        }
        if self.OGOLKMLFFHE != false {
            os.write_bool(2, self.OGOLKMLFFHE)?;
        }
        if self.OEMKCENFMIM != false {
            os.write_bool(10, self.OEMKCENFMIM)?;
        }
        if self.DBPHFOKBNCP != false {
            os.write_bool(9, self.DBPHFOKBNCP)?;
        }
        if self.PBHFFGHHPMA != false {
            os.write_bool(15, self.PBHFFGHHPMA)?;
        }
        if self.EGBLCMOLOMC != false {
            os.write_bool(8, self.EGBLCMOLOMC)?;
        }
        if self.NACMCGNGDLN != false {
            os.write_bool(6, self.NACMCGNGDLN)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EvtAvatarEnterFocusNotify {
        EvtAvatarEnterFocusNotify::new()
    }

    fn clear(&mut self) {
        self.focus_forward.clear();
        self.forward_type = ::protobuf::EnumOrUnknown::new(super::ForwardType::ForwardType::FORWARD_TYPE_LOCAL);
        self.CCKKABKJJGP = false;
        self.MDMOIMDCOPF = false;
        self.entity_id = 0;
        self.MCNECDNCLCJ = false;
        self.GMLEBIHPOKD = false;
        self.OGOLKMLFFHE = false;
        self.OEMKCENFMIM = false;
        self.DBPHFOKBNCP = false;
        self.PBHFFGHHPMA = false;
        self.EGBLCMOLOMC = false;
        self.NACMCGNGDLN = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EvtAvatarEnterFocusNotify {
        static instance: EvtAvatarEnterFocusNotify = EvtAvatarEnterFocusNotify {
            focus_forward: ::protobuf::MessageField::none(),
            forward_type: ::protobuf::EnumOrUnknown::from_i32(0),
            CCKKABKJJGP: false,
            MDMOIMDCOPF: false,
            entity_id: 0,
            MCNECDNCLCJ: false,
            GMLEBIHPOKD: false,
            OGOLKMLFFHE: false,
            OEMKCENFMIM: false,
            DBPHFOKBNCP: false,
            PBHFFGHHPMA: false,
            EGBLCMOLOMC: false,
            NACMCGNGDLN: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EvtAvatarEnterFocusNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EvtAvatarEnterFocusNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EvtAvatarEnterFocusNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvtAvatarEnterFocusNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fEvtAvatarEnterFocusNotify.proto\x1a\x0cVector.proto\x1a\x11Forward\
    Type.proto\"\xeb\x03\n\x19EvtAvatarEnterFocusNotify\x12,\n\rfocus_forwar\
    d\x18\r\x20\x01(\x0b2\x07.VectorR\x0cfocusForward\x12/\n\x0cforward_type\
    \x18\x03\x20\x01(\x0e2\x0c.ForwardTypeR\x0bforwardType\x12\x20\n\x0bCCKK\
    ABKJJGP\x18\x0c\x20\x01(\x08R\x0bCCKKABKJJGP\x12\x20\n\x0bMDMOIMDCOPF\
    \x18\x07\x20\x01(\x08R\x0bMDMOIMDCOPF\x12\x1b\n\tentity_id\x18\x0b\x20\
    \x01(\rR\x08entityId\x12\x20\n\x0bMCNECDNCLCJ\x18\x01\x20\x01(\x08R\x0bM\
    CNECDNCLCJ\x12\x20\n\x0bGMLEBIHPOKD\x18\x05\x20\x01(\x08R\x0bGMLEBIHPOKD\
    \x12\x20\n\x0bOGOLKMLFFHE\x18\x02\x20\x01(\x08R\x0bOGOLKMLFFHE\x12\x20\n\
    \x0bOEMKCENFMIM\x18\n\x20\x01(\x08R\x0bOEMKCENFMIM\x12\x20\n\x0bDBPHFOKB\
    NCP\x18\t\x20\x01(\x08R\x0bDBPHFOKBNCP\x12\x20\n\x0bPBHFFGHHPMA\x18\x0f\
    \x20\x01(\x08R\x0bPBHFFGHHPMA\x12\x20\n\x0bEGBLCMOLOMC\x18\x08\x20\x01(\
    \x08R\x0bEGBLCMOLOMC\x12\x20\n\x0bNACMCGNGDLN\x18\x06\x20\x01(\x08R\x0bN\
    ACMCGNGDLNB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::Vector::file_descriptor().clone());
            deps.push(super::ForwardType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EvtAvatarEnterFocusNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
