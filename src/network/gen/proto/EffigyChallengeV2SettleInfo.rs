// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EffigyChallengeV2SettleInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:EffigyChallengeV2SettleInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EffigyChallengeV2SettleInfo {
    // message fields
    // @@protoc_insertion_point(field:EffigyChallengeV2SettleInfo.CMCCNBNFAJE)
    pub CMCCNBNFAJE: u32,
    // @@protoc_insertion_point(field:EffigyChallengeV2SettleInfo.LFNCGGFLHPL)
    pub LFNCGGFLHPL: bool,
    // @@protoc_insertion_point(field:EffigyChallengeV2SettleInfo.DCAKCNEDDEB)
    pub DCAKCNEDDEB: u32,
    // @@protoc_insertion_point(field:EffigyChallengeV2SettleInfo.challenge_mode_difficulty)
    pub challenge_mode_difficulty: u32,
    // @@protoc_insertion_point(field:EffigyChallengeV2SettleInfo.FOFHONJNIHG)
    pub FOFHONJNIHG: bool,
    // @@protoc_insertion_point(field:EffigyChallengeV2SettleInfo.PHNDBBLLHDI)
    pub PHNDBBLLHDI: u32,
    // special fields
    // @@protoc_insertion_point(special_field:EffigyChallengeV2SettleInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EffigyChallengeV2SettleInfo {
    fn default() -> &'a EffigyChallengeV2SettleInfo {
        <EffigyChallengeV2SettleInfo as ::protobuf::Message>::default_instance()
    }
}

impl EffigyChallengeV2SettleInfo {
    pub fn new() -> EffigyChallengeV2SettleInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CMCCNBNFAJE",
            |m: &EffigyChallengeV2SettleInfo| { &m.CMCCNBNFAJE },
            |m: &mut EffigyChallengeV2SettleInfo| { &mut m.CMCCNBNFAJE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LFNCGGFLHPL",
            |m: &EffigyChallengeV2SettleInfo| { &m.LFNCGGFLHPL },
            |m: &mut EffigyChallengeV2SettleInfo| { &mut m.LFNCGGFLHPL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DCAKCNEDDEB",
            |m: &EffigyChallengeV2SettleInfo| { &m.DCAKCNEDDEB },
            |m: &mut EffigyChallengeV2SettleInfo| { &mut m.DCAKCNEDDEB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "challenge_mode_difficulty",
            |m: &EffigyChallengeV2SettleInfo| { &m.challenge_mode_difficulty },
            |m: &mut EffigyChallengeV2SettleInfo| { &mut m.challenge_mode_difficulty },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FOFHONJNIHG",
            |m: &EffigyChallengeV2SettleInfo| { &m.FOFHONJNIHG },
            |m: &mut EffigyChallengeV2SettleInfo| { &mut m.FOFHONJNIHG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PHNDBBLLHDI",
            |m: &EffigyChallengeV2SettleInfo| { &m.PHNDBBLLHDI },
            |m: &mut EffigyChallengeV2SettleInfo| { &mut m.PHNDBBLLHDI },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EffigyChallengeV2SettleInfo>(
            "EffigyChallengeV2SettleInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EffigyChallengeV2SettleInfo {
    const NAME: &'static str = "EffigyChallengeV2SettleInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                88 => {
                    self.CMCCNBNFAJE = is.read_uint32()?;
                },
                72 => {
                    self.LFNCGGFLHPL = is.read_bool()?;
                },
                96 => {
                    self.DCAKCNEDDEB = is.read_uint32()?;
                },
                24 => {
                    self.challenge_mode_difficulty = is.read_uint32()?;
                },
                32 => {
                    self.FOFHONJNIHG = is.read_bool()?;
                },
                8 => {
                    self.PHNDBBLLHDI = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.CMCCNBNFAJE != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.CMCCNBNFAJE);
        }
        if self.LFNCGGFLHPL != false {
            my_size += 1 + 1;
        }
        if self.DCAKCNEDDEB != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.DCAKCNEDDEB);
        }
        if self.challenge_mode_difficulty != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.challenge_mode_difficulty);
        }
        if self.FOFHONJNIHG != false {
            my_size += 1 + 1;
        }
        if self.PHNDBBLLHDI != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.PHNDBBLLHDI);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.CMCCNBNFAJE != 0 {
            os.write_uint32(11, self.CMCCNBNFAJE)?;
        }
        if self.LFNCGGFLHPL != false {
            os.write_bool(9, self.LFNCGGFLHPL)?;
        }
        if self.DCAKCNEDDEB != 0 {
            os.write_uint32(12, self.DCAKCNEDDEB)?;
        }
        if self.challenge_mode_difficulty != 0 {
            os.write_uint32(3, self.challenge_mode_difficulty)?;
        }
        if self.FOFHONJNIHG != false {
            os.write_bool(4, self.FOFHONJNIHG)?;
        }
        if self.PHNDBBLLHDI != 0 {
            os.write_uint32(1, self.PHNDBBLLHDI)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EffigyChallengeV2SettleInfo {
        EffigyChallengeV2SettleInfo::new()
    }

    fn clear(&mut self) {
        self.CMCCNBNFAJE = 0;
        self.LFNCGGFLHPL = false;
        self.DCAKCNEDDEB = 0;
        self.challenge_mode_difficulty = 0;
        self.FOFHONJNIHG = false;
        self.PHNDBBLLHDI = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EffigyChallengeV2SettleInfo {
        static instance: EffigyChallengeV2SettleInfo = EffigyChallengeV2SettleInfo {
            CMCCNBNFAJE: 0,
            LFNCGGFLHPL: false,
            DCAKCNEDDEB: 0,
            challenge_mode_difficulty: 0,
            FOFHONJNIHG: false,
            PHNDBBLLHDI: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EffigyChallengeV2SettleInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EffigyChallengeV2SettleInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EffigyChallengeV2SettleInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EffigyChallengeV2SettleInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!EffigyChallengeV2SettleInfo.proto\"\x83\x02\n\x1bEffigyChallengeV2Set\
    tleInfo\x12\x20\n\x0bCMCCNBNFAJE\x18\x0b\x20\x01(\rR\x0bCMCCNBNFAJE\x12\
    \x20\n\x0bLFNCGGFLHPL\x18\t\x20\x01(\x08R\x0bLFNCGGFLHPL\x12\x20\n\x0bDC\
    AKCNEDDEB\x18\x0c\x20\x01(\rR\x0bDCAKCNEDDEB\x12:\n\x19challenge_mode_di\
    fficulty\x18\x03\x20\x01(\rR\x17challengeModeDifficulty\x12\x20\n\x0bFOF\
    HONJNIHG\x18\x04\x20\x01(\x08R\x0bFOFHONJNIHG\x12\x20\n\x0bPHNDBBLLHDI\
    \x18\x01\x20\x01(\rR\x0bPHNDBBLLHDIB\x1b\n\x19emu.grasscutter.net.protob\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EffigyChallengeV2SettleInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
