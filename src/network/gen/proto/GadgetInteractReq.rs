// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GadgetInteractReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GadgetInteractReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GadgetInteractReq {
    // message fields
    // @@protoc_insertion_point(field:GadgetInteractReq.op_type)
    pub op_type: ::protobuf::EnumOrUnknown<super::InterOpType::InterOpType>,
    // @@protoc_insertion_point(field:GadgetInteractReq.ui_interact_id)
    pub ui_interact_id: u32,
    // @@protoc_insertion_point(field:GadgetInteractReq.is_use_condense_resin)
    pub is_use_condense_resin: bool,
    // @@protoc_insertion_point(field:GadgetInteractReq.gadget_id)
    pub gadget_id: u32,
    // @@protoc_insertion_point(field:GadgetInteractReq.resin_cost_type)
    pub resin_cost_type: ::protobuf::EnumOrUnknown<super::ResinCostType::ResinCostType>,
    // @@protoc_insertion_point(field:GadgetInteractReq.gadget_entity_id)
    pub gadget_entity_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:GadgetInteractReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GadgetInteractReq {
    fn default() -> &'a GadgetInteractReq {
        <GadgetInteractReq as ::protobuf::Message>::default_instance()
    }
}

impl GadgetInteractReq {
    pub fn new() -> GadgetInteractReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "op_type",
            |m: &GadgetInteractReq| { &m.op_type },
            |m: &mut GadgetInteractReq| { &mut m.op_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ui_interact_id",
            |m: &GadgetInteractReq| { &m.ui_interact_id },
            |m: &mut GadgetInteractReq| { &mut m.ui_interact_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_use_condense_resin",
            |m: &GadgetInteractReq| { &m.is_use_condense_resin },
            |m: &mut GadgetInteractReq| { &mut m.is_use_condense_resin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gadget_id",
            |m: &GadgetInteractReq| { &m.gadget_id },
            |m: &mut GadgetInteractReq| { &mut m.gadget_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "resin_cost_type",
            |m: &GadgetInteractReq| { &m.resin_cost_type },
            |m: &mut GadgetInteractReq| { &mut m.resin_cost_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gadget_entity_id",
            |m: &GadgetInteractReq| { &m.gadget_entity_id },
            |m: &mut GadgetInteractReq| { &mut m.gadget_entity_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GadgetInteractReq>(
            "GadgetInteractReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GadgetInteractReq {
    const NAME: &'static str = "GadgetInteractReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.op_type = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.ui_interact_id = is.read_uint32()?;
                },
                56 => {
                    self.is_use_condense_resin = is.read_bool()?;
                },
                64 => {
                    self.gadget_id = is.read_uint32()?;
                },
                104 => {
                    self.resin_cost_type = is.read_enum_or_unknown()?;
                },
                120 => {
                    self.gadget_entity_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.op_type != ::protobuf::EnumOrUnknown::new(super::InterOpType::InterOpType::INTER_OP_TYPE_FINISH) {
            my_size += ::protobuf::rt::int32_size(1, self.op_type.value());
        }
        if self.ui_interact_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.ui_interact_id);
        }
        if self.is_use_condense_resin != false {
            my_size += 1 + 1;
        }
        if self.gadget_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.gadget_id);
        }
        if self.resin_cost_type != ::protobuf::EnumOrUnknown::new(super::ResinCostType::ResinCostType::RESIN_COST_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(13, self.resin_cost_type.value());
        }
        if self.gadget_entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.gadget_entity_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.op_type != ::protobuf::EnumOrUnknown::new(super::InterOpType::InterOpType::INTER_OP_TYPE_FINISH) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.op_type))?;
        }
        if self.ui_interact_id != 0 {
            os.write_uint32(3, self.ui_interact_id)?;
        }
        if self.is_use_condense_resin != false {
            os.write_bool(7, self.is_use_condense_resin)?;
        }
        if self.gadget_id != 0 {
            os.write_uint32(8, self.gadget_id)?;
        }
        if self.resin_cost_type != ::protobuf::EnumOrUnknown::new(super::ResinCostType::ResinCostType::RESIN_COST_TYPE_NONE) {
            os.write_enum(13, ::protobuf::EnumOrUnknown::value(&self.resin_cost_type))?;
        }
        if self.gadget_entity_id != 0 {
            os.write_uint32(15, self.gadget_entity_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GadgetInteractReq {
        GadgetInteractReq::new()
    }

    fn clear(&mut self) {
        self.op_type = ::protobuf::EnumOrUnknown::new(super::InterOpType::InterOpType::INTER_OP_TYPE_FINISH);
        self.ui_interact_id = 0;
        self.is_use_condense_resin = false;
        self.gadget_id = 0;
        self.resin_cost_type = ::protobuf::EnumOrUnknown::new(super::ResinCostType::ResinCostType::RESIN_COST_TYPE_NONE);
        self.gadget_entity_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GadgetInteractReq {
        static instance: GadgetInteractReq = GadgetInteractReq {
            op_type: ::protobuf::EnumOrUnknown::from_i32(0),
            ui_interact_id: 0,
            is_use_condense_resin: false,
            gadget_id: 0,
            resin_cost_type: ::protobuf::EnumOrUnknown::from_i32(0),
            gadget_entity_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GadgetInteractReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GadgetInteractReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GadgetInteractReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GadgetInteractReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17GadgetInteractReq.proto\x1a\x11InterOpType.proto\x1a\x13ResinCostT\
    ype.proto\"\x92\x02\n\x11GadgetInteractReq\x12%\n\x07op_type\x18\x01\x20\
    \x01(\x0e2\x0c.InterOpTypeR\x06opType\x12$\n\x0eui_interact_id\x18\x03\
    \x20\x01(\rR\x0cuiInteractId\x121\n\x15is_use_condense_resin\x18\x07\x20\
    \x01(\x08R\x12isUseCondenseResin\x12\x1b\n\tgadget_id\x18\x08\x20\x01(\r\
    R\x08gadgetId\x126\n\x0fresin_cost_type\x18\r\x20\x01(\x0e2\x0e.ResinCos\
    tTypeR\rresinCostType\x12(\n\x10gadget_entity_id\x18\x0f\x20\x01(\rR\x0e\
    gadgetEntityIdB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::InterOpType::file_descriptor().clone());
            deps.push(super::ResinCostType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GadgetInteractReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
