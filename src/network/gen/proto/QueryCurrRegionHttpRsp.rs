// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `QueryCurrRegionHttpRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:QueryCurrRegionHttpRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryCurrRegionHttpRsp {
    // message fields
    // @@protoc_insertion_point(field:QueryCurrRegionHttpRsp.retcode)
    pub retcode: i32,
    // @@protoc_insertion_point(field:QueryCurrRegionHttpRsp.msg)
    pub msg: ::std::string::String,
    // @@protoc_insertion_point(field:QueryCurrRegionHttpRsp.region_info)
    pub region_info: ::protobuf::MessageField<super::RegionInfo::RegionInfo>,
    // @@protoc_insertion_point(field:QueryCurrRegionHttpRsp.client_secret_key)
    pub client_secret_key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:QueryCurrRegionHttpRsp.region_custom_config_encrypted)
    pub region_custom_config_encrypted: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:QueryCurrRegionHttpRsp.client_region_custom_config_encrypted)
    pub client_region_custom_config_encrypted: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:QueryCurrRegionHttpRsp.LDOHCJJALDK)
    pub LDOHCJJALDK: ::std::string::String,
    // message oneof groups
    pub detail: ::std::option::Option<query_curr_region_http_rsp::Detail>,
    // special fields
    // @@protoc_insertion_point(special_field:QueryCurrRegionHttpRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryCurrRegionHttpRsp {
    fn default() -> &'a QueryCurrRegionHttpRsp {
        <QueryCurrRegionHttpRsp as ::protobuf::Message>::default_instance()
    }
}

impl QueryCurrRegionHttpRsp {
    pub fn new() -> QueryCurrRegionHttpRsp {
        ::std::default::Default::default()
    }

    // .ForceUpdateInfo force_update = 4;

    pub fn force_update(&self) -> &super::ForceUpdateInfo::ForceUpdateInfo {
        match self.detail {
            ::std::option::Option::Some(query_curr_region_http_rsp::Detail::ForceUpdate(ref v)) => v,
            _ => <super::ForceUpdateInfo::ForceUpdateInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_force_update(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_force_update(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(query_curr_region_http_rsp::Detail::ForceUpdate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_force_update(&mut self, v: super::ForceUpdateInfo::ForceUpdateInfo) {
        self.detail = ::std::option::Option::Some(query_curr_region_http_rsp::Detail::ForceUpdate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_force_update(&mut self) -> &mut super::ForceUpdateInfo::ForceUpdateInfo {
        if let ::std::option::Option::Some(query_curr_region_http_rsp::Detail::ForceUpdate(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(query_curr_region_http_rsp::Detail::ForceUpdate(super::ForceUpdateInfo::ForceUpdateInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(query_curr_region_http_rsp::Detail::ForceUpdate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_force_update(&mut self) -> super::ForceUpdateInfo::ForceUpdateInfo {
        if self.has_force_update() {
            match self.detail.take() {
                ::std::option::Option::Some(query_curr_region_http_rsp::Detail::ForceUpdate(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ForceUpdateInfo::ForceUpdateInfo::new()
        }
    }

    // .StopServerInfo stop_server = 5;

    pub fn stop_server(&self) -> &super::StopServerInfo::StopServerInfo {
        match self.detail {
            ::std::option::Option::Some(query_curr_region_http_rsp::Detail::StopServer(ref v)) => v,
            _ => <super::StopServerInfo::StopServerInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_stop_server(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_stop_server(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(query_curr_region_http_rsp::Detail::StopServer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stop_server(&mut self, v: super::StopServerInfo::StopServerInfo) {
        self.detail = ::std::option::Option::Some(query_curr_region_http_rsp::Detail::StopServer(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stop_server(&mut self) -> &mut super::StopServerInfo::StopServerInfo {
        if let ::std::option::Option::Some(query_curr_region_http_rsp::Detail::StopServer(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(query_curr_region_http_rsp::Detail::StopServer(super::StopServerInfo::StopServerInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(query_curr_region_http_rsp::Detail::StopServer(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stop_server(&mut self) -> super::StopServerInfo::StopServerInfo {
        if self.has_stop_server() {
            match self.detail.take() {
                ::std::option::Option::Some(query_curr_region_http_rsp::Detail::StopServer(v)) => v,
                _ => panic!(),
            }
        } else {
            super::StopServerInfo::StopServerInfo::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &QueryCurrRegionHttpRsp| { &m.retcode },
            |m: &mut QueryCurrRegionHttpRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg",
            |m: &QueryCurrRegionHttpRsp| { &m.msg },
            |m: &mut QueryCurrRegionHttpRsp| { &mut m.msg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RegionInfo::RegionInfo>(
            "region_info",
            |m: &QueryCurrRegionHttpRsp| { &m.region_info },
            |m: &mut QueryCurrRegionHttpRsp| { &mut m.region_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ForceUpdateInfo::ForceUpdateInfo>(
            "force_update",
            QueryCurrRegionHttpRsp::has_force_update,
            QueryCurrRegionHttpRsp::force_update,
            QueryCurrRegionHttpRsp::mut_force_update,
            QueryCurrRegionHttpRsp::set_force_update,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::StopServerInfo::StopServerInfo>(
            "stop_server",
            QueryCurrRegionHttpRsp::has_stop_server,
            QueryCurrRegionHttpRsp::stop_server,
            QueryCurrRegionHttpRsp::mut_stop_server,
            QueryCurrRegionHttpRsp::set_stop_server,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_secret_key",
            |m: &QueryCurrRegionHttpRsp| { &m.client_secret_key },
            |m: &mut QueryCurrRegionHttpRsp| { &mut m.client_secret_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "region_custom_config_encrypted",
            |m: &QueryCurrRegionHttpRsp| { &m.region_custom_config_encrypted },
            |m: &mut QueryCurrRegionHttpRsp| { &mut m.region_custom_config_encrypted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_region_custom_config_encrypted",
            |m: &QueryCurrRegionHttpRsp| { &m.client_region_custom_config_encrypted },
            |m: &mut QueryCurrRegionHttpRsp| { &mut m.client_region_custom_config_encrypted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LDOHCJJALDK",
            |m: &QueryCurrRegionHttpRsp| { &m.LDOHCJJALDK },
            |m: &mut QueryCurrRegionHttpRsp| { &mut m.LDOHCJJALDK },
        ));
        oneofs.push(query_curr_region_http_rsp::Detail::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryCurrRegionHttpRsp>(
            "QueryCurrRegionHttpRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryCurrRegionHttpRsp {
    const NAME: &'static str = "QueryCurrRegionHttpRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.retcode = is.read_int32()?;
                },
                18 => {
                    self.msg = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.region_info)?;
                },
                34 => {
                    self.detail = ::std::option::Option::Some(query_curr_region_http_rsp::Detail::ForceUpdate(is.read_message()?));
                },
                42 => {
                    self.detail = ::std::option::Option::Some(query_curr_region_http_rsp::Detail::StopServer(is.read_message()?));
                },
                90 => {
                    self.client_secret_key = is.read_bytes()?;
                },
                98 => {
                    self.region_custom_config_encrypted = is.read_bytes()?;
                },
                106 => {
                    self.client_region_custom_config_encrypted = is.read_bytes()?;
                },
                114 => {
                    self.LDOHCJJALDK = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.retcode);
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.msg);
        }
        if let Some(v) = self.region_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.client_secret_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.client_secret_key);
        }
        if !self.region_custom_config_encrypted.is_empty() {
            my_size += ::protobuf::rt::bytes_size(12, &self.region_custom_config_encrypted);
        }
        if !self.client_region_custom_config_encrypted.is_empty() {
            my_size += ::protobuf::rt::bytes_size(13, &self.client_region_custom_config_encrypted);
        }
        if !self.LDOHCJJALDK.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.LDOHCJJALDK);
        }
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &query_curr_region_http_rsp::Detail::ForceUpdate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &query_curr_region_http_rsp::Detail::StopServer(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_int32(1, self.retcode)?;
        }
        if !self.msg.is_empty() {
            os.write_string(2, &self.msg)?;
        }
        if let Some(v) = self.region_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.client_secret_key.is_empty() {
            os.write_bytes(11, &self.client_secret_key)?;
        }
        if !self.region_custom_config_encrypted.is_empty() {
            os.write_bytes(12, &self.region_custom_config_encrypted)?;
        }
        if !self.client_region_custom_config_encrypted.is_empty() {
            os.write_bytes(13, &self.client_region_custom_config_encrypted)?;
        }
        if !self.LDOHCJJALDK.is_empty() {
            os.write_string(14, &self.LDOHCJJALDK)?;
        }
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &query_curr_region_http_rsp::Detail::ForceUpdate(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &query_curr_region_http_rsp::Detail::StopServer(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryCurrRegionHttpRsp {
        QueryCurrRegionHttpRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.msg.clear();
        self.region_info.clear();
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.client_secret_key.clear();
        self.region_custom_config_encrypted.clear();
        self.client_region_custom_config_encrypted.clear();
        self.LDOHCJJALDK.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryCurrRegionHttpRsp {
        static instance: QueryCurrRegionHttpRsp = QueryCurrRegionHttpRsp {
            retcode: 0,
            msg: ::std::string::String::new(),
            region_info: ::protobuf::MessageField::none(),
            client_secret_key: ::std::vec::Vec::new(),
            region_custom_config_encrypted: ::std::vec::Vec::new(),
            client_region_custom_config_encrypted: ::std::vec::Vec::new(),
            LDOHCJJALDK: ::std::string::String::new(),
            detail: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryCurrRegionHttpRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryCurrRegionHttpRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryCurrRegionHttpRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryCurrRegionHttpRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `QueryCurrRegionHttpRsp`
pub mod query_curr_region_http_rsp {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:QueryCurrRegionHttpRsp.detail)
    pub enum Detail {
        // @@protoc_insertion_point(oneof_field:QueryCurrRegionHttpRsp.force_update)
        ForceUpdate(super::super::ForceUpdateInfo::ForceUpdateInfo),
        // @@protoc_insertion_point(oneof_field:QueryCurrRegionHttpRsp.stop_server)
        StopServer(super::super::StopServerInfo::StopServerInfo),
    }

    impl ::protobuf::Oneof for Detail {
    }

    impl ::protobuf::OneofFull for Detail {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::QueryCurrRegionHttpRsp as ::protobuf::MessageFull>::descriptor().oneof_by_name("detail").unwrap()).clone()
        }
    }

    impl Detail {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Detail>("detail")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cQueryCurrRegionHttpRsp.proto\x1a\x10RegionInfo.proto\x1a\x15ForceU\
    pdateInfo.proto\x1a\x14StopServerInfo.proto\"\xcc\x03\n\x16QueryCurrRegi\
    onHttpRsp\x12\x18\n\x07retcode\x18\x01\x20\x01(\x05R\x07retcode\x12\x10\
    \n\x03msg\x18\x02\x20\x01(\tR\x03msg\x12,\n\x0bregion_info\x18\x03\x20\
    \x01(\x0b2\x0b.RegionInfoR\nregionInfo\x125\n\x0cforce_update\x18\x04\
    \x20\x01(\x0b2\x10.ForceUpdateInfoH\0R\x0bforceUpdate\x122\n\x0bstop_ser\
    ver\x18\x05\x20\x01(\x0b2\x0f.StopServerInfoH\0R\nstopServer\x12*\n\x11c\
    lient_secret_key\x18\x0b\x20\x01(\x0cR\x0fclientSecretKey\x12C\n\x1eregi\
    on_custom_config_encrypted\x18\x0c\x20\x01(\x0cR\x1bregionCustomConfigEn\
    crypted\x12P\n%client_region_custom_config_encrypted\x18\r\x20\x01(\x0cR\
    !clientRegionCustomConfigEncrypted\x12\x20\n\x0bLDOHCJJALDK\x18\x0e\x20\
    \x01(\tR\x0bLDOHCJJALDKB\x08\n\x06detailB\x1b\n\x19emu.grasscutter.net.p\
    rotob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::RegionInfo::file_descriptor().clone());
            deps.push(super::ForceUpdateInfo::file_descriptor().clone());
            deps.push(super::StopServerInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(QueryCurrRegionHttpRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
