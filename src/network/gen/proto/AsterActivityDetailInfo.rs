// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AsterActivityDetailInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AsterActivityDetailInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AsterActivityDetailInfo {
    // message fields
    // @@protoc_insertion_point(field:AsterActivityDetailInfo.is_content_closed)
    pub is_content_closed: bool,
    // @@protoc_insertion_point(field:AsterActivityDetailInfo.BLIJLCKCIJP)
    pub BLIJLCKCIJP: u32,
    // @@protoc_insertion_point(field:AsterActivityDetailInfo.aster_mid)
    pub aster_mid: ::protobuf::MessageField<super::AsterMidDetailInfo::AsterMidDetailInfo>,
    // @@protoc_insertion_point(field:AsterActivityDetailInfo.content_close_time)
    pub content_close_time: u32,
    // @@protoc_insertion_point(field:AsterActivityDetailInfo.aster_little)
    pub aster_little: ::protobuf::MessageField<super::AsterLittleDetailInfo::AsterLittleDetailInfo>,
    // @@protoc_insertion_point(field:AsterActivityDetailInfo.aster_large)
    pub aster_large: ::protobuf::MessageField<super::AsterLargeDetailInfo::AsterLargeDetailInfo>,
    // @@protoc_insertion_point(field:AsterActivityDetailInfo.ADOPPAOJEAN)
    pub ADOPPAOJEAN: u32,
    // @@protoc_insertion_point(field:AsterActivityDetailInfo.aster_progress)
    pub aster_progress: ::protobuf::MessageField<super::AsterProgressDetailInfo::AsterProgressDetailInfo>,
    // @@protoc_insertion_point(field:AsterActivityDetailInfo.is_special_reward_taken)
    pub is_special_reward_taken: bool,
    // special fields
    // @@protoc_insertion_point(special_field:AsterActivityDetailInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AsterActivityDetailInfo {
    fn default() -> &'a AsterActivityDetailInfo {
        <AsterActivityDetailInfo as ::protobuf::Message>::default_instance()
    }
}

impl AsterActivityDetailInfo {
    pub fn new() -> AsterActivityDetailInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_content_closed",
            |m: &AsterActivityDetailInfo| { &m.is_content_closed },
            |m: &mut AsterActivityDetailInfo| { &mut m.is_content_closed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BLIJLCKCIJP",
            |m: &AsterActivityDetailInfo| { &m.BLIJLCKCIJP },
            |m: &mut AsterActivityDetailInfo| { &mut m.BLIJLCKCIJP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AsterMidDetailInfo::AsterMidDetailInfo>(
            "aster_mid",
            |m: &AsterActivityDetailInfo| { &m.aster_mid },
            |m: &mut AsterActivityDetailInfo| { &mut m.aster_mid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content_close_time",
            |m: &AsterActivityDetailInfo| { &m.content_close_time },
            |m: &mut AsterActivityDetailInfo| { &mut m.content_close_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AsterLittleDetailInfo::AsterLittleDetailInfo>(
            "aster_little",
            |m: &AsterActivityDetailInfo| { &m.aster_little },
            |m: &mut AsterActivityDetailInfo| { &mut m.aster_little },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AsterLargeDetailInfo::AsterLargeDetailInfo>(
            "aster_large",
            |m: &AsterActivityDetailInfo| { &m.aster_large },
            |m: &mut AsterActivityDetailInfo| { &mut m.aster_large },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ADOPPAOJEAN",
            |m: &AsterActivityDetailInfo| { &m.ADOPPAOJEAN },
            |m: &mut AsterActivityDetailInfo| { &mut m.ADOPPAOJEAN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AsterProgressDetailInfo::AsterProgressDetailInfo>(
            "aster_progress",
            |m: &AsterActivityDetailInfo| { &m.aster_progress },
            |m: &mut AsterActivityDetailInfo| { &mut m.aster_progress },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_special_reward_taken",
            |m: &AsterActivityDetailInfo| { &m.is_special_reward_taken },
            |m: &mut AsterActivityDetailInfo| { &mut m.is_special_reward_taken },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AsterActivityDetailInfo>(
            "AsterActivityDetailInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AsterActivityDetailInfo {
    const NAME: &'static str = "AsterActivityDetailInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.is_content_closed = is.read_bool()?;
                },
                56 => {
                    self.BLIJLCKCIJP = is.read_uint32()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.aster_mid)?;
                },
                112 => {
                    self.content_close_time = is.read_uint32()?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.aster_little)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.aster_large)?;
                },
                16 => {
                    self.ADOPPAOJEAN = is.read_uint32()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.aster_progress)?;
                },
                32 => {
                    self.is_special_reward_taken = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.is_content_closed != false {
            my_size += 1 + 1;
        }
        if self.BLIJLCKCIJP != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.BLIJLCKCIJP);
        }
        if let Some(v) = self.aster_mid.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.content_close_time != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.content_close_time);
        }
        if let Some(v) = self.aster_little.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.aster_large.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.ADOPPAOJEAN != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.ADOPPAOJEAN);
        }
        if let Some(v) = self.aster_progress.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.is_special_reward_taken != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.is_content_closed != false {
            os.write_bool(3, self.is_content_closed)?;
        }
        if self.BLIJLCKCIJP != 0 {
            os.write_uint32(7, self.BLIJLCKCIJP)?;
        }
        if let Some(v) = self.aster_mid.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if self.content_close_time != 0 {
            os.write_uint32(14, self.content_close_time)?;
        }
        if let Some(v) = self.aster_little.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.aster_large.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if self.ADOPPAOJEAN != 0 {
            os.write_uint32(2, self.ADOPPAOJEAN)?;
        }
        if let Some(v) = self.aster_progress.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if self.is_special_reward_taken != false {
            os.write_bool(4, self.is_special_reward_taken)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AsterActivityDetailInfo {
        AsterActivityDetailInfo::new()
    }

    fn clear(&mut self) {
        self.is_content_closed = false;
        self.BLIJLCKCIJP = 0;
        self.aster_mid.clear();
        self.content_close_time = 0;
        self.aster_little.clear();
        self.aster_large.clear();
        self.ADOPPAOJEAN = 0;
        self.aster_progress.clear();
        self.is_special_reward_taken = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AsterActivityDetailInfo {
        static instance: AsterActivityDetailInfo = AsterActivityDetailInfo {
            is_content_closed: false,
            BLIJLCKCIJP: 0,
            aster_mid: ::protobuf::MessageField::none(),
            content_close_time: 0,
            aster_little: ::protobuf::MessageField::none(),
            aster_large: ::protobuf::MessageField::none(),
            ADOPPAOJEAN: 0,
            aster_progress: ::protobuf::MessageField::none(),
            is_special_reward_taken: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AsterActivityDetailInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AsterActivityDetailInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AsterActivityDetailInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AsterActivityDetailInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dAsterActivityDetailInfo.proto\x1a\x18AsterMidDetailInfo.proto\x1a\
    \x1bAsterLittleDetailInfo.proto\x1a\x1aAsterLargeDetailInfo.proto\x1a\
    \x1dAsterProgressDetailInfo.proto\"\xd4\x03\n\x17AsterActivityDetailInfo\
    \x12*\n\x11is_content_closed\x18\x03\x20\x01(\x08R\x0fisContentClosed\
    \x12\x20\n\x0bBLIJLCKCIJP\x18\x07\x20\x01(\rR\x0bBLIJLCKCIJP\x120\n\tast\
    er_mid\x18\x0b\x20\x01(\x0b2\x13.AsterMidDetailInfoR\x08asterMid\x12,\n\
    \x12content_close_time\x18\x0e\x20\x01(\rR\x10contentCloseTime\x129\n\
    \x0caster_little\x18\r\x20\x01(\x0b2\x16.AsterLittleDetailInfoR\x0baster\
    Little\x126\n\x0baster_large\x18\t\x20\x01(\x0b2\x15.AsterLargeDetailInf\
    oR\nasterLarge\x12\x20\n\x0bADOPPAOJEAN\x18\x02\x20\x01(\rR\x0bADOPPAOJE\
    AN\x12?\n\x0easter_progress\x18\x05\x20\x01(\x0b2\x18.AsterProgressDetai\
    lInfoR\rasterProgress\x125\n\x17is_special_reward_taken\x18\x04\x20\x01(\
    \x08R\x14isSpecialRewardTakenB\x1b\n\x19emu.grasscutter.net.protob\x06pr\
    oto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::AsterMidDetailInfo::file_descriptor().clone());
            deps.push(super::AsterLittleDetailInfo::file_descriptor().clone());
            deps.push(super::AsterLargeDetailInfo::file_descriptor().clone());
            deps.push(super::AsterProgressDetailInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AsterActivityDetailInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
