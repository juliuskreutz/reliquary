// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BattlePassSchedule.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:BattlePassSchedule)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BattlePassSchedule {
    // message fields
    // @@protoc_insertion_point(field:BattlePassSchedule.cur_cycle)
    pub cur_cycle: ::protobuf::MessageField<super::BattlePassCycle::BattlePassCycle>,
    // @@protoc_insertion_point(field:BattlePassSchedule.schedule_id)
    pub schedule_id: u32,
    // @@protoc_insertion_point(field:BattlePassSchedule.point)
    pub point: u32,
    // @@protoc_insertion_point(field:BattlePassSchedule.unlock_status)
    pub unlock_status: ::protobuf::EnumOrUnknown<super::BattlePassUnlockStatus::BattlePassUnlockStatus>,
    // @@protoc_insertion_point(field:BattlePassSchedule.reward_taken_list)
    pub reward_taken_list: ::std::vec::Vec<super::BattlePassRewardTag::BattlePassRewardTag>,
    // @@protoc_insertion_point(field:BattlePassSchedule.begin_time)
    pub begin_time: u32,
    // @@protoc_insertion_point(field:BattlePassSchedule.paid_platform_flags)
    pub paid_platform_flags: u32,
    // @@protoc_insertion_point(field:BattlePassSchedule.cur_cycle_points)
    pub cur_cycle_points: u32,
    // @@protoc_insertion_point(field:BattlePassSchedule.product_info)
    pub product_info: ::protobuf::MessageField<super::BattlePassProduct::BattlePassProduct>,
    // @@protoc_insertion_point(field:BattlePassSchedule.end_time)
    pub end_time: u32,
    // @@protoc_insertion_point(field:BattlePassSchedule.level)
    pub level: u32,
    // @@protoc_insertion_point(field:BattlePassSchedule.is_extra_paid_reward_taken)
    pub is_extra_paid_reward_taken: bool,
    // @@protoc_insertion_point(field:BattlePassSchedule.is_viewed)
    pub is_viewed: bool,
    // special fields
    // @@protoc_insertion_point(special_field:BattlePassSchedule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BattlePassSchedule {
    fn default() -> &'a BattlePassSchedule {
        <BattlePassSchedule as ::protobuf::Message>::default_instance()
    }
}

impl BattlePassSchedule {
    pub fn new() -> BattlePassSchedule {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BattlePassCycle::BattlePassCycle>(
            "cur_cycle",
            |m: &BattlePassSchedule| { &m.cur_cycle },
            |m: &mut BattlePassSchedule| { &mut m.cur_cycle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_id",
            |m: &BattlePassSchedule| { &m.schedule_id },
            |m: &mut BattlePassSchedule| { &mut m.schedule_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "point",
            |m: &BattlePassSchedule| { &m.point },
            |m: &mut BattlePassSchedule| { &mut m.point },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unlock_status",
            |m: &BattlePassSchedule| { &m.unlock_status },
            |m: &mut BattlePassSchedule| { &mut m.unlock_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "reward_taken_list",
            |m: &BattlePassSchedule| { &m.reward_taken_list },
            |m: &mut BattlePassSchedule| { &mut m.reward_taken_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "begin_time",
            |m: &BattlePassSchedule| { &m.begin_time },
            |m: &mut BattlePassSchedule| { &mut m.begin_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "paid_platform_flags",
            |m: &BattlePassSchedule| { &m.paid_platform_flags },
            |m: &mut BattlePassSchedule| { &mut m.paid_platform_flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_cycle_points",
            |m: &BattlePassSchedule| { &m.cur_cycle_points },
            |m: &mut BattlePassSchedule| { &mut m.cur_cycle_points },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BattlePassProduct::BattlePassProduct>(
            "product_info",
            |m: &BattlePassSchedule| { &m.product_info },
            |m: &mut BattlePassSchedule| { &mut m.product_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_time",
            |m: &BattlePassSchedule| { &m.end_time },
            |m: &mut BattlePassSchedule| { &mut m.end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &BattlePassSchedule| { &m.level },
            |m: &mut BattlePassSchedule| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_extra_paid_reward_taken",
            |m: &BattlePassSchedule| { &m.is_extra_paid_reward_taken },
            |m: &mut BattlePassSchedule| { &mut m.is_extra_paid_reward_taken },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_viewed",
            |m: &BattlePassSchedule| { &m.is_viewed },
            |m: &mut BattlePassSchedule| { &mut m.is_viewed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BattlePassSchedule>(
            "BattlePassSchedule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BattlePassSchedule {
    const NAME: &'static str = "BattlePassSchedule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cur_cycle)?;
                },
                16 => {
                    self.schedule_id = is.read_uint32()?;
                },
                24 => {
                    self.point = is.read_uint32()?;
                },
                32 => {
                    self.unlock_status = is.read_enum_or_unknown()?;
                },
                42 => {
                    self.reward_taken_list.push(is.read_message()?);
                },
                48 => {
                    self.begin_time = is.read_uint32()?;
                },
                56 => {
                    self.paid_platform_flags = is.read_uint32()?;
                },
                64 => {
                    self.cur_cycle_points = is.read_uint32()?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.product_info)?;
                },
                96 => {
                    self.end_time = is.read_uint32()?;
                },
                104 => {
                    self.level = is.read_uint32()?;
                },
                112 => {
                    self.is_extra_paid_reward_taken = is.read_bool()?;
                },
                120 => {
                    self.is_viewed = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cur_cycle.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.schedule_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.schedule_id);
        }
        if self.point != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.point);
        }
        if self.unlock_status != ::protobuf::EnumOrUnknown::new(super::BattlePassUnlockStatus::BattlePassUnlockStatus::BATTLE_PASS_UNLOCK_STATUS_INVALID) {
            my_size += ::protobuf::rt::int32_size(4, self.unlock_status.value());
        }
        for value in &self.reward_taken_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.begin_time != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.begin_time);
        }
        if self.paid_platform_flags != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.paid_platform_flags);
        }
        if self.cur_cycle_points != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.cur_cycle_points);
        }
        if let Some(v) = self.product_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.end_time != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.end_time);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.level);
        }
        if self.is_extra_paid_reward_taken != false {
            my_size += 1 + 1;
        }
        if self.is_viewed != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.cur_cycle.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.schedule_id != 0 {
            os.write_uint32(2, self.schedule_id)?;
        }
        if self.point != 0 {
            os.write_uint32(3, self.point)?;
        }
        if self.unlock_status != ::protobuf::EnumOrUnknown::new(super::BattlePassUnlockStatus::BattlePassUnlockStatus::BATTLE_PASS_UNLOCK_STATUS_INVALID) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.unlock_status))?;
        }
        for v in &self.reward_taken_list {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if self.begin_time != 0 {
            os.write_uint32(6, self.begin_time)?;
        }
        if self.paid_platform_flags != 0 {
            os.write_uint32(7, self.paid_platform_flags)?;
        }
        if self.cur_cycle_points != 0 {
            os.write_uint32(8, self.cur_cycle_points)?;
        }
        if let Some(v) = self.product_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if self.end_time != 0 {
            os.write_uint32(12, self.end_time)?;
        }
        if self.level != 0 {
            os.write_uint32(13, self.level)?;
        }
        if self.is_extra_paid_reward_taken != false {
            os.write_bool(14, self.is_extra_paid_reward_taken)?;
        }
        if self.is_viewed != false {
            os.write_bool(15, self.is_viewed)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BattlePassSchedule {
        BattlePassSchedule::new()
    }

    fn clear(&mut self) {
        self.cur_cycle.clear();
        self.schedule_id = 0;
        self.point = 0;
        self.unlock_status = ::protobuf::EnumOrUnknown::new(super::BattlePassUnlockStatus::BattlePassUnlockStatus::BATTLE_PASS_UNLOCK_STATUS_INVALID);
        self.reward_taken_list.clear();
        self.begin_time = 0;
        self.paid_platform_flags = 0;
        self.cur_cycle_points = 0;
        self.product_info.clear();
        self.end_time = 0;
        self.level = 0;
        self.is_extra_paid_reward_taken = false;
        self.is_viewed = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BattlePassSchedule {
        static instance: BattlePassSchedule = BattlePassSchedule {
            cur_cycle: ::protobuf::MessageField::none(),
            schedule_id: 0,
            point: 0,
            unlock_status: ::protobuf::EnumOrUnknown::from_i32(0),
            reward_taken_list: ::std::vec::Vec::new(),
            begin_time: 0,
            paid_platform_flags: 0,
            cur_cycle_points: 0,
            product_info: ::protobuf::MessageField::none(),
            end_time: 0,
            level: 0,
            is_extra_paid_reward_taken: false,
            is_viewed: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BattlePassSchedule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BattlePassSchedule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BattlePassSchedule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BattlePassSchedule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18BattlePassSchedule.proto\x1a\x15BattlePassCycle.proto\x1a\x19Battl\
    ePassRewardTag.proto\x1a\x17BattlePassProduct.proto\x1a\x1cBattlePassUnl\
    ockStatus.proto\"\xb4\x04\n\x12BattlePassSchedule\x12-\n\tcur_cycle\x18\
    \x01\x20\x01(\x0b2\x10.BattlePassCycleR\x08curCycle\x12\x1f\n\x0bschedul\
    e_id\x18\x02\x20\x01(\rR\nscheduleId\x12\x14\n\x05point\x18\x03\x20\x01(\
    \rR\x05point\x12<\n\runlock_status\x18\x04\x20\x01(\x0e2\x17.BattlePassU\
    nlockStatusR\x0cunlockStatus\x12@\n\x11reward_taken_list\x18\x05\x20\x03\
    (\x0b2\x14.BattlePassRewardTagR\x0frewardTakenList\x12\x1d\n\nbegin_time\
    \x18\x06\x20\x01(\rR\tbeginTime\x12.\n\x13paid_platform_flags\x18\x07\
    \x20\x01(\rR\x11paidPlatformFlags\x12(\n\x10cur_cycle_points\x18\x08\x20\
    \x01(\rR\x0ecurCyclePoints\x125\n\x0cproduct_info\x18\n\x20\x01(\x0b2\
    \x12.BattlePassProductR\x0bproductInfo\x12\x19\n\x08end_time\x18\x0c\x20\
    \x01(\rR\x07endTime\x12\x14\n\x05level\x18\r\x20\x01(\rR\x05level\x12:\n\
    \x1ais_extra_paid_reward_taken\x18\x0e\x20\x01(\x08R\x16isExtraPaidRewar\
    dTaken\x12\x1b\n\tis_viewed\x18\x0f\x20\x01(\x08R\x08isViewedB\x1b\n\x19\
    emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::BattlePassCycle::file_descriptor().clone());
            deps.push(super::BattlePassRewardTag::file_descriptor().clone());
            deps.push(super::BattlePassProduct::file_descriptor().clone());
            deps.push(super::BattlePassUnlockStatus::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BattlePassSchedule::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
