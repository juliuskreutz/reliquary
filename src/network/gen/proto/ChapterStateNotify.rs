// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChapterStateNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ChapterStateNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChapterStateNotify {
    // message fields
    // @@protoc_insertion_point(field:ChapterStateNotify.need_begin_time)
    pub need_begin_time: ::protobuf::MessageField<chapter_state_notify::NeedBeginTime>,
    // @@protoc_insertion_point(field:ChapterStateNotify.need_player_level)
    pub need_player_level: ::protobuf::MessageField<chapter_state_notify::NeedPlayerLevel>,
    // @@protoc_insertion_point(field:ChapterStateNotify.chapter_state)
    pub chapter_state: ::protobuf::EnumOrUnknown<super::ChapterState::ChapterState>,
    // @@protoc_insertion_point(field:ChapterStateNotify.chapter_id)
    pub chapter_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ChapterStateNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChapterStateNotify {
    fn default() -> &'a ChapterStateNotify {
        <ChapterStateNotify as ::protobuf::Message>::default_instance()
    }
}

impl ChapterStateNotify {
    pub fn new() -> ChapterStateNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, chapter_state_notify::NeedBeginTime>(
            "need_begin_time",
            |m: &ChapterStateNotify| { &m.need_begin_time },
            |m: &mut ChapterStateNotify| { &mut m.need_begin_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, chapter_state_notify::NeedPlayerLevel>(
            "need_player_level",
            |m: &ChapterStateNotify| { &m.need_player_level },
            |m: &mut ChapterStateNotify| { &mut m.need_player_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chapter_state",
            |m: &ChapterStateNotify| { &m.chapter_state },
            |m: &mut ChapterStateNotify| { &mut m.chapter_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chapter_id",
            |m: &ChapterStateNotify| { &m.chapter_id },
            |m: &mut ChapterStateNotify| { &mut m.chapter_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChapterStateNotify>(
            "ChapterStateNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChapterStateNotify {
    const NAME: &'static str = "ChapterStateNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.need_begin_time)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.need_player_level)?;
                },
                56 => {
                    self.chapter_state = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.chapter_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.need_begin_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.need_player_level.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.chapter_state != ::protobuf::EnumOrUnknown::new(super::ChapterState::ChapterState::CHAPTER_STATE_INVALID) {
            my_size += ::protobuf::rt::int32_size(7, self.chapter_state.value());
        }
        if self.chapter_id != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.chapter_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.need_begin_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.need_player_level.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.chapter_state != ::protobuf::EnumOrUnknown::new(super::ChapterState::ChapterState::CHAPTER_STATE_INVALID) {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&self.chapter_state))?;
        }
        if self.chapter_id != 0 {
            os.write_uint32(4, self.chapter_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChapterStateNotify {
        ChapterStateNotify::new()
    }

    fn clear(&mut self) {
        self.need_begin_time.clear();
        self.need_player_level.clear();
        self.chapter_state = ::protobuf::EnumOrUnknown::new(super::ChapterState::ChapterState::CHAPTER_STATE_INVALID);
        self.chapter_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChapterStateNotify {
        static instance: ChapterStateNotify = ChapterStateNotify {
            need_begin_time: ::protobuf::MessageField::none(),
            need_player_level: ::protobuf::MessageField::none(),
            chapter_state: ::protobuf::EnumOrUnknown::from_i32(0),
            chapter_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChapterStateNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChapterStateNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChapterStateNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChapterStateNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ChapterStateNotify`
pub mod chapter_state_notify {
    // @@protoc_insertion_point(message:ChapterStateNotify.NeedPlayerLevel)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct NeedPlayerLevel {
        // message fields
        // @@protoc_insertion_point(field:ChapterStateNotify.NeedPlayerLevel.is_limit)
        pub is_limit: bool,
        // @@protoc_insertion_point(field:ChapterStateNotify.NeedPlayerLevel.configNeedPlayerLevel)
        pub configNeedPlayerLevel: u32,
        // special fields
        // @@protoc_insertion_point(special_field:ChapterStateNotify.NeedPlayerLevel.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a NeedPlayerLevel {
        fn default() -> &'a NeedPlayerLevel {
            <NeedPlayerLevel as ::protobuf::Message>::default_instance()
        }
    }

    impl NeedPlayerLevel {
        pub fn new() -> NeedPlayerLevel {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "is_limit",
                |m: &NeedPlayerLevel| { &m.is_limit },
                |m: &mut NeedPlayerLevel| { &mut m.is_limit },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "configNeedPlayerLevel",
                |m: &NeedPlayerLevel| { &m.configNeedPlayerLevel },
                |m: &mut NeedPlayerLevel| { &mut m.configNeedPlayerLevel },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NeedPlayerLevel>(
                "ChapterStateNotify.NeedPlayerLevel",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for NeedPlayerLevel {
        const NAME: &'static str = "NeedPlayerLevel";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.is_limit = is.read_bool()?;
                    },
                    88 => {
                        self.configNeedPlayerLevel = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.is_limit != false {
                my_size += 1 + 1;
            }
            if self.configNeedPlayerLevel != 0 {
                my_size += ::protobuf::rt::uint32_size(11, self.configNeedPlayerLevel);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.is_limit != false {
                os.write_bool(1, self.is_limit)?;
            }
            if self.configNeedPlayerLevel != 0 {
                os.write_uint32(11, self.configNeedPlayerLevel)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> NeedPlayerLevel {
            NeedPlayerLevel::new()
        }

        fn clear(&mut self) {
            self.is_limit = false;
            self.configNeedPlayerLevel = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static NeedPlayerLevel {
            static instance: NeedPlayerLevel = NeedPlayerLevel {
                is_limit: false,
                configNeedPlayerLevel: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for NeedPlayerLevel {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ChapterStateNotify.NeedPlayerLevel").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for NeedPlayerLevel {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for NeedPlayerLevel {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:ChapterStateNotify.NeedBeginTime)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct NeedBeginTime {
        // message fields
        // @@protoc_insertion_point(field:ChapterStateNotify.NeedBeginTime.configNeedBeginTime)
        pub configNeedBeginTime: u32,
        // @@protoc_insertion_point(field:ChapterStateNotify.NeedBeginTime.is_limit)
        pub is_limit: bool,
        // special fields
        // @@protoc_insertion_point(special_field:ChapterStateNotify.NeedBeginTime.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a NeedBeginTime {
        fn default() -> &'a NeedBeginTime {
            <NeedBeginTime as ::protobuf::Message>::default_instance()
        }
    }

    impl NeedBeginTime {
        pub fn new() -> NeedBeginTime {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "configNeedBeginTime",
                |m: &NeedBeginTime| { &m.configNeedBeginTime },
                |m: &mut NeedBeginTime| { &mut m.configNeedBeginTime },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "is_limit",
                |m: &NeedBeginTime| { &m.is_limit },
                |m: &mut NeedBeginTime| { &mut m.is_limit },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NeedBeginTime>(
                "ChapterStateNotify.NeedBeginTime",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for NeedBeginTime {
        const NAME: &'static str = "NeedBeginTime";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    40 => {
                        self.configNeedBeginTime = is.read_uint32()?;
                    },
                    8 => {
                        self.is_limit = is.read_bool()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.configNeedBeginTime != 0 {
                my_size += ::protobuf::rt::uint32_size(5, self.configNeedBeginTime);
            }
            if self.is_limit != false {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.configNeedBeginTime != 0 {
                os.write_uint32(5, self.configNeedBeginTime)?;
            }
            if self.is_limit != false {
                os.write_bool(1, self.is_limit)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> NeedBeginTime {
            NeedBeginTime::new()
        }

        fn clear(&mut self) {
            self.configNeedBeginTime = 0;
            self.is_limit = false;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static NeedBeginTime {
            static instance: NeedBeginTime = NeedBeginTime {
                configNeedBeginTime: 0,
                is_limit: false,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for NeedBeginTime {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ChapterStateNotify.NeedBeginTime").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for NeedBeginTime {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for NeedBeginTime {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18ChapterStateNotify.proto\x1a\x12ChapterState.proto\"\xc5\x03\n\x12\
    ChapterStateNotify\x12I\n\x0fneed_begin_time\x18\n\x20\x01(\x0b2!.Chapte\
    rStateNotify.NeedBeginTimeR\rneedBeginTime\x12O\n\x11need_player_level\
    \x18\x03\x20\x01(\x0b2#.ChapterStateNotify.NeedPlayerLevelR\x0fneedPlaye\
    rLevel\x122\n\rchapter_state\x18\x07\x20\x01(\x0e2\r.ChapterStateR\x0cch\
    apterState\x12\x1d\n\nchapter_id\x18\x04\x20\x01(\rR\tchapterId\x1ab\n\
    \x0fNeedPlayerLevel\x12\x19\n\x08is_limit\x18\x01\x20\x01(\x08R\x07isLim\
    it\x124\n\x15configNeedPlayerLevel\x18\x0b\x20\x01(\rR\x15configNeedPlay\
    erLevel\x1a\\\n\rNeedBeginTime\x120\n\x13configNeedBeginTime\x18\x05\x20\
    \x01(\rR\x13configNeedBeginTime\x12\x19\n\x08is_limit\x18\x01\x20\x01(\
    \x08R\x07isLimitB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ChapterState::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(ChapterStateNotify::generated_message_descriptor_data());
            messages.push(chapter_state_notify::NeedPlayerLevel::generated_message_descriptor_data());
            messages.push(chapter_state_notify::NeedBeginTime::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
