// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EvtCreateGadgetNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:EvtCreateGadgetNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EvtCreateGadgetNotify {
    // message fields
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.config_id)
    pub config_id: u32,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.HOFCLFELEMK)
    pub HOFCLFELEMK: u32,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.is_async_load)
    pub is_async_load: bool,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.entity_id)
    pub entity_id: u32,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.BANJELHCLDK)
    pub BANJELHCLDK: bool,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.room_id)
    pub room_id: u32,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.camp_type)
    pub camp_type: u32,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.InitEulerAngles)
    pub InitEulerAngles: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.guid)
    pub guid: u64,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.camp_id)
    pub camp_id: u32,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.target_entity_id)
    pub target_entity_id: u32,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.forward_type)
    pub forward_type: ::protobuf::EnumOrUnknown<super::ForwardType::ForwardType>,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.InitPos)
    pub InitPos: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.owner_entity_id)
    pub owner_entity_id: u32,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.prop_owner_entity_id)
    pub prop_owner_entity_id: u32,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.ability_name)
    pub ability_name: ::protobuf::MessageField<super::AbilityString::AbilityString>,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.KDPGILHNFNM)
    pub KDPGILHNFNM: u32,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.target_lock_point_index_list)
    pub target_lock_point_index_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.target_entity_id_list)
    pub target_entity_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.local_id)
    pub local_id: i32,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.PDGGCPDDAOL)
    pub PDGGCPDDAOL: bool,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.init_pose_id)
    pub init_pose_id: u32,
    // @@protoc_insertion_point(field:EvtCreateGadgetNotify.is_peer_id_from_player)
    pub is_peer_id_from_player: bool,
    // special fields
    // @@protoc_insertion_point(special_field:EvtCreateGadgetNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EvtCreateGadgetNotify {
    fn default() -> &'a EvtCreateGadgetNotify {
        <EvtCreateGadgetNotify as ::protobuf::Message>::default_instance()
    }
}

impl EvtCreateGadgetNotify {
    pub fn new() -> EvtCreateGadgetNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(23);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "config_id",
            |m: &EvtCreateGadgetNotify| { &m.config_id },
            |m: &mut EvtCreateGadgetNotify| { &mut m.config_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HOFCLFELEMK",
            |m: &EvtCreateGadgetNotify| { &m.HOFCLFELEMK },
            |m: &mut EvtCreateGadgetNotify| { &mut m.HOFCLFELEMK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_async_load",
            |m: &EvtCreateGadgetNotify| { &m.is_async_load },
            |m: &mut EvtCreateGadgetNotify| { &mut m.is_async_load },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity_id",
            |m: &EvtCreateGadgetNotify| { &m.entity_id },
            |m: &mut EvtCreateGadgetNotify| { &mut m.entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BANJELHCLDK",
            |m: &EvtCreateGadgetNotify| { &m.BANJELHCLDK },
            |m: &mut EvtCreateGadgetNotify| { &mut m.BANJELHCLDK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "room_id",
            |m: &EvtCreateGadgetNotify| { &m.room_id },
            |m: &mut EvtCreateGadgetNotify| { &mut m.room_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "camp_type",
            |m: &EvtCreateGadgetNotify| { &m.camp_type },
            |m: &mut EvtCreateGadgetNotify| { &mut m.camp_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "InitEulerAngles",
            |m: &EvtCreateGadgetNotify| { &m.InitEulerAngles },
            |m: &mut EvtCreateGadgetNotify| { &mut m.InitEulerAngles },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "guid",
            |m: &EvtCreateGadgetNotify| { &m.guid },
            |m: &mut EvtCreateGadgetNotify| { &mut m.guid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "camp_id",
            |m: &EvtCreateGadgetNotify| { &m.camp_id },
            |m: &mut EvtCreateGadgetNotify| { &mut m.camp_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_entity_id",
            |m: &EvtCreateGadgetNotify| { &m.target_entity_id },
            |m: &mut EvtCreateGadgetNotify| { &mut m.target_entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "forward_type",
            |m: &EvtCreateGadgetNotify| { &m.forward_type },
            |m: &mut EvtCreateGadgetNotify| { &mut m.forward_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "InitPos",
            |m: &EvtCreateGadgetNotify| { &m.InitPos },
            |m: &mut EvtCreateGadgetNotify| { &mut m.InitPos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_entity_id",
            |m: &EvtCreateGadgetNotify| { &m.owner_entity_id },
            |m: &mut EvtCreateGadgetNotify| { &mut m.owner_entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prop_owner_entity_id",
            |m: &EvtCreateGadgetNotify| { &m.prop_owner_entity_id },
            |m: &mut EvtCreateGadgetNotify| { &mut m.prop_owner_entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AbilityString::AbilityString>(
            "ability_name",
            |m: &EvtCreateGadgetNotify| { &m.ability_name },
            |m: &mut EvtCreateGadgetNotify| { &mut m.ability_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KDPGILHNFNM",
            |m: &EvtCreateGadgetNotify| { &m.KDPGILHNFNM },
            |m: &mut EvtCreateGadgetNotify| { &mut m.KDPGILHNFNM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "target_lock_point_index_list",
            |m: &EvtCreateGadgetNotify| { &m.target_lock_point_index_list },
            |m: &mut EvtCreateGadgetNotify| { &mut m.target_lock_point_index_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "target_entity_id_list",
            |m: &EvtCreateGadgetNotify| { &m.target_entity_id_list },
            |m: &mut EvtCreateGadgetNotify| { &mut m.target_entity_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "local_id",
            |m: &EvtCreateGadgetNotify| { &m.local_id },
            |m: &mut EvtCreateGadgetNotify| { &mut m.local_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PDGGCPDDAOL",
            |m: &EvtCreateGadgetNotify| { &m.PDGGCPDDAOL },
            |m: &mut EvtCreateGadgetNotify| { &mut m.PDGGCPDDAOL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "init_pose_id",
            |m: &EvtCreateGadgetNotify| { &m.init_pose_id },
            |m: &mut EvtCreateGadgetNotify| { &mut m.init_pose_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_peer_id_from_player",
            |m: &EvtCreateGadgetNotify| { &m.is_peer_id_from_player },
            |m: &mut EvtCreateGadgetNotify| { &mut m.is_peer_id_from_player },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EvtCreateGadgetNotify>(
            "EvtCreateGadgetNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EvtCreateGadgetNotify {
    const NAME: &'static str = "EvtCreateGadgetNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.config_id = is.read_uint32()?;
                },
                16 => {
                    self.HOFCLFELEMK = is.read_uint32()?;
                },
                24 => {
                    self.is_async_load = is.read_bool()?;
                },
                32 => {
                    self.entity_id = is.read_uint32()?;
                },
                40 => {
                    self.BANJELHCLDK = is.read_bool()?;
                },
                48 => {
                    self.room_id = is.read_uint32()?;
                },
                56 => {
                    self.camp_type = is.read_uint32()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.InitEulerAngles)?;
                },
                72 => {
                    self.guid = is.read_uint64()?;
                },
                80 => {
                    self.camp_id = is.read_uint32()?;
                },
                88 => {
                    self.target_entity_id = is.read_uint32()?;
                },
                96 => {
                    self.forward_type = is.read_enum_or_unknown()?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.InitPos)?;
                },
                112 => {
                    self.owner_entity_id = is.read_uint32()?;
                },
                120 => {
                    self.prop_owner_entity_id = is.read_uint32()?;
                },
                3522 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ability_name)?;
                },
                4432 => {
                    self.KDPGILHNFNM = is.read_uint32()?;
                },
                4706 => {
                    is.read_repeated_packed_uint32_into(&mut self.target_lock_point_index_list)?;
                },
                4704 => {
                    self.target_lock_point_index_list.push(is.read_uint32()?);
                },
                10386 => {
                    is.read_repeated_packed_uint32_into(&mut self.target_entity_id_list)?;
                },
                10384 => {
                    self.target_entity_id_list.push(is.read_uint32()?);
                },
                11048 => {
                    self.local_id = is.read_int32()?;
                },
                12336 => {
                    self.PDGGCPDDAOL = is.read_bool()?;
                },
                14880 => {
                    self.init_pose_id = is.read_uint32()?;
                },
                15648 => {
                    self.is_peer_id_from_player = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.config_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.config_id);
        }
        if self.HOFCLFELEMK != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.HOFCLFELEMK);
        }
        if self.is_async_load != false {
            my_size += 1 + 1;
        }
        if self.entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.entity_id);
        }
        if self.BANJELHCLDK != false {
            my_size += 1 + 1;
        }
        if self.room_id != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.room_id);
        }
        if self.camp_type != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.camp_type);
        }
        if let Some(v) = self.InitEulerAngles.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.guid != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.guid);
        }
        if self.camp_id != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.camp_id);
        }
        if self.target_entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.target_entity_id);
        }
        if self.forward_type != ::protobuf::EnumOrUnknown::new(super::ForwardType::ForwardType::FORWARD_TYPE_LOCAL) {
            my_size += ::protobuf::rt::int32_size(12, self.forward_type.value());
        }
        if let Some(v) = self.InitPos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.owner_entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.owner_entity_id);
        }
        if self.prop_owner_entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.prop_owner_entity_id);
        }
        if let Some(v) = self.ability_name.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.KDPGILHNFNM != 0 {
            my_size += ::protobuf::rt::uint32_size(554, self.KDPGILHNFNM);
        }
        for value in &self.target_lock_point_index_list {
            my_size += ::protobuf::rt::uint32_size(588, *value);
        };
        for value in &self.target_entity_id_list {
            my_size += ::protobuf::rt::uint32_size(1298, *value);
        };
        if self.local_id != 0 {
            my_size += ::protobuf::rt::int32_size(1381, self.local_id);
        }
        if self.PDGGCPDDAOL != false {
            my_size += 2 + 1;
        }
        if self.init_pose_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1860, self.init_pose_id);
        }
        if self.is_peer_id_from_player != false {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.config_id != 0 {
            os.write_uint32(1, self.config_id)?;
        }
        if self.HOFCLFELEMK != 0 {
            os.write_uint32(2, self.HOFCLFELEMK)?;
        }
        if self.is_async_load != false {
            os.write_bool(3, self.is_async_load)?;
        }
        if self.entity_id != 0 {
            os.write_uint32(4, self.entity_id)?;
        }
        if self.BANJELHCLDK != false {
            os.write_bool(5, self.BANJELHCLDK)?;
        }
        if self.room_id != 0 {
            os.write_uint32(6, self.room_id)?;
        }
        if self.camp_type != 0 {
            os.write_uint32(7, self.camp_type)?;
        }
        if let Some(v) = self.InitEulerAngles.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if self.guid != 0 {
            os.write_uint64(9, self.guid)?;
        }
        if self.camp_id != 0 {
            os.write_uint32(10, self.camp_id)?;
        }
        if self.target_entity_id != 0 {
            os.write_uint32(11, self.target_entity_id)?;
        }
        if self.forward_type != ::protobuf::EnumOrUnknown::new(super::ForwardType::ForwardType::FORWARD_TYPE_LOCAL) {
            os.write_enum(12, ::protobuf::EnumOrUnknown::value(&self.forward_type))?;
        }
        if let Some(v) = self.InitPos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if self.owner_entity_id != 0 {
            os.write_uint32(14, self.owner_entity_id)?;
        }
        if self.prop_owner_entity_id != 0 {
            os.write_uint32(15, self.prop_owner_entity_id)?;
        }
        if let Some(v) = self.ability_name.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(440, v, os)?;
        }
        if self.KDPGILHNFNM != 0 {
            os.write_uint32(554, self.KDPGILHNFNM)?;
        }
        for v in &self.target_lock_point_index_list {
            os.write_uint32(588, *v)?;
        };
        for v in &self.target_entity_id_list {
            os.write_uint32(1298, *v)?;
        };
        if self.local_id != 0 {
            os.write_int32(1381, self.local_id)?;
        }
        if self.PDGGCPDDAOL != false {
            os.write_bool(1542, self.PDGGCPDDAOL)?;
        }
        if self.init_pose_id != 0 {
            os.write_uint32(1860, self.init_pose_id)?;
        }
        if self.is_peer_id_from_player != false {
            os.write_bool(1956, self.is_peer_id_from_player)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EvtCreateGadgetNotify {
        EvtCreateGadgetNotify::new()
    }

    fn clear(&mut self) {
        self.config_id = 0;
        self.HOFCLFELEMK = 0;
        self.is_async_load = false;
        self.entity_id = 0;
        self.BANJELHCLDK = false;
        self.room_id = 0;
        self.camp_type = 0;
        self.InitEulerAngles.clear();
        self.guid = 0;
        self.camp_id = 0;
        self.target_entity_id = 0;
        self.forward_type = ::protobuf::EnumOrUnknown::new(super::ForwardType::ForwardType::FORWARD_TYPE_LOCAL);
        self.InitPos.clear();
        self.owner_entity_id = 0;
        self.prop_owner_entity_id = 0;
        self.ability_name.clear();
        self.KDPGILHNFNM = 0;
        self.target_lock_point_index_list.clear();
        self.target_entity_id_list.clear();
        self.local_id = 0;
        self.PDGGCPDDAOL = false;
        self.init_pose_id = 0;
        self.is_peer_id_from_player = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EvtCreateGadgetNotify {
        static instance: EvtCreateGadgetNotify = EvtCreateGadgetNotify {
            config_id: 0,
            HOFCLFELEMK: 0,
            is_async_load: false,
            entity_id: 0,
            BANJELHCLDK: false,
            room_id: 0,
            camp_type: 0,
            InitEulerAngles: ::protobuf::MessageField::none(),
            guid: 0,
            camp_id: 0,
            target_entity_id: 0,
            forward_type: ::protobuf::EnumOrUnknown::from_i32(0),
            InitPos: ::protobuf::MessageField::none(),
            owner_entity_id: 0,
            prop_owner_entity_id: 0,
            ability_name: ::protobuf::MessageField::none(),
            KDPGILHNFNM: 0,
            target_lock_point_index_list: ::std::vec::Vec::new(),
            target_entity_id_list: ::std::vec::Vec::new(),
            local_id: 0,
            PDGGCPDDAOL: false,
            init_pose_id: 0,
            is_peer_id_from_player: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EvtCreateGadgetNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EvtCreateGadgetNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EvtCreateGadgetNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvtCreateGadgetNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bEvtCreateGadgetNotify.proto\x1a\x0cVector.proto\x1a\x11ForwardType\
    .proto\x1a\x13AbilityString.proto\"\x89\x07\n\x15EvtCreateGadgetNotify\
    \x12\x1b\n\tconfig_id\x18\x01\x20\x01(\rR\x08configId\x12\x20\n\x0bHOFCL\
    FELEMK\x18\x02\x20\x01(\rR\x0bHOFCLFELEMK\x12\"\n\ris_async_load\x18\x03\
    \x20\x01(\x08R\x0bisAsyncLoad\x12\x1b\n\tentity_id\x18\x04\x20\x01(\rR\
    \x08entityId\x12\x20\n\x0bBANJELHCLDK\x18\x05\x20\x01(\x08R\x0bBANJELHCL\
    DK\x12\x17\n\x07room_id\x18\x06\x20\x01(\rR\x06roomId\x12\x1b\n\tcamp_ty\
    pe\x18\x07\x20\x01(\rR\x08campType\x121\n\x0fInitEulerAngles\x18\x08\x20\
    \x01(\x0b2\x07.VectorR\x0fInitEulerAngles\x12\x12\n\x04guid\x18\t\x20\
    \x01(\x04R\x04guid\x12\x17\n\x07camp_id\x18\n\x20\x01(\rR\x06campId\x12(\
    \n\x10target_entity_id\x18\x0b\x20\x01(\rR\x0etargetEntityId\x12/\n\x0cf\
    orward_type\x18\x0c\x20\x01(\x0e2\x0c.ForwardTypeR\x0bforwardType\x12!\n\
    \x07InitPos\x18\r\x20\x01(\x0b2\x07.VectorR\x07InitPos\x12&\n\x0fowner_e\
    ntity_id\x18\x0e\x20\x01(\rR\rownerEntityId\x12/\n\x14prop_owner_entity_\
    id\x18\x0f\x20\x01(\rR\x11propOwnerEntityId\x122\n\x0cability_name\x18\
    \xb8\x03\x20\x01(\x0b2\x0e.AbilityStringR\x0babilityName\x12!\n\x0bKDPGI\
    LHNFNM\x18\xaa\x04\x20\x01(\rR\x0bKDPGILHNFNM\x12?\n\x1ctarget_lock_poin\
    t_index_list\x18\xcc\x04\x20\x03(\rR\x18targetLockPointIndexList\x122\n\
    \x15target_entity_id_list\x18\x92\n\x20\x03(\rR\x12targetEntityIdList\
    \x12\x1a\n\x08local_id\x18\xe5\n\x20\x01(\x05R\x07localId\x12!\n\x0bPDGG\
    CPDDAOL\x18\x86\x0c\x20\x01(\x08R\x0bPDGGCPDDAOL\x12!\n\x0cinit_pose_id\
    \x18\xc4\x0e\x20\x01(\rR\ninitPoseId\x123\n\x16is_peer_id_from_player\
    \x18\xa4\x0f\x20\x01(\x08R\x12isPeerIdFromPlayerB\x1b\n\x19emu.grasscutt\
    er.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::Vector::file_descriptor().clone());
            deps.push(super::ForwardType::file_descriptor().clone());
            deps.push(super::AbilityString::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EvtCreateGadgetNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
