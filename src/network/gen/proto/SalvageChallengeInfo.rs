// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `SalvageChallengeInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:SalvageChallengeInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SalvageChallengeInfo {
    // message fields
    // @@protoc_insertion_point(field:SalvageChallengeInfo.challenge_type)
    pub challenge_type: u32,
    // @@protoc_insertion_point(field:SalvageChallengeInfo.is_unlock)
    pub is_unlock: bool,
    // message oneof groups
    pub challenge_detail: ::std::option::Option<salvage_challenge_info::Challenge_detail>,
    // special fields
    // @@protoc_insertion_point(special_field:SalvageChallengeInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SalvageChallengeInfo {
    fn default() -> &'a SalvageChallengeInfo {
        <SalvageChallengeInfo as ::protobuf::Message>::default_instance()
    }
}

impl SalvageChallengeInfo {
    pub fn new() -> SalvageChallengeInfo {
        ::std::default::Default::default()
    }

    // .SalvageBundleChallengeInfo bundle_info = 14;

    pub fn bundle_info(&self) -> &super::SalvageBundleChallengeInfo::SalvageBundleChallengeInfo {
        match self.challenge_detail {
            ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::BundleInfo(ref v)) => v,
            _ => <super::SalvageBundleChallengeInfo::SalvageBundleChallengeInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_bundle_info(&mut self) {
        self.challenge_detail = ::std::option::Option::None;
    }

    pub fn has_bundle_info(&self) -> bool {
        match self.challenge_detail {
            ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::BundleInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bundle_info(&mut self, v: super::SalvageBundleChallengeInfo::SalvageBundleChallengeInfo) {
        self.challenge_detail = ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::BundleInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bundle_info(&mut self) -> &mut super::SalvageBundleChallengeInfo::SalvageBundleChallengeInfo {
        if let ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::BundleInfo(_)) = self.challenge_detail {
        } else {
            self.challenge_detail = ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::BundleInfo(super::SalvageBundleChallengeInfo::SalvageBundleChallengeInfo::new()));
        }
        match self.challenge_detail {
            ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::BundleInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bundle_info(&mut self) -> super::SalvageBundleChallengeInfo::SalvageBundleChallengeInfo {
        if self.has_bundle_info() {
            match self.challenge_detail.take() {
                ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::BundleInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SalvageBundleChallengeInfo::SalvageBundleChallengeInfo::new()
        }
    }

    // .SalvageScoreChallengeInfo score_challenge_info = 5;

    pub fn score_challenge_info(&self) -> &super::SalvageScoreChallengeInfo::SalvageScoreChallengeInfo {
        match self.challenge_detail {
            ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::ScoreChallengeInfo(ref v)) => v,
            _ => <super::SalvageScoreChallengeInfo::SalvageScoreChallengeInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_score_challenge_info(&mut self) {
        self.challenge_detail = ::std::option::Option::None;
    }

    pub fn has_score_challenge_info(&self) -> bool {
        match self.challenge_detail {
            ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::ScoreChallengeInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_score_challenge_info(&mut self, v: super::SalvageScoreChallengeInfo::SalvageScoreChallengeInfo) {
        self.challenge_detail = ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::ScoreChallengeInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_score_challenge_info(&mut self) -> &mut super::SalvageScoreChallengeInfo::SalvageScoreChallengeInfo {
        if let ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::ScoreChallengeInfo(_)) = self.challenge_detail {
        } else {
            self.challenge_detail = ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::ScoreChallengeInfo(super::SalvageScoreChallengeInfo::SalvageScoreChallengeInfo::new()));
        }
        match self.challenge_detail {
            ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::ScoreChallengeInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_score_challenge_info(&mut self) -> super::SalvageScoreChallengeInfo::SalvageScoreChallengeInfo {
        if self.has_score_challenge_info() {
            match self.challenge_detail.take() {
                ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::ScoreChallengeInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SalvageScoreChallengeInfo::SalvageScoreChallengeInfo::new()
        }
    }

    // uint32 boss_challenge_id = 10;

    pub fn boss_challenge_id(&self) -> u32 {
        match self.challenge_detail {
            ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::BossChallengeId(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_boss_challenge_id(&mut self) {
        self.challenge_detail = ::std::option::Option::None;
    }

    pub fn has_boss_challenge_id(&self) -> bool {
        match self.challenge_detail {
            ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::BossChallengeId(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_boss_challenge_id(&mut self, v: u32) {
        self.challenge_detail = ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::BossChallengeId(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "challenge_type",
            |m: &SalvageChallengeInfo| { &m.challenge_type },
            |m: &mut SalvageChallengeInfo| { &mut m.challenge_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_unlock",
            |m: &SalvageChallengeInfo| { &m.is_unlock },
            |m: &mut SalvageChallengeInfo| { &mut m.is_unlock },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SalvageBundleChallengeInfo::SalvageBundleChallengeInfo>(
            "bundle_info",
            SalvageChallengeInfo::has_bundle_info,
            SalvageChallengeInfo::bundle_info,
            SalvageChallengeInfo::mut_bundle_info,
            SalvageChallengeInfo::set_bundle_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SalvageScoreChallengeInfo::SalvageScoreChallengeInfo>(
            "score_challenge_info",
            SalvageChallengeInfo::has_score_challenge_info,
            SalvageChallengeInfo::score_challenge_info,
            SalvageChallengeInfo::mut_score_challenge_info,
            SalvageChallengeInfo::set_score_challenge_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "boss_challenge_id",
            SalvageChallengeInfo::has_boss_challenge_id,
            SalvageChallengeInfo::boss_challenge_id,
            SalvageChallengeInfo::set_boss_challenge_id,
        ));
        oneofs.push(salvage_challenge_info::Challenge_detail::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SalvageChallengeInfo>(
            "SalvageChallengeInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SalvageChallengeInfo {
    const NAME: &'static str = "SalvageChallengeInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                96 => {
                    self.challenge_type = is.read_uint32()?;
                },
                104 => {
                    self.is_unlock = is.read_bool()?;
                },
                114 => {
                    self.challenge_detail = ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::BundleInfo(is.read_message()?));
                },
                42 => {
                    self.challenge_detail = ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::ScoreChallengeInfo(is.read_message()?));
                },
                80 => {
                    self.challenge_detail = ::std::option::Option::Some(salvage_challenge_info::Challenge_detail::BossChallengeId(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.challenge_type != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.challenge_type);
        }
        if self.is_unlock != false {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.challenge_detail {
            match v {
                &salvage_challenge_info::Challenge_detail::BundleInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &salvage_challenge_info::Challenge_detail::ScoreChallengeInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &salvage_challenge_info::Challenge_detail::BossChallengeId(v) => {
                    my_size += ::protobuf::rt::uint32_size(10, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.challenge_type != 0 {
            os.write_uint32(12, self.challenge_type)?;
        }
        if self.is_unlock != false {
            os.write_bool(13, self.is_unlock)?;
        }
        if let ::std::option::Option::Some(ref v) = self.challenge_detail {
            match v {
                &salvage_challenge_info::Challenge_detail::BundleInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &salvage_challenge_info::Challenge_detail::ScoreChallengeInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &salvage_challenge_info::Challenge_detail::BossChallengeId(v) => {
                    os.write_uint32(10, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SalvageChallengeInfo {
        SalvageChallengeInfo::new()
    }

    fn clear(&mut self) {
        self.challenge_type = 0;
        self.is_unlock = false;
        self.challenge_detail = ::std::option::Option::None;
        self.challenge_detail = ::std::option::Option::None;
        self.challenge_detail = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SalvageChallengeInfo {
        static instance: SalvageChallengeInfo = SalvageChallengeInfo {
            challenge_type: 0,
            is_unlock: false,
            challenge_detail: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SalvageChallengeInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SalvageChallengeInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SalvageChallengeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SalvageChallengeInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SalvageChallengeInfo`
pub mod salvage_challenge_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:SalvageChallengeInfo.challenge_detail)
    pub enum Challenge_detail {
        // @@protoc_insertion_point(oneof_field:SalvageChallengeInfo.bundle_info)
        BundleInfo(super::super::SalvageBundleChallengeInfo::SalvageBundleChallengeInfo),
        // @@protoc_insertion_point(oneof_field:SalvageChallengeInfo.score_challenge_info)
        ScoreChallengeInfo(super::super::SalvageScoreChallengeInfo::SalvageScoreChallengeInfo),
        // @@protoc_insertion_point(oneof_field:SalvageChallengeInfo.boss_challenge_id)
        BossChallengeId(u32),
    }

    impl ::protobuf::Oneof for Challenge_detail {
    }

    impl ::protobuf::OneofFull for Challenge_detail {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::SalvageChallengeInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("challenge_detail").unwrap()).clone()
        }
    }

    impl Challenge_detail {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Challenge_detail>("challenge_detail")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aSalvageChallengeInfo.proto\x1a\x20SalvageBundleChallengeInfo.proto\
    \x1a\x1fSalvageScoreChallengeInfo.proto\"\xac\x02\n\x14SalvageChallengeI\
    nfo\x12%\n\x0echallenge_type\x18\x0c\x20\x01(\rR\rchallengeType\x12\x1b\
    \n\tis_unlock\x18\r\x20\x01(\x08R\x08isUnlock\x12>\n\x0bbundle_info\x18\
    \x0e\x20\x01(\x0b2\x1b.SalvageBundleChallengeInfoH\0R\nbundleInfo\x12N\n\
    \x14score_challenge_info\x18\x05\x20\x01(\x0b2\x1a.SalvageScoreChallenge\
    InfoH\0R\x12scoreChallengeInfo\x12,\n\x11boss_challenge_id\x18\n\x20\x01\
    (\rH\0R\x0fbossChallengeIdB\x12\n\x10challenge_detailB\x1b\n\x19emu.gras\
    scutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::SalvageBundleChallengeInfo::file_descriptor().clone());
            deps.push(super::SalvageScoreChallengeInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SalvageChallengeInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
