// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `InvestigationMonster.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:InvestigationMonster)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct InvestigationMonster {
    // message fields
    // @@protoc_insertion_point(field:InvestigationMonster.left_times)
    pub left_times: u32,
    // @@protoc_insertion_point(field:InvestigationMonster.next_refresh_time)
    pub next_refresh_time: u32,
    // @@protoc_insertion_point(field:InvestigationMonster.lock_state)
    pub lock_state: ::protobuf::EnumOrUnknown<investigation_monster::LockState>,
    // @@protoc_insertion_point(field:InvestigationMonster.is_alive)
    pub is_alive: bool,
    // @@protoc_insertion_point(field:InvestigationMonster.weekly_boss_resin_discount_info)
    pub weekly_boss_resin_discount_info: ::protobuf::MessageField<super::WeeklyBossResinDiscountInfo::WeeklyBossResinDiscountInfo>,
    // @@protoc_insertion_point(field:InvestigationMonster.level)
    pub level: u32,
    // @@protoc_insertion_point(field:InvestigationMonster.IDCEKNMKCKG)
    pub IDCEKNMKCKG: bool,
    // @@protoc_insertion_point(field:InvestigationMonster.resin)
    pub resin: u32,
    // @@protoc_insertion_point(field:InvestigationMonster.refresh_interval)
    pub refresh_interval: u32,
    // @@protoc_insertion_point(field:InvestigationMonster.CJJEGKEPHKM)
    pub CJJEGKEPHKM: u32,
    // @@protoc_insertion_point(field:InvestigationMonster.id)
    pub id: u32,
    // @@protoc_insertion_point(field:InvestigationMonster.scene_id)
    pub scene_id: u32,
    // @@protoc_insertion_point(field:InvestigationMonster.city_id)
    pub city_id: u32,
    // @@protoc_insertion_point(field:InvestigationMonster.max_boss_chest_num)
    pub max_boss_chest_num: u32,
    // @@protoc_insertion_point(field:InvestigationMonster.pos)
    pub pos: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:InvestigationMonster.group_id)
    pub group_id: u32,
    // @@protoc_insertion_point(field:InvestigationMonster.map_layer_id)
    pub map_layer_id: u32,
    // @@protoc_insertion_point(field:InvestigationMonster.BHLBJLIPCBO)
    pub BHLBJLIPCBO: bool,
    // @@protoc_insertion_point(field:InvestigationMonster.monster_id)
    pub monster_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:InvestigationMonster.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InvestigationMonster {
    fn default() -> &'a InvestigationMonster {
        <InvestigationMonster as ::protobuf::Message>::default_instance()
    }
}

impl InvestigationMonster {
    pub fn new() -> InvestigationMonster {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(19);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "left_times",
            |m: &InvestigationMonster| { &m.left_times },
            |m: &mut InvestigationMonster| { &mut m.left_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next_refresh_time",
            |m: &InvestigationMonster| { &m.next_refresh_time },
            |m: &mut InvestigationMonster| { &mut m.next_refresh_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lock_state",
            |m: &InvestigationMonster| { &m.lock_state },
            |m: &mut InvestigationMonster| { &mut m.lock_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_alive",
            |m: &InvestigationMonster| { &m.is_alive },
            |m: &mut InvestigationMonster| { &mut m.is_alive },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::WeeklyBossResinDiscountInfo::WeeklyBossResinDiscountInfo>(
            "weekly_boss_resin_discount_info",
            |m: &InvestigationMonster| { &m.weekly_boss_resin_discount_info },
            |m: &mut InvestigationMonster| { &mut m.weekly_boss_resin_discount_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &InvestigationMonster| { &m.level },
            |m: &mut InvestigationMonster| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IDCEKNMKCKG",
            |m: &InvestigationMonster| { &m.IDCEKNMKCKG },
            |m: &mut InvestigationMonster| { &mut m.IDCEKNMKCKG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "resin",
            |m: &InvestigationMonster| { &m.resin },
            |m: &mut InvestigationMonster| { &mut m.resin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "refresh_interval",
            |m: &InvestigationMonster| { &m.refresh_interval },
            |m: &mut InvestigationMonster| { &mut m.refresh_interval },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CJJEGKEPHKM",
            |m: &InvestigationMonster| { &m.CJJEGKEPHKM },
            |m: &mut InvestigationMonster| { &mut m.CJJEGKEPHKM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &InvestigationMonster| { &m.id },
            |m: &mut InvestigationMonster| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_id",
            |m: &InvestigationMonster| { &m.scene_id },
            |m: &mut InvestigationMonster| { &mut m.scene_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "city_id",
            |m: &InvestigationMonster| { &m.city_id },
            |m: &mut InvestigationMonster| { &mut m.city_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_boss_chest_num",
            |m: &InvestigationMonster| { &m.max_boss_chest_num },
            |m: &mut InvestigationMonster| { &mut m.max_boss_chest_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "pos",
            |m: &InvestigationMonster| { &m.pos },
            |m: &mut InvestigationMonster| { &mut m.pos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &InvestigationMonster| { &m.group_id },
            |m: &mut InvestigationMonster| { &mut m.group_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "map_layer_id",
            |m: &InvestigationMonster| { &m.map_layer_id },
            |m: &mut InvestigationMonster| { &mut m.map_layer_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BHLBJLIPCBO",
            |m: &InvestigationMonster| { &m.BHLBJLIPCBO },
            |m: &mut InvestigationMonster| { &mut m.BHLBJLIPCBO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "monster_id",
            |m: &InvestigationMonster| { &m.monster_id },
            |m: &mut InvestigationMonster| { &mut m.monster_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InvestigationMonster>(
            "InvestigationMonster",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InvestigationMonster {
    const NAME: &'static str = "InvestigationMonster";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.left_times = is.read_uint32()?;
                },
                16 => {
                    self.next_refresh_time = is.read_uint32()?;
                },
                24 => {
                    self.lock_state = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.is_alive = is.read_bool()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.weekly_boss_resin_discount_info)?;
                },
                48 => {
                    self.level = is.read_uint32()?;
                },
                56 => {
                    self.IDCEKNMKCKG = is.read_bool()?;
                },
                64 => {
                    self.resin = is.read_uint32()?;
                },
                72 => {
                    self.refresh_interval = is.read_uint32()?;
                },
                80 => {
                    self.CJJEGKEPHKM = is.read_uint32()?;
                },
                88 => {
                    self.id = is.read_uint32()?;
                },
                96 => {
                    self.scene_id = is.read_uint32()?;
                },
                104 => {
                    self.city_id = is.read_uint32()?;
                },
                112 => {
                    self.max_boss_chest_num = is.read_uint32()?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pos)?;
                },
                1568 => {
                    self.group_id = is.read_uint32()?;
                },
                3984 => {
                    self.map_layer_id = is.read_uint32()?;
                },
                14344 => {
                    self.BHLBJLIPCBO = is.read_bool()?;
                },
                16120 => {
                    self.monster_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.left_times != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.left_times);
        }
        if self.next_refresh_time != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.next_refresh_time);
        }
        if self.lock_state != ::protobuf::EnumOrUnknown::new(investigation_monster::LockState::LOCK_NONE) {
            my_size += ::protobuf::rt::int32_size(3, self.lock_state.value());
        }
        if self.is_alive != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.weekly_boss_resin_discount_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.level);
        }
        if self.IDCEKNMKCKG != false {
            my_size += 1 + 1;
        }
        if self.resin != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.resin);
        }
        if self.refresh_interval != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.refresh_interval);
        }
        if self.CJJEGKEPHKM != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.CJJEGKEPHKM);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.id);
        }
        if self.scene_id != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.scene_id);
        }
        if self.city_id != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.city_id);
        }
        if self.max_boss_chest_num != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.max_boss_chest_num);
        }
        if let Some(v) = self.pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(196, self.group_id);
        }
        if self.map_layer_id != 0 {
            my_size += ::protobuf::rt::uint32_size(498, self.map_layer_id);
        }
        if self.BHLBJLIPCBO != false {
            my_size += 2 + 1;
        }
        if self.monster_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2015, self.monster_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.left_times != 0 {
            os.write_uint32(1, self.left_times)?;
        }
        if self.next_refresh_time != 0 {
            os.write_uint32(2, self.next_refresh_time)?;
        }
        if self.lock_state != ::protobuf::EnumOrUnknown::new(investigation_monster::LockState::LOCK_NONE) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.lock_state))?;
        }
        if self.is_alive != false {
            os.write_bool(4, self.is_alive)?;
        }
        if let Some(v) = self.weekly_boss_resin_discount_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if self.level != 0 {
            os.write_uint32(6, self.level)?;
        }
        if self.IDCEKNMKCKG != false {
            os.write_bool(7, self.IDCEKNMKCKG)?;
        }
        if self.resin != 0 {
            os.write_uint32(8, self.resin)?;
        }
        if self.refresh_interval != 0 {
            os.write_uint32(9, self.refresh_interval)?;
        }
        if self.CJJEGKEPHKM != 0 {
            os.write_uint32(10, self.CJJEGKEPHKM)?;
        }
        if self.id != 0 {
            os.write_uint32(11, self.id)?;
        }
        if self.scene_id != 0 {
            os.write_uint32(12, self.scene_id)?;
        }
        if self.city_id != 0 {
            os.write_uint32(13, self.city_id)?;
        }
        if self.max_boss_chest_num != 0 {
            os.write_uint32(14, self.max_boss_chest_num)?;
        }
        if let Some(v) = self.pos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if self.group_id != 0 {
            os.write_uint32(196, self.group_id)?;
        }
        if self.map_layer_id != 0 {
            os.write_uint32(498, self.map_layer_id)?;
        }
        if self.BHLBJLIPCBO != false {
            os.write_bool(1793, self.BHLBJLIPCBO)?;
        }
        if self.monster_id != 0 {
            os.write_uint32(2015, self.monster_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InvestigationMonster {
        InvestigationMonster::new()
    }

    fn clear(&mut self) {
        self.left_times = 0;
        self.next_refresh_time = 0;
        self.lock_state = ::protobuf::EnumOrUnknown::new(investigation_monster::LockState::LOCK_NONE);
        self.is_alive = false;
        self.weekly_boss_resin_discount_info.clear();
        self.level = 0;
        self.IDCEKNMKCKG = false;
        self.resin = 0;
        self.refresh_interval = 0;
        self.CJJEGKEPHKM = 0;
        self.id = 0;
        self.scene_id = 0;
        self.city_id = 0;
        self.max_boss_chest_num = 0;
        self.pos.clear();
        self.group_id = 0;
        self.map_layer_id = 0;
        self.BHLBJLIPCBO = false;
        self.monster_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InvestigationMonster {
        static instance: InvestigationMonster = InvestigationMonster {
            left_times: 0,
            next_refresh_time: 0,
            lock_state: ::protobuf::EnumOrUnknown::from_i32(0),
            is_alive: false,
            weekly_boss_resin_discount_info: ::protobuf::MessageField::none(),
            level: 0,
            IDCEKNMKCKG: false,
            resin: 0,
            refresh_interval: 0,
            CJJEGKEPHKM: 0,
            id: 0,
            scene_id: 0,
            city_id: 0,
            max_boss_chest_num: 0,
            pos: ::protobuf::MessageField::none(),
            group_id: 0,
            map_layer_id: 0,
            BHLBJLIPCBO: false,
            monster_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InvestigationMonster {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InvestigationMonster").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InvestigationMonster {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InvestigationMonster {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `InvestigationMonster`
pub mod investigation_monster {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:InvestigationMonster.LockState)
    pub enum LockState {
        // @@protoc_insertion_point(enum_value:InvestigationMonster.LockState.LOCK_NONE)
        LOCK_NONE = 0,
        // @@protoc_insertion_point(enum_value:InvestigationMonster.LockState.LOCK_QUEST)
        LOCK_QUEST = 1,
    }

    impl ::protobuf::Enum for LockState {
        const NAME: &'static str = "LockState";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<LockState> {
            match value {
                0 => ::std::option::Option::Some(LockState::LOCK_NONE),
                1 => ::std::option::Option::Some(LockState::LOCK_QUEST),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<LockState> {
            match str {
                "LOCK_NONE" => ::std::option::Option::Some(LockState::LOCK_NONE),
                "LOCK_QUEST" => ::std::option::Option::Some(LockState::LOCK_QUEST),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [LockState] = &[
            LockState::LOCK_NONE,
            LockState::LOCK_QUEST,
        ];
    }

    impl ::protobuf::EnumFull for LockState {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("InvestigationMonster.LockState").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for LockState {
        fn default() -> Self {
            LockState::LOCK_NONE
        }
    }

    impl LockState {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<LockState>("InvestigationMonster.LockState")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aInvestigationMonster.proto\x1a!WeeklyBossResinDiscountInfo.proto\
    \x1a\x0cVector.proto\"\xf5\x05\n\x14InvestigationMonster\x12\x1d\n\nleft\
    _times\x18\x01\x20\x01(\rR\tleftTimes\x12*\n\x11next_refresh_time\x18\
    \x02\x20\x01(\rR\x0fnextRefreshTime\x12>\n\nlock_state\x18\x03\x20\x01(\
    \x0e2\x1f.InvestigationMonster.LockStateR\tlockState\x12\x19\n\x08is_ali\
    ve\x18\x04\x20\x01(\x08R\x07isAlive\x12b\n\x1fweekly_boss_resin_discount\
    _info\x18\x05\x20\x01(\x0b2\x1c.WeeklyBossResinDiscountInfoR\x1bweeklyBo\
    ssResinDiscountInfo\x12\x14\n\x05level\x18\x06\x20\x01(\rR\x05level\x12\
    \x20\n\x0bIDCEKNMKCKG\x18\x07\x20\x01(\x08R\x0bIDCEKNMKCKG\x12\x14\n\x05\
    resin\x18\x08\x20\x01(\rR\x05resin\x12)\n\x10refresh_interval\x18\t\x20\
    \x01(\rR\x0frefreshInterval\x12\x20\n\x0bCJJEGKEPHKM\x18\n\x20\x01(\rR\
    \x0bCJJEGKEPHKM\x12\x0e\n\x02id\x18\x0b\x20\x01(\rR\x02id\x12\x19\n\x08s\
    cene_id\x18\x0c\x20\x01(\rR\x07sceneId\x12\x17\n\x07city_id\x18\r\x20\
    \x01(\rR\x06cityId\x12+\n\x12max_boss_chest_num\x18\x0e\x20\x01(\rR\x0fm\
    axBossChestNum\x12\x19\n\x03pos\x18\x0f\x20\x01(\x0b2\x07.VectorR\x03pos\
    \x12\x1a\n\x08group_id\x18\xc4\x01\x20\x01(\rR\x07groupId\x12!\n\x0cmap_\
    layer_id\x18\xf2\x03\x20\x01(\rR\nmapLayerId\x12!\n\x0bBHLBJLIPCBO\x18\
    \x81\x0e\x20\x01(\x08R\x0bBHLBJLIPCBO\x12\x1e\n\nmonster_id\x18\xdf\x0f\
    \x20\x01(\rR\tmonsterId\"*\n\tLockState\x12\r\n\tLOCK_NONE\x10\0\x12\x0e\
    \n\nLOCK_QUEST\x10\x01B\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::WeeklyBossResinDiscountInfo::file_descriptor().clone());
            deps.push(super::Vector::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(InvestigationMonster::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(investigation_monster::LockState::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
